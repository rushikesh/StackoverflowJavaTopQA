var jsonData = [{
    "t": "Why is processing a sorted array faster than an unsorted array?",
    "l": "http://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array",
    "q": "\n\n<p>Here is a piece of <strong>C++</strong> code that seems very peculiar. For some strange reason, sorting the data miraculously makes the code almost six times faster.</p>\n\n<pre class=\"lang-cpp prettyprint-override\"><code>#include &lt;algorithm&gt;\n#include &lt;ctime&gt;\n#include &lt;iostream&gt;\n\nint main()\n{\n    // Generate data\n    const unsigned arraySize = 32768;\n    int data[arraySize];\n\n    for (unsigned c = 0; c &lt; arraySize; ++c)\n        data[c] = std::rand() % 256;\n\n    // !!! With this, the next loop runs faster\n    std::sort(data, data + arraySize);\n\n    // Test\n    clock_t start = clock();\n    long long sum = 0;\n\n    for (unsigned i = 0; i &lt; 100000; ++i)\n    {\n        // Primary loop\n        for (unsigned c = 0; c &lt; arraySize; ++c)\n        {\n            if (data[c] &gt;= 128)\n                sum += data[c];\n        }\n    }\n\n    double elapsedTime = static_cast&lt;double&gt;(clock() - start) / CLOCKS_PER_SEC;\n\n    std::cout &lt;&lt; elapsedTime &lt;&lt; std::endl;\n    std::cout &lt;&lt; \"sum = \" &lt;&lt; sum &lt;&lt; std::endl;\n}\n</code></pre>\n\n<ul>\n<li>Without <code>std::sort(data, data + arraySize);</code>, the code runs in <strong>11.54</strong> seconds.</li>\n<li>With the sorted data, the code runs in <strong>1.93</strong> seconds.</li>\n</ul>\n\n<p>Initially, I thought this might be just a language or compiler anomaly. So I tried it in <strong>Java</strong>.</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>import java.util.Arrays;\nimport java.util.Random;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        // Generate data\n        int arraySize = 32768;\n        int data[] = new int[arraySize];\n\n        Random rnd = new Random(0);\n        for (int c = 0; c &lt; arraySize; ++c)\n            data[c] = rnd.nextInt() % 256;\n\n        // !!! With this, the next loop runs faster\n        Arrays.sort(data);\n\n        // Test\n        long start = System.nanoTime();\n        long sum = 0;\n\n        for (int i = 0; i &lt; 100000; ++i)\n        {\n            // Primary loop\n            for (int c = 0; c &lt; arraySize; ++c)\n            {\n                if (data[c] &gt;= 128)\n                    sum += data[c];\n            }\n        }\n\n        System.out.println((System.nanoTime() - start) / 1000000000.0);\n        System.out.println(\"sum = \" + sum);\n    }\n}\n</code></pre>\n\n<p>With a somewhat similar, but less extreme result.</p>\n\n<hr>\n\n<p>My first thought was that sorting brings the data into the cache, but my next thought was how silly that is, because the array was just generated.</p>\n\n<ul>\n<li>What is going on?</li>\n<li>Why is a sorted array faster than an unsorted array?</li>\n<li>The code is summing up some independent terms, and the order should not matter.</li>\n</ul>\n    ",
    "a": "\n<p><strong>You are a victim of <a href=\"//en.wikipedia.org/wiki/Branch_predictor\">branch prediction</a> fail.</strong></p>\n\n<hr>\n\n<h2>What is Branch Prediction?</h2>\n\n<p>Consider a railroad junction:</p>\n\n<p><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\"><img src=\"//i.stack.imgur.com/muxnt.jpg\" alt=\"\"></a>\n<sub><a href=\"//commons.wikimedia.org/wiki/File:Entroncamento_do_Transpraia.JPG\">Image</a> by Mecanismo, via Wikimedia Commons. Used under the <a href=\"//creativecommons.org/licenses/by-sa/3.0/deed.en\">CC-By-SA 3.0</a> license.</sub></p>\n\n<p>Now for the sake of argument, suppose this is back in the 1800s - before long distance or radio communication.</p>\n\n<p>You are the operator of a junction and you hear a train coming. You have no idea which way it is supposed to go. You stop the train to ask the captain which direction he wants. And then you set the switch appropriately.</p>\n\n<p><em>Trains are heavy and have a lot of inertia. So they take forever to start up and slow down.</em></p>\n\n<p>Is there a better way? You guess which direction the train will go!</p>\n\n<ul>\n<li>If you guessed right, it continues on.</li>\n<li>If you guessed wrong, the captain will stop, back up, and yell at you to flip the switch. Then it can restart down the other path.</li>\n</ul>\n\n<p><strong>If you guess right every time</strong>, the train will never have to stop.<br>\n<strong>If you guess wrong too often</strong>, the train will spend a lot of time stopping, backing up, and restarting.</p>\n\n<hr>\n\n<p><strong>Consider an if-statement:</strong> At the processor level, it is a branch instruction:</p>\n\n<p><img src=\"//i.stack.imgur.com/pyfwC.png\" alt=\"enter image description here\"></p>\n\n<p>You are a processor and you see a branch. You have no idea which way it will go. What do you do? You halt execution and wait until the previous instructions are complete. Then you continue down the correct path.</p>\n\n<p><em>Modern processors are complicated and have long pipelines. So they take forever to \"warm up\" and \"slow down\".</em></p>\n\n<p>Is there a better way? You guess which direction the branch will go!</p>\n\n<ul>\n<li>If you guessed right, you continue executing.</li>\n<li>If you guessed wrong, you need to flush the pipeline and roll back to the branch. Then you can restart down the other path.</li>\n</ul>\n\n<p><strong>If you guess right every time</strong>, the execution will never have to stop.<br>\n<strong>If you guess wrong too often</strong>, you spend a lot of time stalling, rolling back, and restarting.</p>\n\n<hr>\n\n<p>This is branch prediction. I admit it's not the best analogy since the train could just signal the direction with a flag. But in computers, the processor doesn't know which direction a branch will go until the last moment.</p>\n\n<p>So how would you strategically guess to minimize the number of times that the train must back up and go down the other path? You look at the past history! If the train goes left 99% of the time, then you guess left. If it alternates, then you alternate your guesses. If it goes one way every 3 times, you guess the same...</p>\n\n<p><strong><em>In other words, you try to identify a pattern and follow it.</em></strong> This is more or less how branch predictors work.</p>\n\n<p>Most applications have well-behaved branches. So modern branch predictors will typically achieve &gt;90% hit rates. But when faced with unpredictable branches with no recognizable patterns, branch predictors are virtually useless.</p>\n\n<p>Further reading: <a href=\"//en.wikipedia.org/wiki/Branch_predictor\">\"Branch predictor\" article on Wikipedia</a>.</p>\n\n<hr>\n\n<h2>As hinted from above, the culprit is this if-statement:</h2>\n\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n\n<p>Notice that the data is evenly distributed between 0 and 255. \nWhen the data is sorted, roughly the first half of the iterations will not enter the if-statement. After that, they will all enter the if-statement.</p>\n\n<p>This is very friendly to the branch predictor since the branch consecutively goes the same direction many times.\nEven a simple saturating counter will correctly predict the branch except for the few iterations after it switches direction.</p>\n\n<p><strong>Quick visualization:</strong></p>\n\n<pre><code>T = branch taken\nN = branch not taken\n\ndata[] = 0, 1, 2, 3, 4, ... 126, 127, 128, 129, 130, ... 250, 251, 252, ...\nbranch = N  N  N  N  N  ...   N    N    T    T    T  ...   T    T    T  ...\n\n       = NNNNNNNNNNNN ... NNNNNNNTTTTTTTTT ... TTTTTTTTTT  (easy to predict)\n</code></pre>\n\n<p>However, when the data is completely random, the branch predictor is rendered useless because it can't predict random data.\nThus there will probably be around 50% misprediction. (no better than random guessing)</p>\n\n<pre><code>data[] = 226, 185, 125, 158, 198, 144, 217, 79, 202, 118,  14, 150, 177, 182, 133, ...\nbranch =   T,   T,   N,   T,   T,   T,   T,  N,   T,   N,   N,   T,   T,   T,   N  ...\n\n       = TTNTTTTNTNNTTTN ...   (completely random - hard to predict)\n</code></pre>\n\n<hr>\n\n<p><strong>So what can be done?</strong></p>\n\n<p>If the compiler isn't able to optimize the branch into a conditional move, you can try some hacks if you are willing to sacrifice readability for performance.</p>\n\n<p>Replace:</p>\n\n<pre><code>if (data[c] &gt;= 128)\n    sum += data[c];\n</code></pre>\n\n<p>with:</p>\n\n<pre><code>int t = (data[c] - 128) &gt;&gt; 31;\nsum += ~t &amp; data[c];\n</code></pre>\n\n<p>This eliminates the branch and replaces it with some bitwise operations.</p>\n\n<p><sub>(Note that this hack is not strictly equivalent to the original if-statement. But in this case, it's valid for all the input values of <code>data[]</code>.)</sub></p>\n\n<p><strong>Benchmarks: Core i7 920 @ 3.5 GHz</strong></p>\n\n<p>C++ - Visual Studio 2010 - x64 Release</p>\n\n<pre><code>//  Branch - Random\nseconds = 11.777\n\n//  Branch - Sorted\nseconds = 2.352\n\n//  Branchless - Random\nseconds = 2.564\n\n//  Branchless - Sorted\nseconds = 2.587\n</code></pre>\n\n<p>Java - Netbeans 7.1.1 JDK 7 - x64</p>\n\n<pre><code>//  Branch - Random\nseconds = 10.93293813\n\n//  Branch - Sorted\nseconds = 5.643797077\n\n//  Branchless - Random\nseconds = 3.113581453\n\n//  Branchless - Sorted\nseconds = 3.186068823\n</code></pre>\n\n<p>Observations:</p>\n\n<ul>\n<li><strong>With the Branch:</strong> There is a huge difference between the sorted and unsorted data.</li>\n<li><strong>With the Hack:</strong> There is no difference between sorted and unsorted data.</li>\n<li>In the C++ case, the hack is actually a tad slower than with the branch when the data is sorted.</li>\n</ul>\n\n<p>A general rule of thumb is to avoid data-dependent branching in critical loops. (such as in this example)</p>\n\n<hr>\n\n<p><strong>Update :</strong></p>\n\n<ul>\n<li><p>GCC 4.6.1 with <code>-O3</code> or <code>-ftree-vectorize</code> on x64 is able to generate a conditional move. So there is no difference between the sorted and unsorted data - both are fast.</p></li>\n<li><p>VC++ 2010 is unable to generate conditional moves for this branch even under <code>/Ox</code>.</p></li>\n<li><p>Intel Compiler 11 does something miraculous. It <a href=\"//en.wikipedia.org/wiki/Loop_interchange\">interchanges the two loops</a>, thereby hoisting the unpredictable branch to the outer loop. So not only is it immune the mispredictions, it is also twice as fast as whatever VC++ and GCC can generate! In other words, ICC took advantage of the test-loop to defeat the benchmark...</p></li>\n<li><p>If you give the Intel Compiler the branchless code, it just out-right vectorizes it... and is just as fast as with the branch (with the loop interchange).</p></li>\n</ul>\n\n<p>This goes to show that even mature modern compilers can vary wildly in their ability to optimize code...</p>\n    "
}, {
    "t": "Why is subtracting these two times (in 1927) giving a strange result?",
    "l": "http://stackoverflow.com/questions/6841333/why-is-subtracting-these-two-times-in-1927-giving-a-strange-result",
    "q": "\n\n<p>If I run the following program, which parses two date strings referencing times one second apart and compares them:</p>\n\n<pre><code>public static void main(String[] args) throws ParseException {\n    SimpleDateFormat sf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");  \n    String str3 = \"1927-12-31 23:54:07\";  \n    String str4 = \"1927-12-31 23:54:08\";  \n    Date sDt3 = sf.parse(str3);  \n    Date sDt4 = sf.parse(str4);  \n    long ld3 = sDt3.getTime() /1000;  \n    long ld4 = sDt4.getTime() /1000; \n    System.out.println(ld3);  \n    System.out.println(ld4);  \n    System.out.println(ld4-ld3);\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>-1325491905\n-1325491552\n353\n</code></pre>\n\n<p>Why is <code>ld4-ld3</code> not <code>1</code> (as I would expect from the one-second difference in the times), but <code>353</code>?</p>\n\n<p>If I change the dates to times one second later:</p>\n\n<pre><code>String str3 = \"1927-12-31 23:54:08\";  \nString str4 = \"1927-12-31 23:54:09\";  \n</code></pre>\n\n<p>Then <code>ld4-ld3</code> will be <code>1</code></p>\n\n<hr>\n\n<p><strong>UPDATE</strong></p>\n\n<p>Java version:</p>\n\n<pre><code>java version \"1.6.0_22\"\nJava(TM) SE Runtime Environment (build 1.6.0_22-b04)\nDynamic Code Evolution Client VM (build 0.2-b02-internal, 19.0-b04-internal, mixed mode)\n</code></pre>\n\n<p>Timezone(<code>TimeZone.getDefault()</code>):</p>\n\n<pre><code>sun.util.calendar.ZoneInfo[id=\"Asia/Shanghai\",\noffset=28800000,dstSavings=0,\nuseDaylight=false,\ntransitions=19,\nlastRule=null]\n\nLocale(Locale.getDefault()): zh_CN\n</code></pre>\n    ",
    "a": "\n<p>It's a time zone change on December 31st in Shanghai.</p>\n\n<p>See <a href=\"http://www.timeanddate.com/worldclock/clockchange.html?n=237&amp;year=1927\">this page</a> for details of 1927 in Shanghai. Basically at midnight at the end of 1927, the clocks went back 5 minutes and 52 seconds. So \"1927-12-31 23:54:08\" actually happened twice, and it looks like Java is parsing it as the <em>later</em> possible instant for that local date/time - hence the difference.</p>\n\n<p>Just another episode in the often weird and wonderful world of time zones.</p>\n\n<p><strong>EDIT:</strong> Stop the press! History changes...</p>\n\n<p>The original question would no longer demonstrate quite the same behaviour, if rebuilt with  version 2013a of <a href=\"https://code.google.com/p/noda-time/source/browse/src/NodaTime.Demo/StackOverflowExamples.cs\">TZDB</a>. In 2013a, the result would be 358 seconds, with a transition time of 23:54:03 instead of 23:54:08.</p>\n\n<p>I only noticed this because I'm collecting questions like this in Noda Time, in the form of <a href=\"https://code.google.com/p/noda-time/source/browse/src/NodaTime.Demo/StackOverflowExamples.cs\">unit tests</a>... The test has now been changed, but it just goes to show - not even historical data is safe.</p>\n\n<p><strong>EDIT:</strong> History has changed again...</p>\n\n<p>In TZDB 2014f, the time of the change has moved to 1900-12-31, and it's now a mere 343 second change (so the time between <code>t</code> and <code>t+1</code> is 344 seconds, if you see what I mean).</p>\n\n<p><strong>EDIT:</strong> To answer <a href=\"http://stackoverflow.com/questions/6841333/why-is-subtracting-these-two-times-in-1927-giving-a-strange-result/6841479#comment22684267_6841479\">Ken Kin's question</a> around a transition at 1900... it looks like the Java timezone implementation treats <em>all</em> time zones as simply being in their standard time for any instant before the start of 1900 UTC:</p>\n\n<pre><code>import java.util.TimeZone;\n\npublic class Test {\n    public static void main(String[] args) throws Exception {\n        long startOf1900Utc = -2208988800000L;\n        for (String id : TimeZone.getAvailableIDs()) {\n            TimeZone zone = TimeZone.getTimeZone(id);\n            if (zone.getRawOffset() != zone.getOffset(startOf1900Utc - 1)) {\n                System.out.println(id);\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>The code above produces no output on my Windows machine. So any time zone which has any offset other than its standard one at the start of 1900 will count that as a transition. TZDB itself has some data going back earlier than that, and doesn't rely on any idea of a \"fixed\" standard time (which is what <code>getRawOffset</code> assumes to be a valid concept) so other libraries needn't introduce this artificial transition.</p>\n    "
}, {
    "t": "Is Java “pass-by-reference” or “pass-by-value”?",
    "l": "http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value",
    "q": "\n\n<p>I always thought Java was <strong>pass-by-reference</strong>; however I've seen a couple of blog posts (for example, <a href=\"http://javadude.com/articles/passbyvalue.htm\">this blog</a>) that claim it's not. I don't think I understand the distinction they're making. </p>\n\n<p>What is the explanation?</p>\n    ",
    "a": "\n<p>Java is always <em>pass-by-value</em>. Unfortunately, they decided to call pointers references, thus confusing newbies. Because those <em>references</em> are passed by value.</p>\n\n<p>It goes like this:</p>\n\n<pre><code>public static void main( String[] args ){\n    Dog aDog = new Dog(\"Max\");\n    foo(aDog);\n\n    if( aDog.getName().equals(\"Max\") ){ //true\n        System.out.println( \"Java passes by value.\" );\n\n    }else if( aDog.getName().equals(\"Fifi\") ){\n        System.out.println( \"Java passes by reference.\" );\n    }\n}\n\npublic static void foo(Dog d) {\n    d.getName().equals(\"Max\"); // true\n\n    d = new Dog(\"Fifi\");\n    d.getName().equals(\"Fifi\"); // true\n}\n</code></pre>\n\n<p>In this example <code>aDog.getName()</code> will still return <code>\"Max\"</code>. The value <code>aDog</code> within <code>main</code> is not overwritten in the function <code>foo</code> with the <code>Dog</code> <code>\"Fifi\"</code> as the object reference is passed by value. If it were passed by reference, then the <code>aDog.getName()</code> in <code>main</code> would return <code>\"Fifi\"</code> after the call to <code>foo</code>.</p>\n\n<p>Likewise:</p>\n\n<pre><code>Dog aDog = new Dog(\"Max\");\nfoo(aDog);\naDog.getName().equals(\"Fifi\"); // true\n\npublic void foo(Dog d) {\n    d.getName().equals(\"Max\"); // true\n    d.setName(\"Fifi\");\n}\n</code></pre>\n    "
}, {
    "t": "Java += operator",
    "l": "http://stackoverflow.com/questions/8710619/java-operator",
    "q": "\n\n<p>Until today I thought that for example:</p>\n\n<pre><code>i += j;\n</code></pre>\n\n<p>is just a shortcut for:</p>\n\n<pre><code>i = i + j;\n</code></pre>\n\n<p>But what if we try this:</p>\n\n<pre><code>int i = 5;\nlong j = 8;\n</code></pre>\n\n<p>Then <code>i = i + j;</code> will not compile but <code>i += j;</code> will compile fine.</p>\n\n<p>Does it mean that in fact <code>i += j;</code> is a shortcut for something like this\n<code>i = (type of i) (i + j)</code>?</p>\n    ",
    "a": "\n<p>As always with these questions, the JLS holds the answer. In this case <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.26.2\">§15.26.2 Compound Assignment Operators</a>. An extract:</p>\n\n<blockquote>\n  <p>A compound assignment expression of the form <code>E1&nbsp;op=&nbsp;E2</code> is equivalent to <code>E1&nbsp;=&nbsp;(T)((E1)&nbsp;op&nbsp;(E2))</code>, where <code>T</code> is the type of <code>E1</code>, except that <code>E1</code> is evaluated only once.</p>\n</blockquote>\n\n<p>An example cited from <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.26.2\">§15.26.2</a></p>\n\n<blockquote>\n  <p>[...] the following code is correct:</p>\n\n<pre><code>short x = 3;\nx += 4.6;\n</code></pre>\n  \n  <p>and results in x having the value 7 because it is equivalent to:</p>\n\n<pre><code>short x = 3;\nx = (short)(x + 4.6);\n</code></pre>\n</blockquote>\n\n<p>In other words, your assumption is correct.</p>\n    "
}, {
    "t": "Avoiding “!= null” statements in Java?",
    "l": "http://stackoverflow.com/questions/271526/avoiding-null-statements-in-java",
    "q": "\n\n<p>The idiom I use the most when programming in Java is to test if <code>object != null</code> before I use it. This is to avoid a <a href=\"http://docs.oracle.com/javase/6/docs/api/index.html?java/lang/NullPointerException.html\">NullPointerException</a>. I find the code very ugly and it becomes unreadable.</p>\n\n<p>Is there a good alternative to this? </p>\n\n<p><strong>Update:</strong>\nPan, I was not clear with my question. I want to address the necessity to test every object if you want to access a field or method of this object. For example:</p>\n\n<pre><code>...\nif (someobject != null) {\n    someobject.doCalc();\n}\n...\n</code></pre>\n\n<p>In this case I will avoid a <code>NullPointerException</code>, and I don't know exactly if the object is <code>null</code> or not. So my code get splattered with these tests.</p>\n    ",
    "a": "\n<p>This to me sounds like a reasonably common problem that junior to intermediate developers tend to face at some point: they either don't know or don't trust the contracts they are participating in and defensively overcheck for nulls.  Additionally, when writing their own code, they tend to rely on returning nulls to indicate something thus requiring the caller to check for nulls.</p>\n\n<p>To put this another way, there are two instances where null checking comes up:</p>\n\n<ol>\n<li><p>Where null is a valid response in terms of the contract; and</p></li>\n<li><p>Where it isn't a valid response.</p></li>\n</ol>\n\n<p>(2) is easy.  Either use <code>assert</code> statements (assertions) or allow failure (for example,  <a href=\"http://docs.oracle.com/javase/6/docs/api/index.html?java/lang/NullPointerException.html\">NullPointerException</a>).  Assertions are a highly-underused Java feature that was added in 1.4.  The syntax is:</p>\n\n<pre><code>assert &lt;condition&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>assert &lt;condition&gt; : &lt;object&gt;\n</code></pre>\n\n<p>where <code>&lt;condition&gt;</code> is a boolean expression and <code>&lt;object&gt;</code> is an object whose <code>toString()</code> method's output will be included in the error.</p>\n\n<p>An <code>assert</code> statement throws an <code>Error</code> (<code>AssertionError</code>) if the condition is not true.  By default, Java ignores assertions.  You can enable assertions by passing the option <code>-ea</code> to the JVM.  You can enable and disable assertions for individual classes and packages.  This means that you can validate code with the assertions while developing and testing, and disable them in a production environment, although my testing has shown next to no performance impact from assertions.</p>\n\n<p>Not using assertions in this case is OK because the code will just fail, which is what will happen if you use assertions.  The only difference is that with assertions it might happen sooner, in a more-meaningful way and possibly with extra information, which may help you to figure out why it happened if you weren't expecting it.</p>\n\n<p>(1) is a little harder.  If you have no control over the code you're calling then you're stuck.  If null is a valid response, you have to check for it.</p>\n\n<p>If it's code that you do control, however (and this is often the case), then it's a different story.  Avoid using nulls as a response.  With methods that return collections, it's easy: return empty collections (or arrays) instead of nulls pretty much all the time.</p>\n\n<p>With non-collections it might be harder.  Consider this as an example: if you have these interfaces:</p>\n\n<pre><code>public interface Action {\n  void doSomething();\n}\n\npublic interface Parser {\n  Action findAction(String userInput);\n}\n</code></pre>\n\n<p>where Parser takes raw user input and finds something to do, perhaps if you're implementing a command line interface for something.  Now you might make the contract that it returns null if there's no appropriate action.  That leads the null checking you're talking about.</p>\n\n<p>An alternative solution is to never return null and instead use the <a href=\"https://en.wikipedia.org/wiki/Null_Object_pattern\">Null Object pattern</a>:</p>\n\n<pre><code>public class MyParser implements Parser {\n  private static Action DO_NOTHING = new Action() {\n    public void doSomething() { /* do nothing */ }\n  };\n\n  public Action findAction(String userInput) {\n    // ...\n    if ( /* we can't find any actions */ ) {\n      return DO_NOTHING;\n    }\n  }\n}\n</code></pre>\n\n<p>Compare:</p>\n\n<pre><code>Parser parser = ParserFactory.getParser();\nif (parser == null) {\n  // now what?\n  // this would be an example of where null isn't (or shouldn't be) a valid response\n}\nAction action = parser.findAction(someInput);\nif (action == null) {\n  // do nothing\n} else {\n  action.doSomething();\n}\n</code></pre>\n\n<p>to</p>\n\n<pre><code>ParserFactory.getParser().findAction(someInput).doSomething();\n</code></pre>\n\n<p>which is a much better design because it leads to more concise code.</p>\n\n<p>That said, perhaps it is entirely appropriate for the findAction() method to throw an Exception with a meaningful error message -- especially in this case where you are relying on user input.  It would be much better for the findAction method to throw an Exception than for the calling method to blow up with a simple NullPointerException with no explanation.</p>\n\n<pre><code>try {\n    ParserFactory.getParser().findAction(someInput).doSomething();\n} catch(ActionNotFoundException anfe) {\n    userConsole.err(anfe.getMessage());\n}\n</code></pre>\n\n<p>Or if you think the try/catch mechanism is too ugly, rather than Do Nothing your default action should provide feedback to the user.</p>\n\n<pre><code>public Action findAction(final String userInput) {\n    /* Code to return requested Action if found */\n    return new Action() {\n        public void doSomething() {\n            userConsole.err(\"Action not found: \" + userInput);\n        }\n    }\n}\n</code></pre>\n    "
}, {
    "t": "Proper use cases for Android UserManager.isUserAGoat()?",
    "l": "http://stackoverflow.com/questions/13375357/proper-use-cases-for-android-usermanager-isuseragoat",
    "q": "\n\n<p>I was looking at the new APIs introduced in <a href=\"http://en.wikipedia.org/wiki/Android_version_history#Android_4.1.2F4.2_Jelly_Bean\">Android 4.2</a>. While looking at the <a href=\"http://developer.android.com/reference/android/os/UserManager.html\"><code>UserManager</code></a> class I came across the following method:</p>\n\n<blockquote>\n  <p>public boolean isUserAGoat ()</p>\n  \n  <p>Used to determine whether the user making this call is subject to\n  teleportations.</p>\n  \n  <p>Returns whether the user making this call is a goat.</p>\n</blockquote>\n\n<p>How and when should this be used?</p>\n    ",
    "a": "\n<p>From their <strong><a href=\"https://android.googlesource.com/platform/frameworks/base/+/android-5.0.0_r6/core/java/android/os/UserManager.java#433\">source</a></strong>, the method used to return <code>false</code> until it was changed in API 21.</p>\n\n<pre><code>/**\n * Used to determine whether the user making this call is subject to\n * teleportations.\n * @return whether the user making this call is a goat \n */\npublic boolean isUserAGoat() {\n    return false;\n}\n</code></pre>\n\n<p>It looks like the method has no real use for us as developers. Someone has previously stated that it might be an <strong><a href=\"http://en.wikipedia.org/wiki/Easter_egg_(media)\">Easter egg</a></strong>.</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>In API 21 the implementation was changed to check if there is an installed app with the package <code>com.coffeestainstudios.goatsimulator</code></p>\n\n<pre><code>/**\n * Used to determine whether the user making this call is subject to\n * teleportations.\n *\n * &lt;p&gt;As of {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this method can\n * now automatically identify goats using advanced goat recognition technology.&lt;/p&gt;\n *\n * @return Returns true if the user making this call is a goat.\n */\npublic boolean isUserAGoat() {\n    return mContext.getPackageManager()\n            .isPackageAvailable(\"com.coffeestainstudios.goatsimulator\");\n}\n</code></pre>\n\n<p>Here is the updated <strong><a href=\"https://android.googlesource.com/platform/frameworks/base/+/android-5.0.0_r6/core/java/android/os/UserManager.java\">source link</a></strong></p>\n    "
}, {
    "t": "Differences between HashMap and Hashtable?",
    "l": "http://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable",
    "q": "\n\n<p>What are the differences between a <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?java/util/HashMap.html\"><code>HashMap</code></a> and a <a href=\"http://docs.oracle.com/javase/8/docs/api/index.html?java/util/Hashtable.html\"><code>Hashtable</code></a> in Java?</p>\n\n<p>Which is more <em>efficient</em> for <em>non-threaded</em> applications?</p>\n    ",
    "a": "\n<p>There are several differences between HashMap and Hashtable in Java:</p>\n\n<ol>\n<li><p><a href=\"http://java.sun.com/javase/7/docs/api/java/util/Hashtable.html\">Hashtable</a> is synchronized, whereas <a href=\"http://java.sun.com/javase/7/docs/api/java/util/HashMap.html\">HashMap</a> is not.  This makes <code>HashMap</code> better for non-threaded applications, as unsynchronized Objects typically perform better than synchronized ones.</p></li>\n<li><p><code>Hashtable</code> does not allow null keys or values.  <code>HashMap</code> allows one null key and any number of <code>null</code> values.</p></li>\n<li><p>One of HashMap's subclasses is <a href=\"http://java.sun.com/javase/7/docs/api/java/util/LinkedHashMap.html\">LinkedHashMap</a>, so in the event that you'd want predictable iteration order (which is insertion order by default), you could easily swap out the <code>HashMap</code> for a <code>LinkedHashMap</code>.  This wouldn't be as easy if you were using <code>Hashtable</code>.</p></li>\n</ol>\n\n<p>Since synchronization is not an issue for you, I'd recommend <code>HashMap</code>. If synchronization becomes an issue, you may also look at <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentHashMap.html\">ConcurrentHashMap</a>.</p>\n    "
}, {
    "t": "Read/convert an InputStream to a String",
    "l": "http://stackoverflow.com/questions/309424/read-convert-an-inputstream-to-a-string",
    "q": "\n\n<p>If you have <code>java.io.InputStream</code> object, how should you process that object and produce a <code>String</code>?</p>\n\n<hr>\n\n<p>Suppose I have an <code>InputStream</code> that contains text data, and I want to convert this to a <code>String</code> (for example, so I can write the contents of the stream to a log file).</p>\n\n<p>What is the easiest way to take the <code>InputStream</code> and convert it to a <code>String</code>?</p>\n\n<pre><code>public String convertStreamToString(InputStream is) { \n    // ???\n}\n</code></pre>\n    ",
    "a": "\n<p>A nice way to do this is using <a href=\"http://commons.apache.org/\">Apache commons</a> <code><a href=\"http://commons.apache.org/proper/commons-io/apidocs/org/apache/commons/io/IOUtils.html\">IOUtils</a></code> to copy the <code>InputStream</code> into a <code>StringWriter</code>... something like</p>\n\n<pre><code>StringWriter writer = new StringWriter();\nIOUtils.copy(inputStream, writer, encoding);\nString theString = writer.toString();\n</code></pre>\n\n<p>or even</p>\n\n<pre><code>// NB: does not close inputStream, you can use IOUtils.closeQuietly for that\nString theString = IOUtils.toString(inputStream, encoding); \n</code></pre>\n\n<p>Alternatively, you could use <code>ByteArrayOutputStream</code> if you don't want to mix your Streams and Writers</p>\n    "
}, {
    "t": "Creating a memory leak with Java [closed]",
    "l": "http://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java",
    "q": "\n\n<p>I just had an interview, and I was asked to create a memory leak with Java.\nNeedless to say I felt pretty dumb having no clue on how to even start creating one.</p>\n\n<h3>What would an example be?</h3>\n    ",
    "a": "\n<p>Here's a good way to create a true memory leak (objects inaccessible by running code but still stored in memory) in pure Java:</p>\n\n<ol>\n<li>The application creates a long-running thread (or use a thread pool to leak even faster).</li>\n<li>The thread loads a class via an (optionally custom) ClassLoader.</li>\n<li>The class allocates a large chunk of memory (e.g. <code>new byte[1000000]</code>), stores a strong reference to it in a static field, and then stores a reference to itself in a ThreadLocal.  Allocating the extra memory is optional (leaking the Class instance is enough), but it will make the leak work that much faster.</li>\n<li>The thread clears all references to the custom class or the ClassLoader it was loaded from.</li>\n<li>Repeat.</li>\n</ol>\n\n<p>This works because the ThreadLocal keeps a reference to the object, which keeps a reference to its Class, which in turn keeps a reference to its ClassLoader.  The ClassLoader, in turn, keeps a reference to all the Classes it has loaded.  It gets worse because in many JVM implementations Classes and ClassLoaders are allocated straight into permgen and are never GC'd at all.</p>\n\n<p>A variation on this pattern is why application containers (like Tomcat) can leak memory like a sieve if you frequently redeploy applications that happen to use ThreadLocals in any way.  (Since the application container uses Threads as described, and each time you redeploy the application a new ClassLoader is used.)</p>\n\n<p><strong>Update</strong>: Since lots of people keep asking for it, <a href=\"https://gist.github.com/dpryden/b2bb29ee2d146901b4ae\">here's some example code that shows this behavior in action</a>.</p>\n    "
}, {
    "t": "Iterate through a HashMap [duplicate]",
    "l": "http://stackoverflow.com/questions/1066589/iterate-through-a-hashmap",
    "q": "\n\n<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/46898/how-do-i-iterate-over-each-entry-in-a-collection-map\">How do I iterate over each Entry in a Collection Map?</a>  </p>\n</blockquote>\n\n\n\n<p>What's the best way to iterate over the items in a <code>HashMap</code>?</p>\n    ",
    "a": "\n<p>Iterate through the <a href=\"http://www.java2s.com/Code/JavaAPI/java.util/HashtableentrySet.htm\"><code>entrySet</code></a> like so:</p>\n\n<pre><code>public static void printMap(Map mp) {\n    Iterator it = mp.entrySet().iterator();\n    while (it.hasNext()) {\n        Map.Entry pair = (Map.Entry)it.next();\n        System.out.println(pair.getKey() + \" = \" + pair.getValue());\n        it.remove(); // avoids a ConcurrentModificationException\n    }\n}\n</code></pre>\n\n<p>Read more on <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Map.html\"><code>Map</code></a></p>\n    "
}, {
    "t": "Create ArrayList (ArrayList<T>) from array (T[])",
    "l": "http://stackoverflow.com/questions/157944/create-arraylist-arraylistt-from-array-t",
    "q": "\n\n<p>I have an array that is initialized like:</p>\n\n<pre><code>Element[] array = {new Element(1), new Element(2), new Element(3)};\n</code></pre>\n\n<p>I would like to convert this array into an object of the ArrayList class.</p>\n\n<pre><code>ArrayList&lt;Element&gt; arraylist = ???;\n</code></pre>\n    ",
    "a": "\n<pre><code>new ArrayList&lt;Element&gt;(Arrays.asList(array))\n</code></pre>\n    "
}, {
    "t": "Why is char[] preferred over String for passwords?",
    "l": "http://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords",
    "q": "\n\n<p>In <a href=\"http://en.wikipedia.org/wiki/Swing_%28Java%29\">Swing</a>, the password field has a <code>getPassword()</code> (returns <code>char[]</code>) method instead of the usual <code>getText()</code> (returns <code>String</code>) method. Similarly, I have come across a suggestion not to use <code>String</code>s to handle passwords. Why does <code>String</code> pose a threat to security when it comes to passwords?</p>\n\n<p>It feels inconvenient to use <code>char[]</code>.</p>\n    ",
    "a": "\n<p>Strings are immutable. That means once you've created the string, if another process can dump memory, there's no way (aside from reflection) you can get rid of the data before GC kicks in.</p>\n\n<p>With an array, you can explicitly wipe the data after you're done with it: you can overwrite the array with anything you like, and the password won't be present anywhere in the system, even <em>before</em> garbage collection.</p>\n\n<p>So yes, this <em>is</em> a security concern - but even using <code>char[]</code> only <em>reduces</em> the window of opportunity for an attacker, and it's only for this specific type of attack.</p>\n\n<p>EDIT: As noted in comments, it's possible that arrays being moved by the garbage collector will leave stray copies of the data in memory. I believe this is implementation-specific - the GC <em>may</em> clear all memory as it goes, to avoid this sort of thing. Even if it does, there's still the time during which the <code>char[]</code> contains the actual characters as an attack window.</p>\n    "
}, {
    "t": "Generating random integers in a range with Java",
    "l": "http://stackoverflow.com/questions/363681/generating-random-integers-in-a-range-with-java",
    "q": "\n\n<p>I am trying to generate a random integer with Java, but random in a specific range. For example, my range is 5-10, meaning that 5 is the smallest possible value the random number can take, and 10 is the biggest. Any other number in between these numbers is possible to be a value, too. </p>\n\n<p>In Java, there is a method <code>random()</code> in the <code>Math</code> class, which returns a <code>double</code> value between 0.0 and 1.0. In the class <code>Random</code> there is a method <code>nextInt(int n)</code>, which returns a random integer value in the range of 0 (inclusive) and n (exclusive). I couldn't find a method, which returns a random integer value between two numbers.</p>\n\n<p>I have tried the following things, but I still have problems:\n(minimum and maximum are the smallest and biggest numbers).</p>\n\n<p>Solution 1:</p>\n\n<pre><code>randomNum = minimum + (int)(Math.random()*maximum); \n</code></pre>\n\n<p>Problem: <code>randomNum</code> is assinged values numbers bigger than <code>maximum</code>.</p>\n\n<p>Solution 2:</p>\n\n<pre><code>Random rn = new Random();\nint n = maximum - minimum + 1;\nint i = rn.nextInt() % n;\nrandomNum =  minimum + i;\n</code></pre>\n\n<p>Problem: <code>randomNum</code>  is assigned values smaller than <code>minimum</code>.</p>\n\n<p>How do I solve this problem?</p>\n\n<p>I have tried also browsing through the archive and found:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/137783/given-a-function-which-produces-a-random-integer-in-the-range-1-to-5-write-a-fu\">Expand a random range from 1–5 to 1–7</a></li>\n<li><a href=\"http://stackoverflow.com/questions/288739/generate-random-numbers-uniformly-over-entire-range\">Generate random numbers uniformly over an entire range</a></li>\n</ul>\n\n<p>But I couldn't solve the problem.</p>\n    ",
    "a": "\n<p>The standard way to do this is as follows:</p>\n\n<pre><code>/**\n * Returns a pseudo-random number between min and max, inclusive.\n * The difference between min and max can be at most\n * &lt;code&gt;Integer.MAX_VALUE - 1&lt;/code&gt;.\n *\n * @param min Minimum value\n * @param max Maximum value.  Must be greater than min.\n * @return Integer between min and max, inclusive.\n * @see java.util.Random#nextInt(int)\n */\npublic static int randInt(int min, int max) {\n\n    // NOTE: Usually this should be a field rather than a method\n    // variable so that it is not re-seeded every call.\n    Random rand = new Random();\n\n    // nextInt is normally exclusive of the top value,\n    // so add 1 to make it inclusive\n    int randomNum = rand.nextInt((max - min) + 1) + min;\n\n    return randomNum;\n}\n</code></pre>\n\n<p>See <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Random.html#nextInt-int-\">the relevant JavaDoc</a>.  In practice, the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/Random.html\">java.util.Random</a> class is often preferable to <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#random--\">java.lang.Math.random()</a>.</p>\n\n<p>In particular, there is no need to reinvent the random integer generation wheel when there is a straightforward API within the standard library to accomplish the task.</p>\n    "
}, {
    "t": "Why is printing “B” dramatically slower than printing “#”?",
    "l": "http://stackoverflow.com/questions/21947452/why-is-printing-b-dramatically-slower-than-printing",
    "q": "\n\n<p>I generated two matrices of <code>1000</code> x <code>1000</code>:</p>\n\n<p>First Matrix: <code>O</code> and <code>#</code>.<br>\nSecond Matrix: <code>O</code> and <code>B</code>.</p>\n\n<p>Using the following code, the first matrix took 8.52 seconds to complete:</p>\n\n<pre><code>Random r = new Random();\nfor (int i = 0; i &lt; 1000; i++) {\n    for (int j = 0; j &lt; 1000; j++) {\n        if(r.nextInt(4) == 0) {\n            System.out.print(\"O\");\n        } else {\n            System.out.print(\"#\");\n        }\n    }\n\n   System.out.println(\"\");\n }\n</code></pre>\n\n<p>With this code, the second matrix took 259.152 seconds to complete:</p>\n\n<pre><code>Random r = new Random();\nfor (int i = 0; i &lt; 1000; i++) {\n    for (int j = 0; j &lt; 1000; j++) {\n        if(r.nextInt(4) == 0) {\n            System.out.print(\"O\");\n        } else {\n            System.out.print(\"B\"); //only line changed\n        }\n    }\n\n    System.out.println(\"\");\n}\n</code></pre>\n\n<p>What is the reason behind the dramatically different run times?</p>\n\n<hr>\n\n<p>As suggested in the comments, printing only <code>System.out.print(\"#\");</code> takes 7.8871 seconds, whereas <code>System.out.print(\"B\");</code> gives <code>still printing...</code>.</p>\n\n<p>As others who pointed out that it works for them normally, I tried <a href=\"http://ideone.com\">Ideone.com</a> for instance, and both pieces of code execute at the same speed.</p>\n\n<p>Test Conditions:</p>\n\n<ul>\n<li>I ran this test from Netbeans 7.2, with the output into its console</li>\n<li>I used <code>System.nanoTime()</code> for measurements</li>\n</ul>\n    ",
    "a": "\n<p><em>Pure speculation</em> is that you're using a terminal that attempts to do <a href=\"http://en.wikipedia.org/wiki/Word_wrap\">word-wrapping</a> rather than character-wrapping, and treats <code>B</code> as a word character but <code>#</code> as a non-word character. So when it reaches the end of a line and searches for a place to break the line, it sees a <code>#</code> almost immediately and happily breaks there; whereas with the <code>B</code>, it has to keep searching for longer, and may have more text to wrap (which may be expensive on some terminals, e.g., outputting backspaces, then outputting spaces to overwrite the letters being wrapped).</p>\n\n<p>But that's pure speculation.</p>\n    "
}, {
    "t": "When to use LinkedList over ArrayList?",
    "l": "http://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist",
    "q": "\n\n<p>I've always been one to simply use:</p>\n\n<pre><code>List&lt;String&gt; names = new ArrayList&lt;String&gt;();\n</code></pre>\n\n<p>I use the interface as the type name for <em>portability</em>, so that when I ask questions such as these I can rework my code.  </p>\n\n<p>When should <code>LinkedList</code> be used over <code>ArrayList</code> and vice-versa?</p>\n    ",
    "a": "\n<p><strong>TL;DR</strong> <code>ArrayList</code> with <code>ArrayDeque</code> are preferable in <em>much</em> more use-cases, than <code>LinkedList</code>. Not sure&nbsp;— just start with <code>ArrayList</code>.</p>\n\n<hr>\n\n<p>LinkedList and ArrayList are two different implementations of the List interface.  LinkedList implements it with a doubly-linked list.  ArrayList implements it with a dynamically resizing array.</p>\n\n<p>As with standard linked list and array operations, the various methods will have different algorithmic runtimes.</p>\n\n<p>For <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/LinkedList.html\"><code>LinkedList&lt;E&gt;</code></a></p>\n\n<ul>\n<li><code>get(int index)</code> is O(n)</li>\n<li><code>add(E element)</code> is O(1)</li>\n<li><code>add(int index, E element)</code> is O(n)</li>\n<li><code>remove(int index)</code> is O(n)</li>\n<li><code>Iterator.remove()</code> is O(1)   &lt;--- main benefit of <code>LinkedList&lt;E&gt;</code></li>\n<li><code>ListIterator.add(E element)</code> is O(1)    &lt;--- main benefit of <code>LinkedList&lt;E&gt;</code></li>\n</ul>\n\n<p>For <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/ArrayList.html\"><code>ArrayList&lt;E&gt;</code></a></p>\n\n<ul>\n<li><code>get(int index)</code> is O(1)   &lt;--- main benefit of <code>ArrayList&lt;E&gt;</code></li>\n<li><code>add(E element)</code> is O(1) amortized, but O(n) worst-case since the array must be resized and copied</li>\n<li><code>add(int index, E element)</code> is O(n - index) amortized, but O(n) worst-case (as above)</li>\n<li><code>remove(int index)</code> is O(n - index) (i.e. removing last is O(1))</li>\n<li><code>Iterator.remove()</code> is O(n - index)</li>\n<li><code>ListIterator.add(E element)</code> is O(n - index)</li>\n</ul>\n\n<p><code>LinkedList&lt;E&gt;</code> allows for constant-time insertions or removals <em>using iterators</em>, but only sequential access of elements.  In other words, you can walk the list forwards or backwards, but finding a position in the list takes time proportional to the size of the list.</p>\n\n<p><code>ArrayList&lt;E&gt;</code>, on the other hand, allow fast random read access, so you can grab any element in constant time.  But adding or removing from anywhere but the end requires shifting all the latter elements over, either to make an opening or fill the gap.  Also, if you add more elements than the capacity of the underlying array, a new array (1.5 times the size) is allocated, and the old array is copied to the new one, so adding to an ArrayList is O(n) in the worst case but constant on average.</p>\n\n<p>So depending on the operations you intend to do, you should choose the implementations accordingly.  Iterating over either kind of List is practically equally cheap.  (Iterating over an <code>ArrayList</code> is technically faster, but unless you're doing something really performance-sensitive, you shouldn't worry about this -- they're both constants.)</p>\n\n<p>The main benefits of using a <code>LinkedList</code> arise when you re-use existing iterators to insert and remove elements. These operations can then be done in O(1) by changing the list locally only. In an array list, the remainder of the array needs to be <em>moved</em> (i.e. copied). On the other side, seeking in a <code>LinkedList</code> means following the links in O(n), whereas in an <code>ArrayList</code> the desired position can be computed mathematically and accessed in O(1).</p>\n\n<p>Also, if you have large lists, keep in mind that memory usage is also different.  Each element of a LinkedList has more overhead since pointers to the next and previous elements are also stored.  ArrayLists don't have this overhead.  However, ArrayLists take up as much memory as is allocated for the capacity, regardless of whether elements have actually been added.</p>\n\n<p>The default initial capacity of an ArrayList is pretty small (10 from Java 1.4 - 1.7).  But since the underlying implementation is an array, the array must be resized if you add a lot of elements.  To avoid the high cost of resizing when you know you're going to add a lot of elements, construct the ArrayList with a higher initial capacity.</p>\n\n<p>It's worth noting that <strong>Vector</strong> also implements the List interface and is almost identical to ArrayList.  The difference is that Vector is synchronized, so it is thread-safe.  Because of this, it is also slightly slower than ArrayList.  So as far as I understand, most Java programmers avoid Vector in favor of ArrayList since they will probably synchronize explicitly anyway if they care about that.</p>\n    "
}, {
    "t": "What is a serialVersionUID and why should I use it?",
    "l": "http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it",
    "q": "\n\n<p>Eclipse issues warnings when a <code>serialVersionUID</code> is missing.  </p>\n\n<blockquote>\n  <p>The serializable class Foo does not declare a static final\n  serialVersionUID field of type long</p>\n</blockquote>\n\n<p>What is <code>serialVersionUID</code> and why is it important?  Please show an example where missing <code>serialVersionUID</code> will cause a problem.</p>\n    ",
    "a": "\n<p>The docs for <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\"><code>java.io.Serializable</code></a> are probably about as good an explanation as you'll get:</p>\n\n<blockquote>\n  <p>The serialization runtime associates\n  with each serializable class a version\n  number, called a serialVersionUID,\n  which is used during deserialization\n  to verify that the sender and receiver\n  of a serialized object have loaded\n  classes for that object that are\n  compatible with respect to\n  serialization. If the receiver has\n  loaded a class for the object that has\n  a different serialVersionUID than that\n  of the corresponding sender's class,\n  then deserialization will result in an\n  <code>InvalidClassException</code>. A serializable\n  class can declare its own\n  serialVersionUID explicitly by\n  declaring a field named\n  \"<code>serialVersionUID</code>\" that must be\n  static, final, and of type <code>long</code>:</p>\n\n<pre><code>ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;\n</code></pre>\n  \n  <p>If a\n  serializable class does not explicitly\n  declare a serialVersionUID, then the\n  serialization runtime will calculate a\n  default serialVersionUID value for\n  that class based on various aspects of\n  the class, as described in the\n  Java(TM) Object Serialization\n  Specification. However, it is <em>strongly\n  recommended</em> that all serializable\n  classes explicitly declare\n  serialVersionUID values, since the\n  default serialVersionUID computation\n  is highly sensitive to class details\n  that may vary depending on compiler\n  implementations, and can thus result\n  in unexpected <code>InvalidClassExceptions</code>\n  during deserialization. Therefore, to\n  guarantee a consistent\n  serialVersionUID value across\n  different java compiler\n  implementations, a serializable class\n  must declare an explicit\n  serialVersionUID value. It is also\n  strongly advised that explicit\n  serialVersionUID declarations use the\n  private modifier where possible, since\n  such declarations apply only to the\n  immediately declaring\n  class--serialVersionUID fields are not\n  useful as inherited members.</p>\n</blockquote>\n    "
}, {
    "t": "In Java, what's the difference between public, default, protected, and private?",
    "l": "http://stackoverflow.com/questions/215497/in-java-whats-the-difference-between-public-default-protected-and-private",
    "q": "\n\n<p>Are there clear rules on when to use each of these when making classes and interfaces and dealing with inheritance?</p>\n    ",
    "a": "\n<p>This Java <a href=\"http://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html\">tutorial</a> may be of some use to you.</p>\n\n<pre>Modifier    | Class | Package | Subclass | World\n————————————+———————+—————————+——————————+———————\npublic      |  y    |    y    |    y     |   y\n————————————+———————+—————————+——————————+———————\nprotected   |  y    |    y    |    y     |   n\n————————————+———————+—————————+——————————+———————\nno modifier |  y    |    y    |    n     |   n    **also known as package-private**\n————————————+———————+—————————+——————————+———————\nprivate     |  y    |    n    |    n     |   n\n\ny: accessible\nn: not accessible\n</pre>\n    "
}, {
    "t": "How to test a class that has private methods, fields or inner classes",
    "l": "http://stackoverflow.com/questions/34571/how-to-test-a-class-that-has-private-methods-fields-or-inner-classes",
    "q": "\n\n<p>How do I use JUnit to test a class that has internal private methods, fields or nested classes? It seems bad to change the access modifier for a method just to be able to run a test. </p>\n    ",
    "a": "\n<p>If you have somewhat of a legacy application, and you're not allowed to change the visibility of your methods, the best way to test private methods is to use <a href=\"http://en.wikipedia.org/wiki/Reflection_%28computer_programming%29\">reflection</a>. </p>\n\n<p>Internally we're using helpers to get/set <code>private</code> and <code>private static</code> variables as well as invoke <code>private</code> and <code>private static</code> methods. The following patterns will let you do pretty much anything related to the private methods and fields. Of course you can't change <code>private static final</code> variables through reflection.</p>\n\n<pre><code>Method method = targetClass.getDeclaredMethod(methodName, argClasses);\nmethod.setAccessible(true);\nreturn method.invoke(targetObject, argObjects);\n</code></pre>\n\n<p>And for fields:</p>\n\n<pre><code>Field field = targetClass.getDeclaredField(fieldName);\nfield.setAccessible(true);\nfield.set(object, value);\n</code></pre>\n\n<hr>\n\n<blockquote>\n  <p><strong>Notes:</strong><br>\n  1. <code>targetClass.getDeclaredMethod(methodName, argClasses)</code> lets you look into <code>private</code> methods. The same thing applies for\n  <code>getDeclaredField</code>.<br>\n  2. The <code>setAccessible(true)</code> is required to play around with privates.</p>\n</blockquote>\n    "
}, {
    "t": "Converting String to int in Java?",
    "l": "http://stackoverflow.com/questions/5585779/converting-string-to-int-in-java",
    "q": "\n\n<p>How can a <code>String</code> be converted to an <code>int</code> in Java?</p>\n\n<p>My String contains only numbers and I want to return the number it represents.</p>\n\n<p>For example, given the string <code>\"1234\"</code> the result should be the number <code>1234</code>.</p>\n    ",
    "a": "\n<pre><code>int foo = Integer.parseInt(\"1234\");\n</code></pre>\n\n<p>See the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#parseInt-java.lang.String-int-\">Javadoc</a> for more information.</p>\n\n<p><em>(If you have it in a <code>StringBuffer</code>, you'll need to do <code>Integer.parseInt(myBuffer.toString());</code> instead).</em></p>\n    "
}, {
    "t": "Is there a unique Android device ID?",
    "l": "http://stackoverflow.com/questions/2785485/is-there-a-unique-android-device-id",
    "q": "\n\n<p>Do Android devices have a unique id, and if so, what is a simple way to access it via Java?</p>\n    ",
    "a": "\n<p><a href=\"http://developer.android.com/reference/android/provider/Settings.Secure.html#ANDROID_ID\"><code>Settings.Secure#ANDROID_ID</code></a> returns the Android ID as an <em>unique</em> 64-bit hex string.</p>\n\n<pre><code>import android.provider.Settings.Secure;\n\nprivate String android_id = Secure.getString(getContext().getContentResolver(),\n                                                        Secure.ANDROID_ID); \n</code></pre>\n\n<h3>Update: 06/05/2015</h3>\n\n<p>When reviewing this as a possible solution, please consider <a href=\"http://stackoverflow.com/a/2853253/166712\">Joe's answer</a> below instead as an alternative.</p>\n    "
}, {
    "t": "Using java.net.URLConnection to fire and handle HTTP requests",
    "l": "http://stackoverflow.com/questions/2793150/using-java-net-urlconnection-to-fire-and-handle-http-requests",
    "q": "\n\n<p>Use of <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html\"><code>java.net.URLConnection</code></a> is asked about pretty often here, and the <a href=\"http://download.oracle.com/javase/tutorial/networking/urls/connecting.html\">Oracle tutorial</a> is <em>too</em> concise about it. </p>\n\n<p>That tutorial basically only shows how to fire a GET request and read the response. It doesn't explain anywhere how to use it to among others perform a POST request, set request headers, read response headers, deal with cookies, submit a HTML form, upload a file, etc. </p>\n\n<p>So, how can I use <code>java.net.URLConnection</code> to fire and handle \"advanced\" HTTP requests?</p>\n    ",
    "a": "\n<p><sup><em>First a disclaimer beforehand: the posted code snippets are all basic examples. You'll need to handle trivial <code>IOException</code>s and <code>RuntimeException</code>s like <code>NullPointerException</code>, <code>ArrayIndexOutOfBoundsException</code> and consorts yourself.</em></sup></p>\n\n<hr>\n\n<h3>Preparing</h3>\n\n<p>We first need to know at least the URL and the charset. The parameters are optional and depend on the functional requirements.</p>\n\n<pre><code>String url = \"http://example.com\";\nString charset = \"UTF-8\";  // Or in Java 7 and later, use the constant: java.nio.charset.StandardCharsets.UTF_8.name()\nString param1 = \"value1\";\nString param2 = \"value2\";\n// ...\n\nString query = String.format(\"param1=%s&amp;param2=%s\", \n     URLEncoder.encode(param1, charset), \n     URLEncoder.encode(param2, charset));\n</code></pre>\n\n<p>The query parameters must be in <code>name=value</code> format and be concatenated by <code>&amp;</code>. You would normally also <a href=\"http://en.wikipedia.org/wiki/Percent-encoding\">URL-encode</a> the query parameters with the specified charset using <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLEncoder.html\"><code>URLEncoder#encode()</code></a>.</p>\n\n<p><sup>The <code>String#format()</code> is just for convenience. I prefer it when I would need the String concatenation operator <code>+</code> more than twice.</sup></p>\n\n<hr>\n\n<h3>Firing a <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3\">HTTP GET</a> request with (optionally) query parameters</h3>\n\n<p>It's a trivial task. It's the default request method.</p>\n\n<pre><code>URLConnection connection = new URL(url + \"?\" + query).openConnection();\nconnection.setRequestProperty(\"Accept-Charset\", charset);\nInputStream response = connection.getInputStream();\n// ...\n</code></pre>\n\n<p>Any query string should be concatenated to the URL using <code>?</code>. The <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.2\"><code>Accept-Charset</code></a> header may hint the server what encoding the parameters are in. If you don't send any query string, then you can leave the <code>Accept-Charset</code> header away. If you don't need to set any headers, then you can even use the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URL.html#openStream%28%29\"><code>URL#openStream()</code></a> shortcut method.</p>\n\n<pre><code>InputStream response = new URL(url).openStream();\n// ...\n</code></pre>\n\n<p>Either way, if the other side is a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html\"><code>HttpServlet</code></a>, then its <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\"><code>doGet()</code></a> method will be called and the parameters will be available by <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29\"><code>HttpServletRequest#getParameter()</code></a>.</p>\n\n<hr>\n\n<h3>Firing a <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5\">HTTP POST</a> request with query parameters</h3>\n\n<p>Setting the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29\"><code>URLConnection#setDoOutput()</code></a> to <code>true</code> implicitly sets the request method to POST. The standard HTTP POST as web forms do is of type <code>application/x-www-form-urlencoded</code> wherein the query string is written to the request body.</p>\n\n<pre><code>URLConnection connection = new URL(url).openConnection();\nconnection.setDoOutput(true); // Triggers POST.\nconnection.setRequestProperty(\"Accept-Charset\", charset);\nconnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded;charset=\" + charset);\n\ntry (OutputStream output = connection.getOutputStream()) {\n    output.write(query.getBytes(charset));\n}\n\nInputStream response = connection.getInputStream();\n// ...\n</code></pre>\n\n<p>Note: whenever you'd like to submit a HTML form programmatically, don't forget to take the <code>name=value</code> pairs of any <code>&lt;input type=\"hidden\"&gt;</code> elements into the query string and of course also the <code>name=value</code> pair of the <code>&lt;input type=\"submit\"&gt;</code> element which you'd like to \"press\" programmatically (because that's usually been used in the server side to distinguish if a button was pressed and if so, which one).</p>\n\n<p>You can also cast the obtained <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html\"><code>URLConnection</code></a> to <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html\"><code>HttpURLConnection</code></a> and use its <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setRequestMethod%28java.lang.String%29\"><code>HttpURLConnection#setRequestMethod()</code></a> instead. But if you're trying to use the connection for output you still need to set <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#setDoOutput%28boolean%29\"><code>URLConnection#setDoOutput()</code></a> to <code>true</code>.</p>\n\n<pre><code>HttpURLConnection httpConnection = (HttpURLConnection) new URL(url).openConnection();\nhttpConnection.setRequestMethod(\"POST\");\n// ...\n</code></pre>\n\n<p>Either way, if the other side is a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html\"><code>HttpServlet</code></a>, then its <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\"><code>doPost()</code></a> method will be called and the parameters will be available by <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/ServletRequest.html#getParameter%28java.lang.String%29\"><code>HttpServletRequest#getParameter()</code></a>.</p>\n\n<hr>\n\n<h3>Actually firing the HTTP request</h3>\n\n<p>You can fire the HTTP request explicitly with <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#connect%28%29\"><code>URLConnection#connect()</code></a>, but the the request will automatically be fired on demand when you want to get any information about the HTTP response, such as the response body using <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/URLConnection.html#getInputStream%28%29\"><code>URLConnection#getInputStream()</code></a> and so on. The above examples does exactly that, so the <code>connect()</code> call is in fact superfluous.</p>\n\n<hr>\n\n<h3>Gathering HTTP response information</h3>\n\n<p>1) <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">HTTP response status</a>:</p>\n\n<p>You need a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html\"><code>HttpURLConnection</code></a> here. Cast it first if necessary.</p>\n\n<pre><code>int status = httpConnection.getResponseCode();\n</code></pre>\n\n<p>2) <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\">HTTP response headers</a>:</p>\n\n<pre><code>for (Entry&lt;String, List&lt;String&gt;&gt; header : connection.getHeaderFields().entrySet()) {\n    System.out.println(header.getKey() + \"=\" + header.getValue());\n}\n</code></pre>\n\n<p>3) <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.17\">HTTP response encoding</a>:</p>\n\n<p>When the <code>Content-Type</code> contains a <code>charset</code> parameter, then the response body is likely text based and we'd like to process the response body with the server-side specified character encoding then.</p>\n\n<pre><code>String contentType = connection.getHeaderField(\"Content-Type\");\nString charset = null;\n\nfor (String param : contentType.replace(\" \", \"\").split(\";\")) {\n    if (param.startsWith(\"charset=\")) {\n        charset = param.split(\"=\", 2)[1];\n        break;\n    }\n}\n\nif (charset != null) {\n    try (BufferedReader reader = new BufferedReader(new InputStreamReader(response, charset))) {\n        for (String line; (line = reader.readLine()) != null;) {\n            // ... System.out.println(line) ?\n        }\n    }\n}\nelse {\n    // It's likely binary content, use InputStream/OutputStream.\n}\n</code></pre>\n\n<hr>\n\n<h3>Maintaining the session</h3>\n\n<p>The server side session is usually backed by a cookie. Some web forms require that you're logged in and/or are tracked by a session. You can use the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookieHandler.html\"><code>CookieHandler</code></a> API to maintain cookies. You need to prepare a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookieManager.html\"><code>CookieManager</code></a> with a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html\"><code>CookiePolicy</code></a> of <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/CookiePolicy.html#ACCEPT_ALL\"><code>ACCEPT_ALL</code></a> before sending all HTTP requests.</p>\n\n<pre><code>// First set the default cookie manager.\nCookieHandler.setDefault(new CookieManager(null, CookiePolicy.ACCEPT_ALL));\n\n// All the following subsequent URLConnections will use the same cookie manager.\nURLConnection connection = new URL(url).openConnection();\n// ...\n\nconnection = new URL(url).openConnection();\n// ...\n\nconnection = new URL(url).openConnection();\n// ...\n</code></pre>\n\n<p>Note that this is known to not always work properly in all circumstances. If it fails for you, then best is to manually gather and set the cookie headers. You basically need to grab all <code>Set-Cookie</code> headers from the response of the login or the first <code>GET</code> request and then pass this through the subsequent requests.</p>\n\n<pre><code>// Gather all cookies on the first request.\nURLConnection connection = new URL(url).openConnection();\nList&lt;String&gt; cookies = connection.getHeaderFields().get(\"Set-Cookie\");\n// ...\n\n// Then use the same cookies on all subsequent requests.\nconnection = new URL(url).openConnection();\nfor (String cookie : cookies) {\n    connection.addRequestProperty(\"Cookie\", cookie.split(\";\", 2)[0]);\n}\n// ...\n</code></pre>\n\n<p>The <code>split(\";\", 2)[0]</code> is there to get rid of cookie attributes which are irrelevant for the server side like <code>expires</code>, <code>path</code>, etc. Alternatively, you could also use <code>cookie.substring(0, cookie.indexOf(';'))</code> instead of <code>split()</code>.</p>\n\n<hr>\n\n<h3>Streaming mode</h3>\n\n<p>The <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html\"><code>HttpURLConnection</code></a> will by default buffer the <em>entire</em> request body before actually sending it, regardless of whether you've set a fixed content length yourself using <code>connection.setRequestProperty(\"Content-Length\", contentLength);</code>. This may cause <code>OutOfMemoryException</code>s whenever you concurrently send large POST requests (e.g. uploading files). To avoid this, you would like to set the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setFixedLengthStreamingMode%28int%29\"><code>HttpURLConnection#setFixedLengthStreamingMode()</code></a>.</p>\n\n<pre><code>httpConnection.setFixedLengthStreamingMode(contentLength);\n</code></pre>\n\n<p>But if the content length is really not known beforehand, then you can make use of chunked streaming mode by setting the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/net/HttpURLConnection.html#setChunkedStreamingMode%28int%29\"><code>HttpURLConnection#setChunkedStreamingMode()</code></a> accordingly. This will set the HTTP <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.41\"><code>Transfer-Encoding</code></a> header to <code>chunked</code> which will force the request body being sent in chunks. The below example will send the body in chunks of 1KB.</p>\n\n<pre><code>httpConnection.setChunkedStreamingMode(1024);\n</code></pre>\n\n<hr>\n\n<h3>User-Agent</h3>\n\n<p>It can happen that a request returns an unexpected response, while it works fine with a real web browser. The server side is probably blocking requests based on the <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.43\"><code>User-Agent</code></a> request header. The <code>URLConnection</code> will by default set it to <code>Java/1.6.0_19</code> where the last part is obviously the JRE version. You can override this as follows:</p>\n\n<pre><code>connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36\"); // Do as if you're using Chrome 41 on Windows 7.\n</code></pre>\n\n<p>Use the User-Agent string from a <a href=\"http://www.useragentstring.com/pages/useragentstring.php\">recent browser</a>.</p>\n\n<hr>\n\n<h3>Error handling</h3>\n\n<p>If the HTTP response code is <code>4nn</code> (Client Error) or <code>5nn</code> (Server Error), then you may want to read the <code>HttpURLConnection#getErrorStream()</code> to see if the server has sent any useful error information.</p>\n\n<pre><code>InputStream error = ((HttpURLConnection) connection).getErrorStream();\n</code></pre>\n\n<p>If the HTTP response code is -1, then something went wrong with connection and response handling. The <code>HttpURLConnection</code> implementation is in older JREs somewhat buggy with keeping connections alive. You may want to turn it off by setting the <code>http.keepAlive</code> system property to <code>false</code>. You can do this programmatically in the beginning of your application by:</p>\n\n<pre><code>System.setProperty(\"http.keepAlive\", \"false\");\n</code></pre>\n\n<hr>\n\n<h3>Uploading files</h3>\n\n<p>You'd normally use <a href=\"http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.2\"><code>multipart/form-data</code></a> encoding for mixed POST content (binary and character data). The encoding is in more detail described in <a href=\"http://www.faqs.org/rfcs/rfc2388.html\">RFC2388</a>.</p>\n\n<pre><code>String param = \"value\";\nFile textFile = new File(\"/path/to/file.txt\");\nFile binaryFile = new File(\"/path/to/file.bin\");\nString boundary = Long.toHexString(System.currentTimeMillis()); // Just generate some unique random value.\nString CRLF = \"\\r\\n\"; // Line separator required by multipart/form-data.\nURLConnection connection = new URL(url).openConnection();\nconnection.setDoOutput(true);\nconnection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n\ntry (\n    OutputStream output = connection.getOutputStream();\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(output, charset), true);\n) {\n    // Send normal param.\n    writer.append(\"--\" + boundary).append(CRLF);\n    writer.append(\"Content-Disposition: form-data; name=\\\"param\\\"\").append(CRLF);\n    writer.append(\"Content-Type: text/plain; charset=\" + charset).append(CRLF);\n    writer.append(CRLF).append(param).append(CRLF).flush();\n\n    // Send text file.\n    writer.append(\"--\" + boundary).append(CRLF);\n    writer.append(\"Content-Disposition: form-data; name=\\\"textFile\\\"; filename=\\\"\" + textFile.getName() + \"\\\"\").append(CRLF);\n    writer.append(\"Content-Type: text/plain; charset=\" + charset).append(CRLF); // Text file itself must be saved in this charset!\n    writer.append(CRLF).flush();\n    Files.copy(textFile.toPath(), output);\n    output.flush(); // Important before continuing with writer!\n    writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.\n\n    // Send binary file.\n    writer.append(\"--\" + boundary).append(CRLF);\n    writer.append(\"Content-Disposition: form-data; name=\\\"binaryFile\\\"; filename=\\\"\" + binaryFile.getName() + \"\\\"\").append(CRLF);\n    writer.append(\"Content-Type: \" + URLConnection.guessContentTypeFromName(binaryFile.getName())).append(CRLF);\n    writer.append(\"Content-Transfer-Encoding: binary\").append(CRLF);\n    writer.append(CRLF).flush();\n    Files.copy(binaryFile.toPath(), output);\n    output.flush(); // Important before continuing with writer!\n    writer.append(CRLF).flush(); // CRLF is important! It indicates end of boundary.\n\n    // End of multipart/form-data.\n    writer.append(\"--\" + boundary + \"--\").append(CRLF).flush();\n}\n</code></pre>\n\n<p>If the other side is a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html\"><code>HttpServlet</code></a>, then its <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\"><code>doPost()</code></a> method will be called and the parts will be available by <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html#getPart%28java.lang.String%29\"><code>HttpServletRequest#getPart()</code></a> (note, thus <strong>not</strong> <code>getParameter()</code> and so on!). The <code>getPart()</code> method is however relatively new, it's introduced in Servlet 3.0 (Glassfish 3, Tomcat 7, etc). Prior to Servlet 3.0, your best choice is using <a href=\"http://commons.apache.org/fileupload\">Apache Commons FileUpload</a> to parse a <code>multipart/form-data</code> request. Also see <a href=\"http://stackoverflow.com/questions/2422468/upload-big-file-to-servlet/2424824#2424824\">this answer</a> for examples of both the FileUpload and the Servelt 3.0 approaches.</p>\n\n<hr>\n\n<h3>Dealing with untrusted or misconfigured HTTPS sites</h3>\n\n<p>Sometimes you need to connect a HTTPS URL, perhaps because you're writing a web scraper. In that case, you may likely face a <code>javax.net.ssl.SSLException: Not trusted server certificate</code> on some HTTPS sites who doesn't keep their SSL certificates up to date, or a <code>java.security.cert.CertificateException: No subject alternative DNS name matching [hostname] found</code> or <code>javax.net.ssl.SSLProtocolException: handshake alert: unrecognized_name</code> on some misconfigured HTTPS sites.</p>\n\n<p>The following one-time-run <code>static</code> initializer in your web scraper class should make <code>HttpsURLConnection</code> more lenient as to those HTTPS sites and thus not throw those exceptions anymore.</p>\n\n<pre><code>static {\n    TrustManager[] trustAllCertificates = new TrustManager[] {\n        new X509TrustManager() {\n            @Override\n            public X509Certificate[] getAcceptedIssuers() {\n                return null; // Not relevant.\n            }\n            @Override\n            public void checkClientTrusted(X509Certificate[] certs, String authType) {\n                // Do nothing. Just allow them all.\n            }\n            @Override\n            public void checkServerTrusted(X509Certificate[] certs, String authType) {\n                // Do nothing. Just allow them all.\n            }\n        }\n    };\n\n    HostnameVerifier trustAllHostnames = new HostnameVerifier() {\n        @Override\n        public boolean verify(String hostname, SSLSession session) {\n            return true; // Just allow them all.\n        }\n    };\n\n    try {\n        System.setProperty(\"jsse.enableSNIExtension\", \"false\");\n        SSLContext sc = SSLContext.getInstance(\"SSL\");\n        sc.init(null, trustAllCertificates, new SecureRandom());\n        HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());\n        HttpsURLConnection.setDefaultHostnameVerifier(trustAllHostnames);\n    }\n    catch (GeneralSecurityException e) {\n        throw new ExceptionInInitializerError(e);\n    }\n}\n</code></pre>\n\n<hr>\n\n<h3>Last words</h3>\n\n<p>The <a href=\"http://hc.apache.org/httpcomponents-client-ga/\">Apache HttpComponents HttpClient</a> is <em>much</em> more convenient in this all :)</p>\n\n<ul>\n<li><a href=\"http://hc.apache.org/httpcomponents-client-ga/tutorial/html/\">HttpClient Tutorial</a></li>\n<li><a href=\"http://hc.apache.org/httpcomponents-client-ga/examples.html\">HttpClient Examples</a></li>\n</ul>\n\n<hr>\n\n<h3>Parsing and extracting HTML</h3>\n\n<p>If all you want is parsing and extracting data from HTML, then better use a HTML parser like <a href=\"http://jsoup.org\">Jsoup</a></p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/3152138/what-are-the-pros-and-cons-of-the-leading-java-html-parsers/3154281#3154281\">What are the pros/cons of leading HTML parsers in Java</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2835505/how-to-scan-a-website-or-page-for-info-and-bring-it-into-my-program/2835555#2835555\">How to scan and extract a webpage in Java</a></li>\n</ul>\n    "
}, {
    "t": "Why does this code using random strings print “hello world”?",
    "l": "http://stackoverflow.com/questions/15182496/why-does-this-code-using-random-strings-print-hello-world",
    "q": "\n\n<p>I came across this piece of code, and found it rather interesting. The following print statement would print \"hello world\". Could anyone explain this?</p>\n\n<pre><code>System.out.println(randomString(-229985452) + \" \" + randomString(-147909649));\n</code></pre>\n\n<p>And <code>randomString()</code> looks like this</p>\n\n<pre><code>public static String randomString(int i)\n{\n    Random ran = new Random(i);\n    StringBuilder sb = new StringBuilder();\n    while (true)\n    {\n        int k = ran.nextInt(27);\n        if (k == 0)\n            break;\n\n        sb.append((char)('`' + k));\n    }\n\n    return sb.toString();\n}\n</code></pre>\n    ",
    "a": "\n<p>When an instance of <code>java.util.Random</code> is constructed with a specific seed parameter (in this case <code>-229985452</code> or <code>-147909649</code>), it follows the random number generation algorithm <em>beginning</em> with that seed value.</p>\n\n<p>Every <code>Random</code> constructed with the same seed will generate the same pattern of numbers every time.</p>\n    "
}, {
    "t": "How can I create an executable jar with dependencies using Maven?",
    "l": "http://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven",
    "q": "\n\n<p>I have written a little utility to run from the command line using Java. I want to package it in a single executable jar for distribution (.jar file).</p>\n\n<p>How can I make Maven package all dependency jars into my jar?</p>\n    ",
    "a": "\n\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;build&gt;\n  &lt;plugins&gt;\n    &lt;plugin&gt;\n      &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n      &lt;configuration&gt;\n        &lt;archive&gt;\n          &lt;manifest&gt;\n            &lt;mainClass&gt;fully.qualified.MainClass&lt;/mainClass&gt;\n          &lt;/manifest&gt;\n        &lt;/archive&gt;\n        &lt;descriptorRefs&gt;\n          &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n        &lt;/descriptorRefs&gt;\n      &lt;/configuration&gt;\n    &lt;/plugin&gt;\n  &lt;/plugins&gt;\n&lt;/build&gt;\n</code></pre>\n\n<p>and you run it with</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>mvn clean compile assembly:single\n</code></pre>\n\n<p><em>Compile goal should be added before assembly:single or otherwise the code on your own project is not included.</em></p>\n\n<p>See more details in comments.</p>\n\n<hr>\n\n<p>Commonly this goal is tied to a build phase to execute automatically. This ensures the JAR is built when executing <code>mvn install</code> or performing a deployment/release.</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;plugin&gt;\n  &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;\n  &lt;configuration&gt;\n    &lt;archive&gt;\n      &lt;manifest&gt;\n        &lt;mainClass&gt;fully.qualified.MainClass&lt;/mainClass&gt;\n      &lt;/manifest&gt;\n    &lt;/archive&gt;\n    &lt;descriptorRefs&gt;\n      &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;\n    &lt;/descriptorRefs&gt;\n  &lt;/configuration&gt;\n  &lt;executions&gt;\n    &lt;execution&gt;\n      &lt;id&gt;make-assembly&lt;/id&gt; &lt;!-- this is used for inheritance merges --&gt;\n      &lt;phase&gt;package&lt;/phase&gt; &lt;!-- bind to the packaging phase --&gt;\n      &lt;goals&gt;\n        &lt;goal&gt;single&lt;/goal&gt;\n      &lt;/goals&gt;\n    &lt;/execution&gt;\n  &lt;/executions&gt;\n&lt;/plugin&gt;\n</code></pre>\n    "
}, {
    "t": "Iterate over each Entry in a Map",
    "l": "http://stackoverflow.com/questions/46898/iterate-over-each-entry-in-a-map",
    "q": "\n\n<p>If I have an object implementing the <code>Map</code> interface in Java and I wish to iterate over every pair contained within it, what is the most efficient way of going through the map?  </p>\n\n<p>Will the ordering of elements depend on the specific map implementation that I have for the interface?</p>\n    ",
    "a": "\n<pre><code>for (Map.Entry&lt;String, String&gt; entry : map.entrySet())\n{\n    System.out.println(entry.getKey() + \"/\" + entry.getValue());\n}\n</code></pre>\n    "
}, {
    "t": "How to avoid Java code in JSP files?",
    "l": "http://stackoverflow.com/questions/3177733/how-to-avoid-java-code-in-jsp-files",
    "q": "\n\n<p>I'm new to Java EE and I know that something like the following three lines</p>\n\n<pre><code>&lt;%= x+1 %&gt;\n&lt;%= request.getParameter(\"name\") %&gt;\n&lt;%! counter++; %&gt;\n</code></pre>\n\n<p>is an old school way of coding and in JSP version 2 there exists a method to avoid Java code in JSP files. Can someone please tell me the alternative JSP 2 lines, and what this technique is called?</p>\n    ",
    "a": "\n<p>The use of <em>scriptlets</em> (those <code>&lt;% %&gt;</code> things) in <a href=\"http://stackoverflow.com/tags/jsp/info\">JSP</a> is indeed highly discouraged since the birth of <em>taglibs</em> (like <a href=\"http://stackoverflow.com/tags/jstl/info\">JSTL</a>) and <a href=\"http://stackoverflow.com/tags/el/info\">EL</a> (<a href=\"http://stackoverflow.com/tags/el/info\">Expression Language</a>, those <code>${}</code> things) over a decade ago.</p>\n\n<p>The major disadvantages of <em>scriptlets</em> are:</p>\n\n<ol>\n<li><strong>Reusability:</strong> you can't reuse scriptlets.</li>\n<li><strong>Replaceability:</strong> you can't make scriptlets abstract.</li>\n<li><strong>OO-ability:</strong> you can't make use of inheritance/composition.</li>\n<li><strong>Debuggability:</strong> if scriptlet throws an exception halfway, all you get is a blank page.</li>\n<li><strong>Testability:</strong> scriptlets are not unit-testable.</li>\n<li><strong>Maintainability:</strong> per saldo more time is needed to maintain mingled/cluttered/duplicated code logic.</li>\n</ol>\n\n<p><strike>Sun</strike> Oracle itself also recommends in the <a href=\"http://www.oracle.com/technetwork/articles/javase/code-convention-138726.html\">JSP coding conventions</a> to avoid use of <em>scriptlets</em> whenever the same functionality is possible by (tag) classes. Here are several cites of relevance:</p>\n\n<blockquote>\n  <p>From JSP 1.2 Specification, it is highly recommended that the JSP Standard Tag Library  (JSTL) be used in your web application to help <strong>reduce the need for JSP scriptlets</strong> in your pages. Pages that use JSTL are, in general, easier to read and maintain. </p>\n  \n  <p>...</p>\n  \n  <p>Where possible, <strong>avoid JSP scriptlets</strong> whenever tag libraries provide equivalent functionality. This makes pages easier to read and maintain, helps to separate business logic from presentation logic, and will make your pages easier to evolve into JSP 2.0-style pages (JSP 2.0 Specification supports but deemphasizes the use of scriptlets).</p>\n  \n  <p>...</p>\n  \n  <p>In the spirit of adopting the model-view-controller (MVC) design pattern to reduce coupling between the presentation tier from the business logic, <strong>JSP scriptlets should not be used</strong> for writing business logic. Rather, JSP scriptlets are used if necessary to transform data (also called \"value objects\") returned from processing the client's requests into a proper client-ready format. Even then, this would be better done with a front controller servlet or a custom tag.</p>\n</blockquote>\n\n<hr>\n\n<p><strong>How to replace <em>scriptlets</em> entirely depends on the sole purpose of the code/logic. More than often this code is to be placed in a fullworthy Java class:</strong></p>\n\n<ul>\n<li><p>If you want to invoke the <strong>same</strong> Java code on <em>every</em> request, less-or-more regardless of the requested page, e.g. checking if an user is logged in, then implement a <a href=\"http://stackoverflow.com/tags/servlet-filters/info\">filter</a> and write code accordingly in <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29\"><code>doFilter()</code></a> method. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws ServletException, IOException {\n    if (((HttpServletRequest) request).getSession().getAttribute(\"user\") == null) {\n        ((HttpServletResponse) response).sendRedirect(\"login\"); // Not logged in, redirect to login page.\n    } else {\n        chain.doFilter(request, response); // Logged in, just continue request.\n    }\n}\n</code></pre>\n\n<p>When mapped on an appropriate <code>&lt;url-pattern&gt;</code> covering the JSP pages of interest, then you don't need to copypaste the same piece of code over all JSP pages.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>preprocess</strong> a request, e.g. preloading some list from a database to display in some table, if necessary based on some query parameters, then implement a <a href=\"http://stackoverflow.com/tags/servlets/info\">servlet</a> and write code accordingly in <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doGet%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\"><code>doGet()</code></a> method. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    try {\n        List&lt;Product&gt; products = productService.list(); // Obtain all products.\n        request.setAttribute(\"products\", products); // Store products in request scope.\n        request.getRequestDispatcher(\"/WEB-INF/products.jsp\").forward(request, response); // Forward to JSP page to display them in a HTML table.\n    } catch (SQLException e) {\n        throw new ServletException(\"Retrieving products failed!\", e);\n    }\n}\n</code></pre>\n\n<p>This way dealing with exceptions is easier. The DB is not accessed in the midst of JSP rendering, but far before the JSP is been displayed. You still have the possibility to change the response whenever the DB access throws an exception. In the above example, the default error 500 page will be displayed which you can anyway customize by an <code>&lt;error-page&gt;</code> in <code>web.xml</code>.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>postprocess</strong> a request, e.g. processing a form submit, then implement a <a href=\"http://stackoverflow.com/tags/servlets/info\">servlet</a> and write code accordingly in <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServlet.html#doPost%28javax.servlet.http.HttpServletRequest,%20javax.servlet.http.HttpServletResponse%29\"><code>doPost()</code></a> method. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    String username = request.getParameter(\"username\");\n    String password = request.getParameter(\"password\");\n    User user = userService.find(username, password);\n\n    if (user != null) {\n        request.getSession().setAttribute(\"user\", user); // Login user.\n        response.sendRedirect(\"home\"); // Redirect to home page.\n    } else {\n        request.setAttribute(\"message\", \"Unknown username/password. Please retry.\"); // Store error message in request scope.\n        request.getRequestDispatcher(\"/WEB-INF/login.jsp\").forward(request, response); // Forward to JSP page to redisplay login form with error.\n    }\n}\n</code></pre>\n\n<p>This way dealing with different result page destinations is easier: redisplaying the form with validation errors in case of an error (in this particular example you can redisplay it using <code>${message}</code> in <a href=\"http://stackoverflow.com/tags/el/info\">EL</a>), or just taking to the desired target page in case of success.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>control</strong> the execution plan and/or the destination of the request and the response, then implement a <a href=\"http://stackoverflow.com/tags/servlets/info\">servlet</a> according the <a href=\"http://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/3542297#3542297\">MVC's Front Controller Pattern</a>. E.g.:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    try {\n        Action action = ActionFactory.getAction(request);\n        String view = action.execute(request, response);\n\n        if (view.equals(request.getPathInfo().substring(1)) {\n            request.getRequestDispatcher(\"/WEB-INF/\" + view + \".jsp\").forward(request, response);\n        } else {\n            response.sendRedirect(view);\n        }\n    } catch (Exception e) {\n        throw new ServletException(\"Executing action failed.\", e);\n    }\n}\n</code></pre>\n\n<p>Or just adopt a MVC framework like <a href=\"http://stackoverflow.com/tags/jsf/info\">JSF</a>, <a href=\"http://stackoverflow.com/tags/spring-mvc/info\">Spring MVC</a>, <a href=\"http://stackoverflow.com/tags/wicket/info\">Wicket</a>, etc so that you end up with just a JSP/Facelets page and a Javabean class without the need for a custom servlet.</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>control the flow</strong> inside a JSP page, then you need to grab an (existing) flow control taglib like <a href=\"http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/tld-summary.html\">JSTL core</a>. E.g. displaying <code>List&lt;Product&gt;</code> in a table:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %&gt;\n...\n&lt;table&gt;\n    &lt;c:forEach items=\"${products}\" var=\"product\"&gt;\n        &lt;tr&gt;\n            &lt;td&gt;${product.name}&lt;/td&gt;\n            &lt;td&gt;${product.description}&lt;/td&gt;\n            &lt;td&gt;${product.price}&lt;/td&gt;\n        &lt;/tr&gt;\n    &lt;/c:forEach&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>With XML-style tags which fits nicely among all that HTML, the code is better readable (and thus better maintainable) than a bunch of scriptlets with various opening and closing braces (<em>\"Where the heck does this closing brace belong to?\"</em>). An easy aid is to configure your web application to throw an exception whenever <em>scriptlets</em> are still been used by adding the following piece to <code>web.xml</code>:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;jsp-config&gt;\n    &lt;jsp-property-group&gt;\n        &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;\n        &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt;\n    &lt;/jsp-property-group&gt;\n&lt;/jsp-config&gt;\n</code></pre>\n\n<p>In <a href=\"http://stackoverflow.com/tags/facelets/info\">Facelets</a>, the successor of JSP, which is part of the Java EE provided MVC framework <a href=\"http://stackoverflow.com/tags/jsf/info\">JSF</a>, it is already <strong>not</strong> possible to use <em>scriptlets</em>. This way you're automatically forced to do things \"the right way\".</p>\n\n<hr></li>\n<li><p>If you want to invoke some Java code to <strong>access and display</strong> \"backend\" data inside a JSP page, then you need to use EL (Expression Language), those <code>${}</code> things. E.g. redisplaying submitted input values:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;input type=\"text\" name=\"foo\" value=\"${param.foo}\" /&gt;\n</code></pre>\n\n<p>The <code>${param.foo}</code> displays the outcome of <code>request.getParameter(\"foo\")</code>.</p>\n\n<hr></li>\n<li><p>If you want to invoke some <strong>utility</strong> Java code directly in the JSP page (typically <code>public static</code> methods), then you need to define them as EL functions. There's a standard <a href=\"http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fn/tld-summary.html\">functions taglib</a> in JSTL, but <a href=\"http://docs.oracle.com/javaee/5/tutorial/doc/bnahq.html#bnaiq\">you can also easily create functions yourself</a>. Here's an example how JSTL <code>fn:escapeXml</code> is useful to prevent <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">XSS</a> <a href=\"http://ha.ckers.org/xss.html\">attacks</a>.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;%@ taglib uri=\"http://java.sun.com/jsp/jstl/functions\" prefix=\"fn\" %&gt;\n...\n&lt;input type=\"text\" name=\"foo\" value=\"${fn:escapeXml(param.foo)}\" /&gt;\n</code></pre>\n\n<p>Note that the XSS sensitivity is in no way specifically related to Java/JSP/JSTL/EL/whatever, this problem needs to be taken into account in <strong>every</strong> webapplication you develop. The problem of <em>scriptlets</em> is that it provides no way of builtin preventions, at least not using the standard Java API. JSP's successor Facelets has already implicit HTML escaping, so you don't need to worry about XSS holes in Facelets.</p></li>\n</ul>\n\n<h3>See also:</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp/2097732#2097732\">What's the difference between JSP, Servlet and JSF?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3106452/java-servlet-instantiation-and-session-variables/3106909#3106909\">How does Servlet, ServletContext, HttpSession and HttpServletRequest/Response work?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5003142/jsp-using-mvc-and-jdbc\">Basic MVC example with JSP, Servlet and JDBC</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3541077/design-patterns-web-based-applications/\">Design patterns in Java web applications</a></li>\n<li><a href=\"http://balusc.blogspot.com/2010/01/hidden-features-of-jspservlet.html\">Hidden features of JSP/Servlet</a></li>\n</ul>\n    "
}, {
    "t": "In Java, how can I test if an Array contains a certain value?",
    "l": "http://stackoverflow.com/questions/1128723/in-java-how-can-i-test-if-an-array-contains-a-certain-value",
    "q": "\n\n<p>I have a <code>String[]</code> with values like so:</p>\n\n<pre><code>public static final String[] VALUES = new String[] {\"AB\",\"BC\",\"CD\",\"AE\"};\n</code></pre>\n\n<p>Given String s, is there a good way of testing whether <code>VALUES</code> contains <code>s</code>?</p>\n    ",
    "a": "\n<pre><code>Arrays.asList(yourArray).contains(yourValue)\n</code></pre>\n    "
}, {
    "t": "Why is executing Java code in comments with certain Unicode characters allowed?",
    "l": "http://stackoverflow.com/questions/30727515/why-is-executing-java-code-in-comments-with-certain-unicode-characters-allowed",
    "q": "\n\n<p>The following code produces the output \"Hello World!\" (no really, try it).</p>\n\n<pre><code>public static void main(String... args) {\n\n   // The comment below is not a typo.\n   // \\u000d System.out.println(\"Hello World!\");\n}\n</code></pre>\n\n<p>The reason for this is that the Java compiler parses the Unicode character <code>\\u000d</code> as a new line and gets transformed into:</p>\n\n<pre><code>public static void main(String... args) {\n\n   // The comment below is not a typo.\n   //\n   System.out.println(\"Hello World!\");\n}\n</code></pre>\n\n<p>Thus resulting into a comment being \"executed\".</p>\n\n<p>Since this can be used to \"hide\" malicious code or whatever an evil programmer can conceive, <strong>why is it allowed in comments</strong>?</p>\n\n<p>Why is this allowed by the Java specification?</p>\n    ",
    "a": "\n<p>Unicode decoding takes place before any other lexical translation. The key benefit of this is that it makes it trivial to go back and forth between ASCII and any other encoding. You don't even need to figure out where comments begin and end!</p>\n\n<p>As stated in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.3\">JLS Section 3.3</a> this allows any ASCII based tool to process the source files:</p>\n\n<blockquote>\n  <p>[...] The Java programming language specifies a standard way of transforming a program written in Unicode into ASCII that changes a program into a form that can be processed by ASCII-based tools. [...]</p>\n</blockquote>\n\n<p>This gives a fundamental guarantee for platform independence (independence of supported character sets) which has always been a key goal for the Java platform. </p>\n\n<p>Being able to write any Unicode character anywhere in the file is a neat feature, and especially important in comments, when documenting code in non-latin languages. The fact that it can interfere with the semantics in such subtle ways is just an (unfortunate) side-effect.</p>\n\n<p>There are many gotchas on this theme and <a href=\"http://www.javapuzzlers.com/\"><em>Java Puzzlers</em></a> by Joshua Bloch and Neal Gafter included the following variant:</p>\n\n<blockquote>\n  <p>Is this a legal Java program? If so, what does it print?</p>\n\n<pre><code>\\u0070\\u0075\\u0062\\u006c\\u0069\\u0063\\u0020\\u0020\\u0020\\u0020\n\\u0063\\u006c\\u0061\\u0073\\u0073\\u0020\\u0055\\u0067\\u006c\\u0079\n\\u007b\\u0070\\u0075\\u0062\\u006c\\u0069\\u0063\\u0020\\u0020\\u0020\n\\u0020\\u0020\\u0020\\u0020\\u0073\\u0074\\u0061\\u0074\\u0069\\u0063\n\\u0076\\u006f\\u0069\\u0064\\u0020\\u006d\\u0061\\u0069\\u006e\\u0028\n\\u0053\\u0074\\u0072\\u0069\\u006e\\u0067\\u005b\\u005d\\u0020\\u0020\n\\u0020\\u0020\\u0020\\u0020\\u0061\\u0072\\u0067\\u0073\\u0029\\u007b\n\\u0053\\u0079\\u0073\\u0074\\u0065\\u006d\\u002e\\u006f\\u0075\\u0074\n\\u002e\\u0070\\u0072\\u0069\\u006e\\u0074\\u006c\\u006e\\u0028\\u0020\n\\u0022\\u0048\\u0065\\u006c\\u006c\\u006f\\u0020\\u0077\\u0022\\u002b\n\\u0022\\u006f\\u0072\\u006c\\u0064\\u0022\\u0029\\u003b\\u007d\\u007d\n</code></pre>\n</blockquote>\n\n<p>(This program turns out to be a plain \"Hello World\" program.)</p>\n\n<p>In the solution to the puzzler, they point out the following:</p>\n\n<blockquote>\n  <p>More seriously, this puzzle serves to reinforce the lessons of the previous three: <strong>Unicode escapes are essential when you need to insert characters that can’t be represented in any other way into your program. Avoid them in all other cases.</strong></p>\n</blockquote>\n    "
}, {
    "t": "Dealing with “java.lang.OutOfMemoryError: PermGen space” error",
    "l": "http://stackoverflow.com/questions/88235/dealing-with-java-lang-outofmemoryerror-permgen-space-error",
    "q": "\n\n<p>Recently I ran into this error in my web application:</p>\n\n<blockquote>\n  <p>java.lang.OutOfMemoryError: PermGen space</p>\n</blockquote>\n\n<p>It's a typical Hibernate/JPA + IceFaces/JSF application running on Tomcat 6 and JDK 1.6.</p>\n\n<p>Apparently this can occur after redeploying an application a few times.</p>\n    ",
    "a": "\n<p>The solution was to add these flags to JVM command line when Tomcat is started:</p>\n\n<pre><code>-XX:+CMSClassUnloadingEnabled -XX:+CMSPermGenSweepingEnabled\n</code></pre>\n\n<p>You can do that by shutting down the tomcat service, then going into the Tomcat/bin directory and running tomcat6w.exe. Under the \"Java\" tab, add the arguments to the \"Java Options\" box. Click \"OK\" and then restart the service.</p>\n\n<p>If you get an error <em>the specified service does not exist as an installed service</em> you should run:</p>\n\n<pre><code>tomcat6w //ES//servicename\n</code></pre>\n\n<p>where <strong><em>servicename</em></strong> is the name of the server as viewed in services.msc</p>\n\n<p>Source: orx's comment on <a href=\"http://www.jroller.com/agileanswers/entry/preventing_java_s_java_lang\">Eric's Agile Answers</a>.</p>\n    "
}, {
    "t": "“implements Runnable” vs. “extends Thread”",
    "l": "http://stackoverflow.com/questions/541487/implements-runnable-vs-extends-thread",
    "q": "\n\n<p>From what time I've spent with threads in Java, I've found these two ways to write threads:</p>\n\n<p>With <code>implements Runnable</code>:</p>\n\n<pre><code>public class ThreadA implements Runnable {\n    public void run() {\n        //Code\n    }\n}\n//Started with a \"new Thread(threadA).start()\" call\n</code></pre>\n\n<p>Or, with <code>extends Thread</code>:</p>\n\n<pre><code>public class ThreadB extends Thread {\n    public ThreadB() {\n        super(\"ThreadB\");\n    }\n    public void run() {\n        //Code\n    }\n}\n//Started with a \"threadB.start()\" call\n</code></pre>\n\n<p>Is there any significant difference in these two blocks of code ?</p>\n    ",
    "a": "\n<p>Yes: implements <code>Runnable</code> is the preferred way to do it, IMO. You're not really specialising the thread's behaviour.  You're just giving it something to run. That means <a href=\"http://en.wikipedia.org/wiki/Object_composition\">composition</a> is the <em>philosophically</em> \"purer\" way to go.</p>\n\n<p>In <em>practical</em> terms, it means you can implement <code>Runnable</code> and extend from another class as well.</p>\n    "
}, {
    "t": "Does finally always execute in Java?",
    "l": "http://stackoverflow.com/questions/65035/does-finally-always-execute-in-java",
    "q": "\n\n<p>I have a try/catch block with returns inside it. Will the finally block be called?</p>\n\n<p>For example:</p>\n\n<pre><code>try {  \n    something();  \n    return success;  \n}  \ncatch (Exception e) {   \n    return failure;  \n}  \nfinally {  \n    System.out.println(\"i don't know if this will get printed out.\");\n}\n</code></pre>\n\n<p>I know I can just type this in an see what happens (which is what I'm about to do, actually) but when I googled for answers nothing came up, so I figured I'd throw this up as a question.</p>\n    ",
    "a": "\n<p><code>finally</code> will be called.</p>\n\n<p>The only times <code>finally</code> won't be called are:</p>\n\n<ol>\n<li>if you call <code>System.exit()</code> <em>or</em></li>\n<li>another thread interrupts current one <em>or</em> </li>\n<li>if the JVM crashes first</li>\n</ol>\n    "
}, {
    "t": "Android SDK installation doesn't find JDK",
    "l": "http://stackoverflow.com/questions/4382178/android-sdk-installation-doesnt-find-jdk",
    "q": "\n\n<p>I'm trying to install the Android SDK on my Windows 7 x64 System. <code>jdk-6u23-windows-x64.exe</code> is installed, but the Android SDK setup refuses to proceed, because it doesn't find the JDK installation.</p>\n\n<p>Is this a known issue? And is there a solution?</p>\n\n<p><img src=\"http://i.stack.imgur.com/pZjuL.jpg\" alt=\"SDK Error\"></p>\n    ",
    "a": "\n<p>Press <strong><em>Back</em></strong> when you get the notification and then <strong><em>Next</em></strong>. This time it will find the JDK. </p>\n    "
}, {
    "t": "Convert a String to an enum in Java",
    "l": "http://stackoverflow.com/questions/604424/convert-a-string-to-an-enum-in-java",
    "q": "\n\n<p>Say I have an enum which is just</p>\n\n<pre><code>public enum Blah {\n    A, B, C, D\n}\n</code></pre>\n\n<p>and I would like to find the enum value of a string, for example <code>\"A\"</code> which would be <code>Blah.A</code>. How would it be possible to do this?</p>\n\n<p>Is the <code>Enum.valueOf()</code> the method I need? If so, how would I use this?</p>\n    ",
    "a": "\n<p>Yes, <code>Blah.valueOf(\"A\")</code> will give you <code>Blah.A</code>.</p>\n\n<p>The static methods <code>valueOf()</code> and <code>values()</code> are created at compile time and do not appear in source code. They do appear in Javadoc, though; for example, <a href=\"http://docs.oracle.com/javase/7/docs/api/java/awt/Dialog.ModalityType.html\"><code>Dialog.ModalityType</code></a> shows both methods.</p>\n    "
}, {
    "t": "How do I call one constructor from another in Java?",
    "l": "http://stackoverflow.com/questions/285177/how-do-i-call-one-constructor-from-another-in-java",
    "q": "\n\n<p>Is it possible to call a constructor from another (within the same class, not from a subclass)? If yes how? And what could be the best way to call another constructor (if there are several ways to do it)?</p>\n    ",
    "a": "\n<p>Yes, it is possible:</p>\n\n<pre><code>public class Foo\n{\n    private int x;\n\n    public Foo()\n    {\n        this(1);\n    }\n\n    public Foo(int x)\n    {\n        this.x = x;\n    }\n}\n</code></pre>\n\n<p>To chain to a particular superclass constructor instead of one in the same class, use <code>super</code> instead of <code>this</code>. Note that <strong>you can only chain to one constructor</strong>, and <strong>it has to be the first statement in your constructor body</strong>.</p>\n\n<p>See also <a href=\"http://stackoverflow.com/questions/284896\">this related question</a>, which is about C# but where the same principles apply.</p>\n    "
}, {
    "t": "Breaking out of nested loops in Java",
    "l": "http://stackoverflow.com/questions/886955/breaking-out-of-nested-loops-in-java",
    "q": "\n\n<p>I've got a nested loop construct like this:</p>\n\n<pre><code>for (Type type : types) {\n    for (Type t : types2) {\n         if (some condition) {\n             // Do something and break...\n             break; // Breaks out of the inner loop\n         }\n    }\n}\n</code></pre>\n\n<p>Now how can I break out of both loops. I've looked at similar questions, but none concerns Java specifically. I couldn't apply these solutions because most used gotos.</p>\n\n<p>I don't want to put the inner loop in a different method.</p>\n\n<p>Update: I don't want to rerun the loops, when breaking I'm finished with the execution of the loop block.</p>\n    ",
    "a": "\n<p>(EDIT: Like other answerers, I'd definitely <em>prefer</em> to put the inner loop in a different method. This answer just shows how the requirements in the question can be met.)</p>\n\n<p>You can use <code>break</code> with a label for the outer loop. For example:</p>\n\n<pre><code>public class Test {\n  public static void main(String[] args) {\n    outerloop:\n    for (int i=0; i &lt; 5; i++) {\n      for (int j=0; j &lt; 5; j++) {\n        if (i * j &gt; 6) {\n          System.out.println(\"Breaking\");\n          break outerloop;\n        }\n        System.out.println(i + \" \" + j);\n      }\n    }\n    System.out.println(\"Done\");\n  }\n}\n</code></pre>\n\n<p>This prints:</p>\n\n<pre><code>0 0\n0 1\n0 2\n0 3\n0 4\n1 0\n1 1\n1 2\n1 3\n1 4\n2 0\n2 1\n2 2\n2 3\nBreaking\nDone\n</code></pre>\n    "
}, {
    "t": "Initialization of an ArrayList in one line",
    "l": "http://stackoverflow.com/questions/1005073/initialization-of-an-arraylist-in-one-line",
    "q": "\n\n<p>I want to create a list of options for testing purposes. At first, I did this:</p>\n\n<pre><code>ArrayList&lt;String&gt; places = new ArrayList&lt;String&gt;();\nplaces.add(\"Buenos Aires\");\nplaces.add(\"Córdoba\");\nplaces.add(\"La Plata\");\n</code></pre>\n\n<p>Then I refactored the code as follows:</p>\n\n<pre><code>ArrayList&lt;String&gt; places = new ArrayList&lt;String&gt;(\n    Arrays.asList(\"Buenos Aires\", \"Córdoba\", \"La Plata\"));\n</code></pre>\n\n<p>Is there a better way to do this?</p>\n    ",
    "a": "\n<p>Actually, probably the \"best\" way to initialize the <code>ArrayList</code> is the method you wrote, as it does not need to create a new <code>List</code> in any way:</p>\n\n<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nlist.add(\"A\");\nlist.add(\"B\");\nlist.add(\"C\");\n</code></pre>\n\n<p>The catch is that there is quite a bit of typing required to refer to that <code>list</code> instance.</p>\n\n<p>There are alternatives, such as making an anonymous inner class with an instance initializer (also known as an \"double brace initialization\"):</p>\n\n<pre><code>ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;() {{\n    add(\"A\");\n    add(\"B\");\n    add(\"C\");\n}};\n</code></pre>\n\n<p>However, I'm not too fond of that method because what you end up with is a subclass of <code>ArrayList</code> which has an instance initializer, and that class is created just to create one object -- that just seems like a little bit overkill to me.</p>\n\n<p>What would have been nice was if the <a href=\"http://mail.openjdk.java.net/pipermail/coin-dev/2009-March/001193.html\">Collection Literals proposal</a> for <a href=\"http://openjdk.java.net/projects/coin\">Project Coin</a> was accepted (it was slated to be introduced in Java 7, but it's not likely to be part of Java 8 either.):</p>\n\n<pre><code>List&lt;String&gt; list = [\"A\", \"B\", \"C\"];\n</code></pre>\n\n<p>Unfortunately it won't help you here, as it will initialize an immutable <code>List</code> rather than an <code>ArrayList</code>, and furthermore, it's not available yet, if it ever will be.</p>\n    "
}, {
    "t": "'Must Override a Superclass Method' Errors after importing a project into Eclipse",
    "l": "http://stackoverflow.com/questions/1678122/must-override-a-superclass-method-errors-after-importing-a-project-into-eclips",
    "q": "\n\n<p>Anytime I have to re-import my projects into Eclipse (if I reinstalled Eclipse, or changed the location of the projects), <strong>almost all</strong> of my overridden methods are not formatted correctly, causing the error <code>The method must override a superclass method</code>.</p>\n\n<p>It may be noteworthy to mention this is with Android projects - for whatever reason, the method argument values are not always populated, so I have to manually populate them myself. For instance:</p>\n\n<pre><code>list.setOnCreateContextMenuListener(new OnCreateContextMenuListener() {\n\n    //These arguments have their correct names\n    public void onCreateContextMenu(ContextMenu menu, View v, \n                                    ContextMenuInfo menuInfo) {                 \n    }\n\n});\n</code></pre>\n\n<p>will be initially populated like this:</p>\n\n<pre><code>list.setOnCreateContextMenuListener(new OnCreateContextMenuListener() {\n\n    //This methods arguments were not automatically provided    \n    public void onCreateContextMenu(ContextMenu arg1, View arg2,\n                                    ContextMenuInfo arg3) {\n    }\n\n});\n</code></pre>\n\n<p>The odd thing is, if I remove my code, and have Eclipse automatically recreate the method, it uses the same argument names I already had, so I don't really know where the problem is, other then it auto-formatting the method for me.</p>\n\n<p>This becomes quite a pain having to manually recreate ALL my overridden methods by hand. If anyone can explain why this happens or how to fix it .. I would be very happy.</p>\n\n<p>Maybe it is due to the way I am formatting the methods, which are inside an argument of another method?</p>\n    ",
    "a": "\n<p>Eclipse is defaulting to Java 1.5 and you have classes implementing interface methods (which in Java 1.6 can be annotated with @Override, but in Java 1.5 can only be applied to methods overriding a superclass method).</p>\n\n<p>Go to your project/ide preferences and set the java compiler level to 1.6 and also make sure you select JRE 1.6 to execute your program from eclipse.</p>\n    "
}, {
    "t": "Java inner class and static nested class",
    "l": "http://stackoverflow.com/questions/70324/java-inner-class-and-static-nested-class",
    "q": "\n\n<p>What is the main difference between a inner class and a static nested class in Java? Does design /implementation play a role in choosing any of these?</p>\n    ",
    "a": "\n<p>Nested classes are divided into two categories: static and non-static. Nested classes that are declared static are simply called static nested classes. Non-static nested classes are called inner classes. </p>\n\n<p>Static nested classes are accessed using the enclosing class name:</p>\n\n<pre><code>OuterClass.StaticNestedClass\n</code></pre>\n\n<p>For example, to create an object for the static nested class, use this syntax:</p>\n\n<pre><code>OuterClass.StaticNestedClass nestedObject = new OuterClass.StaticNestedClass();\n</code></pre>\n\n<p>Objects that are instances of an inner class exist within an instance of the outer class. Consider the following classes:</p>\n\n<pre><code>class OuterClass {\n    ...\n    class InnerClass {\n        ...\n    }\n}\n</code></pre>\n\n<p>An instance of InnerClass can exist only within an instance of OuterClass and has direct access to the methods and fields of its enclosing instance.</p>\n\n<p>To instantiate an inner class, you must first instantiate the outer class. Then, create the inner object within the outer object with this syntax:</p>\n\n<pre><code>OuterClass.InnerClass innerObject = outerObject.new InnerClass();\n</code></pre>\n\n<p>see: <a href=\"http://download.oracle.com/javase/tutorial/java/javaOO/nested.html\">Java Tutorial - Nested Classes</a></p>\n\n<p>For completeness note that there is also such a thing as an <a href=\"http://stackoverflow.com/questions/20468856/is-it-true-that-every-inner-class-requires-an-enclosing-instance\">inner class <em>without</em> an enclosing instance</a>:</p>\n\n<pre><code>class A {\n  int t() { return 1; }\n  static A a =  new A() { int t() { return 2; } };\n}\n</code></pre>\n\n<p>Here, <code>new A() { ... }</code> is an <em>inner class defined in a static context</em> and does not have an enclosing instance.</p>\n    "
}, {
    "t": "How do I compare strings in Java?",
    "l": "http://stackoverflow.com/questions/513832/how-do-i-compare-strings-in-java",
    "q": "\n\n<p>I've been using the <code>==</code> operator in my program to compare all my strings so far.\nHowever, I ran into a bug, changed one of them into <code>.equals()</code> instead, and it fixed the bug.</p>\n\n<p>Is <code>==</code> bad? When should it and should it not be used? What's the difference?</p>\n    ",
    "a": "\n<p><code>==</code> tests for reference equality (whether they are the same object).</p>\n\n<p><code>.equals()</code> tests for value equality (whether they are logically \"equal\").</p>\n\n<p>Consequently, if you want to test whether two strings have the same value you should use <code>.equals()</code>.</p>\n\n<pre><code>// These two have the same value\nnew String(\"test\").equals(\"test\") // --&gt; true \n\n// ... but they are not the same object\nnew String(\"test\") == \"test\" // --&gt; false \n\n// ... neither are these\nnew String(\"test\") == new String(\"test\") // --&gt; false \n\n// ... but these are because literals are interned by \n// the compiler and thus refer to the same object\n\"test\" == \"test\" // --&gt; true \n</code></pre>\n\n<p>You almost <strong>always</strong> want to use<code>.equals()</code>. In the <strong>rare</strong> situation where you <strong>know</strong> you're dealing with <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#intern--\">interned</a> strings, you <em>can</em> use <code>==</code>.</p>\n    "
}, {
    "t": "How to sort a Map<Key, Value> on the values in Java?",
    "l": "http://stackoverflow.com/questions/109383/how-to-sort-a-mapkey-value-on-the-values-in-java",
    "q": "\n\n<p>I am relatively new to Java, and often find that I need to sort a <code>Map&lt;Key, Value&gt;</code> on the values. Since the values are not unique, I find myself converting the <code>keySet</code> into an <code>array</code>, and sorting that array through <strong>array sort</strong> with a <strong>custom comparator</strong> that sorts on the value associated with the key. Is there an easier way?</p>\n    ",
    "a": "\n<p><strong>Important added note:</strong> <em>if you intend to use the code provided, be sure to read the comments as well to be aware of the implications. For example, values can no longer be retrieved by their key. (<code>get</code> always returns <code>null</code>.)</em></p>\n\n<hr>\n\n<p>It seems much easier than all of the foregoing. Use a TreeMap as follows:</p>\n\n<pre><code>public class Testing {\n\n    public static void main(String[] args) {\n\n        HashMap&lt;String,Double&gt; map = new HashMap&lt;String,Double&gt;();\n        ValueComparator bvc =  new ValueComparator(map);\n        TreeMap&lt;String,Double&gt; sorted_map = new TreeMap&lt;String,Double&gt;(bvc);\n\n        map.put(\"A\",99.5);\n        map.put(\"B\",67.4);\n        map.put(\"C\",67.4);\n        map.put(\"D\",67.3);\n\n        System.out.println(\"unsorted map: \"+map);\n\n        sorted_map.putAll(map);\n\n        System.out.println(\"results: \"+sorted_map);\n    }\n}\n\nclass ValueComparator implements Comparator&lt;String&gt; {\n\n    Map&lt;String, Double&gt; base;\n    public ValueComparator(Map&lt;String, Double&gt; base) {\n        this.base = base;\n    }\n\n    // Note: this comparator imposes orderings that are inconsistent with equals.    \n    public int compare(String a, String b) {\n        if (base.get(a) &gt;= base.get(b)) {\n            return -1;\n        } else {\n            return 1;\n        } // returning 0 would merge keys\n    }\n}\n</code></pre>\n\n<p>Output:\n    </p><pre>    unsorted map: {D=67.3, A=99.5, B=67.4, C=67.4}\n    results: {D=67.3, B=67.4, C=67.4, A=99.5}\n    </pre><p></p>\n    "
}, {
    "t": "Fastest way to determine if an integer's square root is an integer",
    "l": "http://stackoverflow.com/questions/295579/fastest-way-to-determine-if-an-integers-square-root-is-an-integer",
    "q": "\n\n<p>I'm looking for the fastest way to determine if a <code>long</code> value is a perfect square (i.e. its square root is another integer).  I've done it the easy way, by using the built-in Math.sqrt() function, but I'm wondering if there is a way to do it faster by restricting yourself to integer-only domain.  Maintaining a lookup table is impratical (since there are about 2<sup>31.5</sup> integers whose square is less than 2<sup>63</sup>).</p>\n\n<p>Here is the very simple and straightforward way I'm doing it now:</p>\n\n<pre><code>public final static boolean isPerfectSquare(long n)\n{\n  if (n &lt; 0)\n    return false;\n\n  long tst = (long)(Math.sqrt(n) + 0.5);\n  return tst*tst == n;\n}\n</code></pre>\n\n<hr>\n\n<p><i>Notes: I'm using this function in many <a href=\"http://projecteuler.net/\">Project Euler</a> problems.  So no one else will ever have to maintain this code.  And this kind of micro-optimization could actually make a difference, since part of the challenge is to do every algorithm in less than a minute, and this function will need to be called millions of times in some problems.</i></p>\n\n<hr>\n\n<p><strong>Update 2</strong>:  A new solution posted by <a href=\"http://stackoverflow.com/users/3508/a-rex\">A. Rex</a> has proven to be even faster.  In a run over the first 1 billion integers, the solution only required 34% of the time that the original solution used.  While the John Carmack hack is a little better for small values of <em>n</em>, the benefit compared to this solution is pretty small.</p>\n\n<p>Here is the A. Rex solution, converted to Java:</p>\n\n<pre><code>private final static boolean isPerfectSquare(long n)\n{\n  // Quickfail\n  if( n &lt; 0 || ((n&amp;2) != 0) || ((n &amp; 7) == 5) || ((n &amp; 11) == 8) )\n    return false;\n  if( n == 0 )\n    return true;\n\n  // Check mod 255 = 3 * 5 * 17, for fun\n  long y = n;\n  y = (y &amp; 0xffffffffL) + (y &gt;&gt; 32);\n  y = (y &amp; 0xffffL) + (y &gt;&gt; 16);\n  y = (y &amp; 0xffL) + ((y &gt;&gt; 8) &amp; 0xffL) + (y &gt;&gt; 16);\n  if( bad255[(int)y] )\n      return false;\n\n  // Divide out powers of 4 using binary search\n  if((n &amp; 0xffffffffL) == 0)\n      n &gt;&gt;= 32;\n  if((n &amp; 0xffffL) == 0)\n      n &gt;&gt;= 16;\n  if((n &amp; 0xffL) == 0)\n      n &gt;&gt;= 8;\n  if((n &amp; 0xfL) == 0)\n      n &gt;&gt;= 4;\n  if((n &amp; 0x3L) == 0)\n      n &gt;&gt;= 2;\n\n  if((n &amp; 0x7L) != 1)\n      return false;\n\n  // Compute sqrt using something like Hensel's lemma\n  long r, t, z;\n  r = start[(int)((n &gt;&gt; 3) &amp; 0x3ffL)];\n  do {\n    z = n - r * r;\n    if( z == 0 )\n      return true;\n    if( z &lt; 0 )\n      return false;\n    t = z &amp; (-z);\n    r += (z &amp; t) &gt;&gt; 1;\n    if( r &gt; (t  &gt;&gt; 1) )\n    r = t - r;\n  } while( t &lt;= (1L &lt;&lt; 33) );\n  return false;\n}\n\nprivate static boolean[] bad255 =\n{\n   false,false,true ,true ,false,true ,true ,true ,true ,false,true ,true ,true ,\n   true ,true ,false,false,true ,true ,false,true ,false,true ,true ,true ,false,\n   true ,true ,true ,true ,false,true ,true ,true ,false,true ,false,true ,true ,\n   true ,true ,true ,true ,true ,true ,true ,true ,true ,true ,false,true ,false,\n   true ,true ,true ,false,true ,true ,true ,true ,false,true ,true ,true ,false,\n   true ,false,true ,true ,false,false,true ,true ,true ,true ,true ,false,true ,\n   true ,true ,true ,false,true ,true ,false,false,true ,true ,true ,true ,true ,\n   true ,true ,true ,false,true ,true ,true ,true ,true ,false,true ,true ,true ,\n   true ,true ,false,true ,true ,true ,true ,false,true ,true ,true ,false,true ,\n   true ,true ,true ,false,false,true ,true ,true ,true ,true ,true ,true ,true ,\n   true ,true ,true ,true ,true ,false,false,true ,true ,true ,true ,true ,true ,\n   true ,false,false,true ,true ,true ,true ,true ,false,true ,true ,false,true ,\n   true ,true ,true ,true ,true ,true ,true ,true ,true ,true ,false,true ,true ,\n   false,true ,false,true ,true ,false,true ,true ,true ,true ,true ,true ,true ,\n   true ,true ,true ,true ,false,true ,true ,false,true ,true ,true ,true ,true ,\n   false,false,true ,true ,true ,true ,true ,true ,true ,false,false,true ,true ,\n   true ,true ,true ,true ,true ,true ,true ,true ,true ,true ,true ,false,false,\n   true ,true ,true ,true ,false,true ,true ,true ,false,true ,true ,true ,true ,\n   false,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,false,\n   true ,true ,true ,true ,true ,true ,true ,true ,false,false,true ,true ,false,\n   true ,true ,true ,true ,false,true ,true ,true ,true ,true ,false,false,true ,\n   true ,false,true ,false,true ,true ,true ,false,true ,true ,true ,true ,false,\n   true ,true ,true ,false,true ,false,true ,true ,true ,true ,true ,true ,true ,\n   true ,true ,true ,true ,true ,false,true ,false,true ,true ,true ,false,true ,\n   true ,true ,true ,false,true ,true ,true ,false,true ,false,true ,true ,false,\n   false,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,false,true ,\n   true ,false,false,true ,true ,true ,true ,true ,true ,true ,true ,false,true ,\n   true ,true ,true ,true ,false,true ,true ,true ,true ,true ,false,true ,true ,\n   true ,true ,false,true ,true ,true ,false,true ,true ,true ,true ,false,false,\n   true ,true ,true ,true ,true ,true ,true ,true ,true ,true ,true ,true ,true ,\n   false,false,true ,true ,true ,true ,true ,true ,true ,false,false,true ,true ,\n   true ,true ,true ,false,true ,true ,false,true ,true ,true ,true ,true ,true ,\n   true ,true ,true ,true ,true ,false,true ,true ,false,true ,false,true ,true ,\n   false,true ,true ,true ,true ,true ,true ,true ,true ,true ,true ,true ,false,\n   true ,true ,false,true ,true ,true ,true ,true ,false,false,true ,true ,true ,\n   true ,true ,true ,true ,false,false,true ,true ,true ,true ,true ,true ,true ,\n   true ,true ,true ,true ,true ,true ,false,false,true ,true ,true ,true ,false,\n   true ,true ,true ,false,true ,true ,true ,true ,false,true ,true ,true ,true ,\n   true ,false,true ,true ,true ,true ,true ,false,true ,true ,true ,true ,true ,\n   true ,true ,true ,false,false\n};\n\nprivate static int[] start =\n{\n  1,3,1769,5,1937,1741,7,1451,479,157,9,91,945,659,1817,11,\n  1983,707,1321,1211,1071,13,1479,405,415,1501,1609,741,15,339,1703,203,\n  129,1411,873,1669,17,1715,1145,1835,351,1251,887,1573,975,19,1127,395,\n  1855,1981,425,453,1105,653,327,21,287,93,713,1691,1935,301,551,587,\n  257,1277,23,763,1903,1075,1799,1877,223,1437,1783,859,1201,621,25,779,\n  1727,573,471,1979,815,1293,825,363,159,1315,183,27,241,941,601,971,\n  385,131,919,901,273,435,647,1493,95,29,1417,805,719,1261,1177,1163,\n  1599,835,1367,315,1361,1933,1977,747,31,1373,1079,1637,1679,1581,1753,1355,\n  513,1539,1815,1531,1647,205,505,1109,33,1379,521,1627,1457,1901,1767,1547,\n  1471,1853,1833,1349,559,1523,967,1131,97,35,1975,795,497,1875,1191,1739,\n  641,1149,1385,133,529,845,1657,725,161,1309,375,37,463,1555,615,1931,\n  1343,445,937,1083,1617,883,185,1515,225,1443,1225,869,1423,1235,39,1973,\n  769,259,489,1797,1391,1485,1287,341,289,99,1271,1701,1713,915,537,1781,\n  1215,963,41,581,303,243,1337,1899,353,1245,329,1563,753,595,1113,1589,\n  897,1667,407,635,785,1971,135,43,417,1507,1929,731,207,275,1689,1397,\n  1087,1725,855,1851,1873,397,1607,1813,481,163,567,101,1167,45,1831,1205,\n  1025,1021,1303,1029,1135,1331,1017,427,545,1181,1033,933,1969,365,1255,1013,\n  959,317,1751,187,47,1037,455,1429,609,1571,1463,1765,1009,685,679,821,\n  1153,387,1897,1403,1041,691,1927,811,673,227,137,1499,49,1005,103,629,\n  831,1091,1449,1477,1967,1677,697,1045,737,1117,1737,667,911,1325,473,437,\n  1281,1795,1001,261,879,51,775,1195,801,1635,759,165,1871,1645,1049,245,\n  703,1597,553,955,209,1779,1849,661,865,291,841,997,1265,1965,1625,53,\n  1409,893,105,1925,1297,589,377,1579,929,1053,1655,1829,305,1811,1895,139,\n  575,189,343,709,1711,1139,1095,277,993,1699,55,1435,655,1491,1319,331,\n  1537,515,791,507,623,1229,1529,1963,1057,355,1545,603,1615,1171,743,523,\n  447,1219,1239,1723,465,499,57,107,1121,989,951,229,1521,851,167,715,\n  1665,1923,1687,1157,1553,1869,1415,1749,1185,1763,649,1061,561,531,409,907,\n  319,1469,1961,59,1455,141,1209,491,1249,419,1847,1893,399,211,985,1099,\n  1793,765,1513,1275,367,1587,263,1365,1313,925,247,1371,1359,109,1561,1291,\n  191,61,1065,1605,721,781,1735,875,1377,1827,1353,539,1777,429,1959,1483,\n  1921,643,617,389,1809,947,889,981,1441,483,1143,293,817,749,1383,1675,\n  63,1347,169,827,1199,1421,583,1259,1505,861,457,1125,143,1069,807,1867,\n  2047,2045,279,2043,111,307,2041,597,1569,1891,2039,1957,1103,1389,231,2037,\n  65,1341,727,837,977,2035,569,1643,1633,547,439,1307,2033,1709,345,1845,\n  1919,637,1175,379,2031,333,903,213,1697,797,1161,475,1073,2029,921,1653,\n  193,67,1623,1595,943,1395,1721,2027,1761,1955,1335,357,113,1747,1497,1461,\n  1791,771,2025,1285,145,973,249,171,1825,611,265,1189,847,1427,2023,1269,\n  321,1475,1577,69,1233,755,1223,1685,1889,733,1865,2021,1807,1107,1447,1077,\n  1663,1917,1129,1147,1775,1613,1401,555,1953,2019,631,1243,1329,787,871,885,\n  449,1213,681,1733,687,115,71,1301,2017,675,969,411,369,467,295,693,\n  1535,509,233,517,401,1843,1543,939,2015,669,1527,421,591,147,281,501,\n  577,195,215,699,1489,525,1081,917,1951,2013,73,1253,1551,173,857,309,\n  1407,899,663,1915,1519,1203,391,1323,1887,739,1673,2011,1585,493,1433,117,\n  705,1603,1111,965,431,1165,1863,533,1823,605,823,1179,625,813,2009,75,\n  1279,1789,1559,251,657,563,761,1707,1759,1949,777,347,335,1133,1511,267,\n  833,1085,2007,1467,1745,1805,711,149,1695,803,1719,485,1295,1453,935,459,\n  1151,381,1641,1413,1263,77,1913,2005,1631,541,119,1317,1841,1773,359,651,\n  961,323,1193,197,175,1651,441,235,1567,1885,1481,1947,881,2003,217,843,\n  1023,1027,745,1019,913,717,1031,1621,1503,867,1015,1115,79,1683,793,1035,\n  1089,1731,297,1861,2001,1011,1593,619,1439,477,585,283,1039,1363,1369,1227,\n  895,1661,151,645,1007,1357,121,1237,1375,1821,1911,549,1999,1043,1945,1419,\n  1217,957,599,571,81,371,1351,1003,1311,931,311,1381,1137,723,1575,1611,\n  767,253,1047,1787,1169,1997,1273,853,1247,413,1289,1883,177,403,999,1803,\n  1345,451,1495,1093,1839,269,199,1387,1183,1757,1207,1051,783,83,423,1995,\n  639,1155,1943,123,751,1459,1671,469,1119,995,393,219,1743,237,153,1909,\n  1473,1859,1705,1339,337,909,953,1771,1055,349,1993,613,1393,557,729,1717,\n  511,1533,1257,1541,1425,819,519,85,991,1693,503,1445,433,877,1305,1525,\n  1601,829,809,325,1583,1549,1991,1941,927,1059,1097,1819,527,1197,1881,1333,\n  383,125,361,891,495,179,633,299,863,285,1399,987,1487,1517,1639,1141,\n  1729,579,87,1989,593,1907,839,1557,799,1629,201,155,1649,1837,1063,949,\n  255,1283,535,773,1681,461,1785,683,735,1123,1801,677,689,1939,487,757,\n  1857,1987,983,443,1327,1267,313,1173,671,221,695,1509,271,1619,89,565,\n  127,1405,1431,1659,239,1101,1159,1067,607,1565,905,1755,1231,1299,665,373,\n  1985,701,1879,1221,849,627,1465,789,543,1187,1591,923,1905,979,1241,181\n};\n</code></pre>\n\n<hr>\n\n<p><strong>Update</strong>:  I've tried the different solutions presented below.</p>\n\n<ul>\n<li>After exhaustive testing, I found that adding <code>0.5</code> to the result of Math.sqrt() is not necessary, at least not on my machine.</li>\n<li>The <a href=\"http://www.codemaestro.com/reviews/9\">John Carmack hack</a> was faster, but it gave incorrect results starting at n=410881.  However, as suggested by <a href=\"http://stackoverflow.com/users/38426/bobbyshaftoe\">BobbyShaftoe</a>, we can use the Carmack hack for n &lt; 410881.</li>\n<li>Newton's method was a good bit slower than <code>Math.sqrt()</code>.  This is probably because <code>Math.sqrt()</code> uses something similar to Newton's Method, but implemented in the hardware so it's much faster than in Java.  Also, Newton's Method still required use of doubles.</li>\n<li>A modified Newton's method, which used a few tricks so that only integer math was involved, required some hacks to avoid overflow (I want this function to work with all positive 64-bit signed integers), and it was still slower than <code>Math.sqrt()</code>.</li>\n<li>Binary chop was even slower.  This makes sense because the binary chop will on average require 16 passes to find the square root of a 64-bit number.</li>\n</ul>\n\n<p>The one suggestion which did show improvements was made by <a href=\"http://stackoverflow.com/users/25188/john-d-cook\">John D. Cook</a>.  You can observe that the last hex digit (i.e. the last 4 bits) of a perfect square must be 0, 1, 4, or 9.  This means that 75% of numbers can be immediately eliminated as possible squares.  Implementing this solution resulted in about a 50% reduction in runtime.</p>\n\n<p>Working from John's suggestion, I investigated properties of the last <em>n</em> bits of a perfect square.  By analyzing the last 6 bits, I found that only 12 out of 64 values are possible for the last 6 bits.  This means 81% of values can be eliminated without using any math.  Implementing this solution gave an additional 8% reduction in runtime (compared to my original algorithm).  Analyzing more than 6 bits results in a list of possible ending bits which is too large to be practical.</p>\n\n<p>Here is the code that I have used, which runs in 42% of the time required by the original algorithm (based on a run over the first 100 million integers).  For values of <em>n</em> less than 410881, it runs in only 29% of the time required by the original algorithm.</p>\n\n<pre><code>private final static boolean isPerfectSquare(long n)\n{\n  if (n &lt; 0)\n    return false;\n\n  switch((int)(n &amp; 0x3F))\n  {\n  case 0x00: case 0x01: case 0x04: case 0x09: case 0x10: case 0x11:\n  case 0x19: case 0x21: case 0x24: case 0x29: case 0x31: case 0x39:\n    long sqrt;\n    if(n &lt; 410881L)\n    {\n      //John Carmack hack, converted to Java.\n      // See: http://www.codemaestro.com/reviews/9\n      int i;\n      float x2, y;\n\n      x2 = n * 0.5F;\n      y  = n;\n      i  = Float.floatToRawIntBits(y);\n      i  = 0x5f3759df - ( i &gt;&gt; 1 );\n      y  = Float.intBitsToFloat(i);\n      y  = y * ( 1.5F - ( x2 * y * y ) );\n\n      sqrt = (long)(1.0F/y);\n    }\n    else\n    {\n      //Carmack hack gives incorrect answer for n &gt;= 410881.\n      sqrt = (long)Math.sqrt(n);\n    }\n    return sqrt*sqrt == n;\n\n  default:\n    return false;\n  }\n}\n</code></pre>\n\n<p><strong>Notes</strong>:</p>\n\n<ul>\n<li>According to John's tests, using <code>or</code> statements is faster in C++ than using a <code>switch</code>, but in Java and C# there appears to be no difference between <code>or</code> and <code>switch</code>.</li>\n<li>I also tried making a lookup table (as a private static array of 64 boolean values).  Then instead of either switch or <code>or</code> statement, I would just say <code>if(lookup[(int)(n&amp;0x3F)]) { test } else return false;</code>.  To my surprise, this was (just slightly) slower.  <del>I'm not sure why.</del>  This is because <a href=\"http://stackoverflow.com/questions/299079/why-is-this-code-with-several-or-statements-slightly-faster-than-using-a-lookup-t#299205\">array bounds are checked in Java</a>. </li>\n</ul>\n    ",
    "a": "\n<p>I figured out a method that works ~35% faster than your 6bits+Carmack+sqrt code, at least with my CPU (x86) and programming language (C/C++).  Your results may vary, especially because I don't know how the Java factor will play out.</p>\n\n<p>My approach is threefold:</p>\n\n<ol>\n<li>First, filter out obvious answers.  This includes negative numbers and looking at the last 4 bits.  (I found looking at the last six didn't help.)  I also answer yes for 0.  (In reading the code below, note that my input is <code>int64 x</code>.)\n\n<pre><code>if( x &lt; 0 || (x&amp;2) || ((x &amp; 7) == 5) || ((x &amp; 11) == 8) )\n    return false;\nif( x == 0 )\n    return true;</code></pre>\n</li>\n<li>Next, check if it's a square modulo 255 = 3 * 5 * 17.  Because that's a product of three distinct primes, only about 1/8 of the residues mod 255 are squares.  However, in my experience, calling the modulo operator (%) costs more than the benefit one gets, so I use bit tricks involving 255 = 2^8-1 to compute the residue.  (For better or worse, I am not using the trick of reading individual bytes out of a word, only bitwise-and and shifts.)\n<pre><code>int64 y = x;\ny = (y &amp; 4294967295LL) + (y &gt;&gt; 32); \ny = (y &amp; 65535) + (y &gt;&gt; 16);\ny = (y &amp; 255) + ((y &gt;&gt; 8) &amp; 255) + (y &gt;&gt; 16);\n// At this point, y is between 0 and 511.  More code can reduce it farther.\n</code></pre>\nTo actually check if the residue is a square, I look up the answer in a precomputed table.\n<pre><code>if( bad255[y] )\n    return false;\n// However, I just use a table of size 512\n</code></pre>\n</li>\n<li>Finally, try to compute the square root using a method similar to <a href=\"http://en.wikipedia.org/wiki/Hensel%27s_lemma\">Hensel's lemma</a>.  (I don't think it's applicable directly, but it works with some modifications.)  Before doing that, I divide out all powers of 2 with a binary search:\n<pre><code>if((x &amp; 4294967295LL) == 0)\n    x &gt;&gt;= 32;\nif((x &amp; 65535) == 0)\n    x &gt;&gt;= 16;\nif((x &amp; 255) == 0)\n    x &gt;&gt;= 8;\nif((x &amp; 15) == 0)\n    x &gt;&gt;= 4;\nif((x &amp; 3) == 0)\n    x &gt;&gt;= 2;</code></pre>\nAt this point, for our number to be a square, it must be 1 mod 8.\n<pre><code>if((x &amp; 7) != 1)\n    return false;</code></pre>\nThe basic structure of Hensel's lemma is the following.  (Note: untested code; if it doesn't work, try t=2 or 8.)\n<pre><code>int64 t = 4, r = 1;\nt &lt;&lt;= 1; r += ((x - r * r) &amp; t) &gt;&gt; 1;\nt &lt;&lt;= 1; r += ((x - r * r) &amp; t) &gt;&gt; 1;\nt &lt;&lt;= 1; r += ((x - r * r) &amp; t) &gt;&gt; 1;\n// Repeat until t is 2^33 or so.  Use a loop if you want.</code></pre>\nThe idea is that at each iteration, you add one bit onto r, the \"current\" square root of x; each square root is accurate modulo a larger and larger power of 2, namely t/2.  At the end, r and t/2-r will be square roots of x modulo t/2.  (Note that if r is a square root of x, then so is -r.  This is true even modulo numbers, but beware, modulo some numbers, things can have even more than 2 square roots; notably, this includes powers of 2.)  Because our actual square root is less than 2^32, at that point we can actually just check if r or t/2-r are real square roots.  In my actual code, I use the following modified loop:\n<pre><code>int64 r, t, z;\nr = start[(x &gt;&gt; 3) &amp; 1023];\ndo {\n    z = x - r * r;\n    if( z == 0 )\n        return true;\n    if( z &lt; 0 )\n        return false;\n    t = z &amp; (-z);\n    r += (z &amp; t) &gt;&gt; 1;\n    if( r &gt; (t &gt;&gt; 1) )\n        r = t - r;\n} while( t &lt;= (1LL &lt;&lt; 33) );</code></pre>\nThe speedup here is obtained in three ways: precomputed start value (equivalent to ~10 iterations of the loop), earlier exit of the loop, and skipping some t values.  For the last part, I look at <code>z = r - x * x</code>, and set t to be the largest power of 2 dividing z with a bit trick.  This allows me to skip t values that wouldn't have affected the value of r anyway.  The precomputed start value in my case picks out the \"smallest positive\" square root modulo 8192.\n</li>\n</ol>\n\n<p>Even if this code doesn't work faster for you, I hope you enjoy some of the ideas it contains.  Complete, tested code follows, including the precomputed tables.</p>\n\n<pre><code>typedef signed long long int int64;\n\nint start[1024] =\n{1,3,1769,5,1937,1741,7,1451,479,157,9,91,945,659,1817,11,\n1983,707,1321,1211,1071,13,1479,405,415,1501,1609,741,15,339,1703,203,\n129,1411,873,1669,17,1715,1145,1835,351,1251,887,1573,975,19,1127,395,\n1855,1981,425,453,1105,653,327,21,287,93,713,1691,1935,301,551,587,\n257,1277,23,763,1903,1075,1799,1877,223,1437,1783,859,1201,621,25,779,\n1727,573,471,1979,815,1293,825,363,159,1315,183,27,241,941,601,971,\n385,131,919,901,273,435,647,1493,95,29,1417,805,719,1261,1177,1163,\n1599,835,1367,315,1361,1933,1977,747,31,1373,1079,1637,1679,1581,1753,1355,\n513,1539,1815,1531,1647,205,505,1109,33,1379,521,1627,1457,1901,1767,1547,\n1471,1853,1833,1349,559,1523,967,1131,97,35,1975,795,497,1875,1191,1739,\n641,1149,1385,133,529,845,1657,725,161,1309,375,37,463,1555,615,1931,\n1343,445,937,1083,1617,883,185,1515,225,1443,1225,869,1423,1235,39,1973,\n769,259,489,1797,1391,1485,1287,341,289,99,1271,1701,1713,915,537,1781,\n1215,963,41,581,303,243,1337,1899,353,1245,329,1563,753,595,1113,1589,\n897,1667,407,635,785,1971,135,43,417,1507,1929,731,207,275,1689,1397,\n1087,1725,855,1851,1873,397,1607,1813,481,163,567,101,1167,45,1831,1205,\n1025,1021,1303,1029,1135,1331,1017,427,545,1181,1033,933,1969,365,1255,1013,\n959,317,1751,187,47,1037,455,1429,609,1571,1463,1765,1009,685,679,821,\n1153,387,1897,1403,1041,691,1927,811,673,227,137,1499,49,1005,103,629,\n831,1091,1449,1477,1967,1677,697,1045,737,1117,1737,667,911,1325,473,437,\n1281,1795,1001,261,879,51,775,1195,801,1635,759,165,1871,1645,1049,245,\n703,1597,553,955,209,1779,1849,661,865,291,841,997,1265,1965,1625,53,\n1409,893,105,1925,1297,589,377,1579,929,1053,1655,1829,305,1811,1895,139,\n575,189,343,709,1711,1139,1095,277,993,1699,55,1435,655,1491,1319,331,\n1537,515,791,507,623,1229,1529,1963,1057,355,1545,603,1615,1171,743,523,\n447,1219,1239,1723,465,499,57,107,1121,989,951,229,1521,851,167,715,\n1665,1923,1687,1157,1553,1869,1415,1749,1185,1763,649,1061,561,531,409,907,\n319,1469,1961,59,1455,141,1209,491,1249,419,1847,1893,399,211,985,1099,\n1793,765,1513,1275,367,1587,263,1365,1313,925,247,1371,1359,109,1561,1291,\n191,61,1065,1605,721,781,1735,875,1377,1827,1353,539,1777,429,1959,1483,\n1921,643,617,389,1809,947,889,981,1441,483,1143,293,817,749,1383,1675,\n63,1347,169,827,1199,1421,583,1259,1505,861,457,1125,143,1069,807,1867,\n2047,2045,279,2043,111,307,2041,597,1569,1891,2039,1957,1103,1389,231,2037,\n65,1341,727,837,977,2035,569,1643,1633,547,439,1307,2033,1709,345,1845,\n1919,637,1175,379,2031,333,903,213,1697,797,1161,475,1073,2029,921,1653,\n193,67,1623,1595,943,1395,1721,2027,1761,1955,1335,357,113,1747,1497,1461,\n1791,771,2025,1285,145,973,249,171,1825,611,265,1189,847,1427,2023,1269,\n321,1475,1577,69,1233,755,1223,1685,1889,733,1865,2021,1807,1107,1447,1077,\n1663,1917,1129,1147,1775,1613,1401,555,1953,2019,631,1243,1329,787,871,885,\n449,1213,681,1733,687,115,71,1301,2017,675,969,411,369,467,295,693,\n1535,509,233,517,401,1843,1543,939,2015,669,1527,421,591,147,281,501,\n577,195,215,699,1489,525,1081,917,1951,2013,73,1253,1551,173,857,309,\n1407,899,663,1915,1519,1203,391,1323,1887,739,1673,2011,1585,493,1433,117,\n705,1603,1111,965,431,1165,1863,533,1823,605,823,1179,625,813,2009,75,\n1279,1789,1559,251,657,563,761,1707,1759,1949,777,347,335,1133,1511,267,\n833,1085,2007,1467,1745,1805,711,149,1695,803,1719,485,1295,1453,935,459,\n1151,381,1641,1413,1263,77,1913,2005,1631,541,119,1317,1841,1773,359,651,\n961,323,1193,197,175,1651,441,235,1567,1885,1481,1947,881,2003,217,843,\n1023,1027,745,1019,913,717,1031,1621,1503,867,1015,1115,79,1683,793,1035,\n1089,1731,297,1861,2001,1011,1593,619,1439,477,585,283,1039,1363,1369,1227,\n895,1661,151,645,1007,1357,121,1237,1375,1821,1911,549,1999,1043,1945,1419,\n1217,957,599,571,81,371,1351,1003,1311,931,311,1381,1137,723,1575,1611,\n767,253,1047,1787,1169,1997,1273,853,1247,413,1289,1883,177,403,999,1803,\n1345,451,1495,1093,1839,269,199,1387,1183,1757,1207,1051,783,83,423,1995,\n639,1155,1943,123,751,1459,1671,469,1119,995,393,219,1743,237,153,1909,\n1473,1859,1705,1339,337,909,953,1771,1055,349,1993,613,1393,557,729,1717,\n511,1533,1257,1541,1425,819,519,85,991,1693,503,1445,433,877,1305,1525,\n1601,829,809,325,1583,1549,1991,1941,927,1059,1097,1819,527,1197,1881,1333,\n383,125,361,891,495,179,633,299,863,285,1399,987,1487,1517,1639,1141,\n1729,579,87,1989,593,1907,839,1557,799,1629,201,155,1649,1837,1063,949,\n255,1283,535,773,1681,461,1785,683,735,1123,1801,677,689,1939,487,757,\n1857,1987,983,443,1327,1267,313,1173,671,221,695,1509,271,1619,89,565,\n127,1405,1431,1659,239,1101,1159,1067,607,1565,905,1755,1231,1299,665,373,\n1985,701,1879,1221,849,627,1465,789,543,1187,1591,923,1905,979,1241,181};\n\nbool bad255[512] =\n{0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,\n 1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,\n 0,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,\n 1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,\n 1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,\n 1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,\n 1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,\n 1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,\n 0,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,\n 1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,1,0,1,1,1,1,0,1,1,1,\n 0,1,0,1,1,0,0,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,1,1,1,1,1,1,1,1,0,1,\n 1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,1,\n 1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,\n 1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,\n 1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,\n 1,0,1,1,1,0,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,\n 0,0};\n\ninline bool square( int64 x ) {\n    // Quickfail\n    if( x &lt; 0 || (x&amp;2) || ((x &amp; 7) == 5) || ((x &amp; 11) == 8) )\n        return false;\n    if( x == 0 )\n        return true;\n\n    // Check mod 255 = 3 * 5 * 17, for fun\n    int64 y = x;\n    y = (y &amp; 4294967295LL) + (y &gt;&gt; 32);\n    y = (y &amp; 65535) + (y &gt;&gt; 16);\n    y = (y &amp; 255) + ((y &gt;&gt; 8) &amp; 255) + (y &gt;&gt; 16);\n    if( bad255[y] )\n        return false;\n\n    // Divide out powers of 4 using binary search\n    if((x &amp; 4294967295LL) == 0)\n        x &gt;&gt;= 32;\n    if((x &amp; 65535) == 0)\n        x &gt;&gt;= 16;\n    if((x &amp; 255) == 0)\n        x &gt;&gt;= 8;\n    if((x &amp; 15) == 0)\n        x &gt;&gt;= 4;\n    if((x &amp; 3) == 0)\n        x &gt;&gt;= 2;\n\n    if((x &amp; 7) != 1)\n        return false;\n\n    // Compute sqrt using something like Hensel's lemma\n    int64 r, t, z;\n    r = start[(x &gt;&gt; 3) &amp; 1023];\n    do {\n        z = x - r * r;\n        if( z == 0 )\n            return true;\n        if( z &lt; 0 )\n            return false;\n        t = z &amp; (-z);\n        r += (z &amp; t) &gt;&gt; 1;\n        if( r &gt; (t  &gt;&gt; 1) )\n            r = t - r;\n    } while( t &lt;= (1LL &lt;&lt; 33) );\n\n    return false;\n}</code></pre>\n    "
}, {
    "t": "How to fix: Unsupported major.minor version 51.0 error?",
    "l": "http://stackoverflow.com/questions/10382929/how-to-fix-unsupported-major-minor-version-51-0-error",
    "q": "\n\n<p>I am trying to use <a href=\"http://en.wikipedia.org/wiki/Notepad%2B%2B\">Notepad++</a> as my all-in-one tool edit, run, compile, etc.</p>\n\n<p>I have <a href=\"http://en.wikipedia.org/wiki/Java_Virtual_Machine#Execution_environment\">JRE</a> installed, and I have setup my path variable to the .../bin directory.</p>\n\n<p>When I run my \"Hello world\" in Notepad++, I get this message:</p>\n\n<pre><code>java.lang.UnsupportedClassVersionError: test_hello_world :\n Unsupported major.minor version 51.0\n    at java.lang.ClassLoader.defineClass1(Native Method)\n    at java.lang.ClassLoader.defineClassCond(Unknown Source)\n       .........................................\n</code></pre>\n\n<p>I think the problem here is about versions; some version of Java may be old or too new.</p>\n\n<ol>\n<li>How do I fix it?</li>\n<li>Should I install the JDK, and setup my path variable to the JDK instead of JRE?</li>\n<li>What is the difference between the <code>PATH</code> variable in JRE or JDK?</li>\n</ol>\n    ",
    "a": "\n<p>The version number shown describes the version of the JRE the class file is compatible with.</p>\n\n<p>The reported major numbers are:</p>\n\n<pre><code>J2SE 8 = 52,\nJ2SE 7 = 51,\nJ2SE 6.0 = 50,\nJ2SE 5.0 = 49,\nJDK 1.4 = 48,\nJDK 1.3 = 47,\nJDK 1.2 = 46,\nJDK 1.1 = 45\n</code></pre>\n\n<p>(Source: <a href=\"http://en.wikipedia.org/wiki/Java_class_file\">http://en.wikipedia.org/wiki/Java_class_file</a>)</p>\n\n<p>To fix the actual problem you should try to either run the Java code with a newer version of Java JRE or specify the target parameter to the Java compiler to instruct the compiler to create code compatible with earlier Java versions. </p>\n\n<p>For example, in order to generate class files compatible with Java 1.4, use the following command line:</p>\n\n<pre><code>javac -target 1.4 HelloWorld.java\n</code></pre>\n\n<p>With newer versions of the Java compiler you are likely to get a warning about the bootstrap class path not being set. More information about this error is available in blog post <em><a href=\"https://blogs.oracle.com/darcy/entry/bootclasspath_older_source\">New javac warning for setting an older source without bootclasspath</a></em>.</p>\n    "
}, {
    "t": "Declare array in Java?",
    "l": "http://stackoverflow.com/questions/1200621/declare-array-in-java",
    "q": "\n\n<p>How do I declare an array in Java?</p>\n    ",
    "a": "\n<p>You can either use array declaration or array literal (but only when you declare and affect the variable right away, array literals cannot be used for re-assigning an array). </p>\n\n<p>For primitive types: </p>\n\n<pre><code>int[] myIntArray = new int[3];\nint[] myIntArray = {1,2,3};\nint[] myIntArray = new int[]{1,2,3};\n</code></pre>\n\n<p>For classes, for example <code>String</code>, it's the same:</p>\n\n<pre><code>String[] myStringArray = new String[3];\nString[] myStringArray = {\"a\",\"b\",\"c\"};\nString[] myStringArray = new String[]{\"a\",\"b\",\"c\"};\n</code></pre>\n    "
}, {
    "t": "What is reflection and why is it useful?",
    "l": "http://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful",
    "q": "\n\n<p>What is reflection, and why is it useful?</p>\n\n<p>I'm particularly interested in Java, but I assume the principles are the same in any language.</p>\n    ",
    "a": "\n<p>The name reflection is used to describe code which is able to inspect other code in the same system (or itself).</p>\n\n<p>For example, say you have an object of an unknown type in Java, and you would like to call a 'doSomething' method on it if one exists. Java's static typing system isn't really designed to support this unless the object conforms to a known interface, but using reflection, your code can look at the object and find out if it has a method called 'doSomething' and then call it if you want to.</p>\n\n<p>So, to give you a code example of this in Java (imagine the object in question is foo) :</p>\n\n<pre><code>Method method = foo.getClass().getMethod(\"doSomething\", null);\nmethod.invoke(foo, null);\n</code></pre>\n\n<p>One very common use case in Java is the usage with annotations. JUnit 4, for example, will use reflection to look through your classes for methods tagged with the @Test annotation, and will then call them when running the unit test.</p>\n\n<p>There are some good reflection examples to get you started at <a href=\"http://docs.oracle.com/javase/tutorial/reflect/index.html\">http://docs.oracle.com/javase/tutorial/reflect/index.html</a></p>\n\n<p>And finally, yes, the concepts are pretty much similar in other statically types languages which support reflection (like C#). In dynamically typed languages, the use case described above is less necessary (since the compiler will allow any method to be called on any object, failing at runtime if it does not exist), but the second case of looking for methods which are marked or work in a certain way is still common.</p>\n    "
}, {
    "t": "How to generate a random alpha-numeric string?",
    "l": "http://stackoverflow.com/questions/41107/how-to-generate-a-random-alpha-numeric-string",
    "q": "\n\n<p>I've been looking for a <em>simple</em> Java algorithm to generate a pseudo-random alpha-numeric string.  In my situation it would be used as a unique session/key identifier that would \"likely\" be unique over 500K+ generation (my needs don't really require anything much more sophisticated).  Ideally, I would be able to specify a length depending on my uniqueness needs. For example, a generated string of length 12 might look something like <code>\"AEYGF7K0DM1X\"</code>.  </p>\n    ",
    "a": "\n<p>Here is code for secure, easy, but a little bit more expensive session identifiers.</p>\n\n<pre><code>import java.security.SecureRandom;\n\npublic final class SessionIdentifierGenerator {\n  private SecureRandom random = new SecureRandom();\n\n  public String nextSessionId() {\n    return new BigInteger(130, random).toString(32);\n  }\n}\n</code></pre>\n\n<p>This works by choosing 130 bits from a cryptographically secure random bit generator, and encoding them in base-32. 128 bits is considered to be cryptographically <em>strong,</em> but each digit in a base 32 number can encode 5 bits, so 128 is rounded up to the next multiple of 5. This encoding is compact and efficient, with 5 random bits per character. Compare this to a random UUID, which only has 3.4 bits per character in standard layout, and only 122 random bits in total.</p>\n\n<p>If you allow session identifiers to be easily guessable (too short, flawed random number generator, etc.), attackers can hijack other's sessions. Note that <code>SecureRandom</code> objects are expensive to initialize, so you'll want to keep one around and reuse it.</p>\n\n<p>Here is alternative code for cheap, insecure random alpha-numeric strings. You can tweak the \"symbols\" if you want to use more characters.</p>\n\n<pre><code>public class RandomString {\n\n  private static final char[] symbols;\n\n  static {\n    StringBuilder tmp = new StringBuilder();\n    for (char ch = '0'; ch &lt;= '9'; ++ch)\n      tmp.append(ch);\n    for (char ch = 'a'; ch &lt;= 'z'; ++ch)\n      tmp.append(ch);\n    symbols = tmp.toString().toCharArray();\n  }   \n\n  private final Random random = new Random();\n\n  private final char[] buf;\n\n  public RandomString(int length) {\n    if (length &lt; 1)\n      throw new IllegalArgumentException(\"length &lt; 1: \" + length);\n    buf = new char[length];\n  }\n\n  public String nextString() {\n    for (int idx = 0; idx &lt; buf.length; ++idx) \n      buf[idx] = symbols[random.nextInt(symbols.length)];\n    return new String(buf);\n  }\n}\n</code></pre>\n    "
}, {
    "t": "Examples of GoF Design Patterns in Java's core libraries",
    "l": "http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries",
    "q": "\n\n<p>I am learning GoF Java Design Patterns and I want to see some real life examples of them. What are some good examples of these Design Patterns in Java's core libraries?</p>\n    ",
    "a": "\n<p>You can find an overview of a lot of design patterns in <a href=\"http://en.wikipedia.org/wiki/Design_pattern_%28computer_science%29#Classification_and_list\">Wikipedia</a>. It also mentions which patterns are mentioned by GoF. I'll sum them up here and try to assign as much as possible pattern implementations found in both the Java SE and Java EE API's.</p>\n\n<hr>\n\n<h2><a href=\"http://en.wikipedia.org/wiki/Creational_pattern\">Creational patterns</a></h2>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Abstract_factory_pattern\">Abstract factory</a> <sup><sub>(recognizeable by creational methods returning the factory itself which in turn can be used to create another abstract/interface type)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#newInstance%28%29\"><code>javax.xml.parsers.DocumentBuilderFactory#newInstance()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/javax/xml/transform/TransformerFactory.html#newInstance%28%29\"><code>javax.xml.transform.TransformerFactory#newInstance()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/javax/xml/xpath/XPathFactory.html#newInstance%28%29\"><code>javax.xml.xpath.XPathFactory#newInstance()</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Builder_pattern\">Builder</a> <sup><sub>(recognizeable by creational methods returning the instance itself)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/StringBuilder.html#append%28boolean%29\"><code>java.lang.StringBuilder#append()</code></a> (unsynchronized)</li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/StringBuffer.html#append%28boolean%29\"><code>java.lang.StringBuffer#append()</code></a> (synchronized)</li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/ByteBuffer.html#put%28byte%29\"><code>java.nio.ByteBuffer#put()</code></a> (also on <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/CharBuffer.html#put%28char%29\"><code>CharBuffer</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/ShortBuffer.html#put%28short%29\"><code>ShortBuffer</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/IntBuffer.html#put%28int%29\"><code>IntBuffer</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/LongBuffer.html#put%28long%29\"><code>LongBuffer</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/FloatBuffer.html#put%28float%29\"><code>FloatBuffer</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/DoubleBuffer.html#put%28double%29\"><code>DoubleBuffer</code></a>)</li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/javax/swing/GroupLayout.Group.html#addComponent%28java.awt.Component%29\"><code>javax.swing.GroupLayout.Group#addComponent()</code></a></li>\n<li>All implementations of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Appendable.html\"><code>java.lang.Appendable</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Factory_method_pattern\">Factory method</a> <sup><sub>(recognizeable by creational methods returning an implementation of an abstract/interface type)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Calendar.html#getInstance%28%29\"><code>java.util.Calendar#getInstance()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/ResourceBundle.html#getBundle%28java.lang.String%29\"><code>java.util.ResourceBundle#getBundle()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/text/NumberFormat.html#getInstance%28%29\"><code>java.text.NumberFormat#getInstance()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html#forName%28java.lang.String%29\"><code>java.nio.charset.Charset#forName()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/net/URLStreamHandlerFactory.html\"><code>java.net.URLStreamHandlerFactory#createURLStreamHandler(String)</code></a> (Returns singleton object per protocol)</li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Prototype_pattern\">Prototype</a> <sup><sub>(recognizeable by creational methods returning a <em>different</em> instance of itself with the same properties)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#clone%28%29\"><code>java.lang.Object#clone()</code></a> (the class has to implement <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Cloneable.html\"><code>java.lang.Cloneable</code></a>)</li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\">Singleton</a> <sup><sub>(recognizeable by creational methods returning the <em>same</em> instance (usually of itself) everytime)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Runtime.html#getRuntime%28%29\"><code>java.lang.Runtime#getRuntime()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/awt/Desktop.html#getDesktop%28%29\"><code>java.awt.Desktop#getDesktop()</code></a></li>\n</ul>\n\n<hr>\n\n<h2><a href=\"http://en.wikipedia.org/wiki/Structural_pattern\">Structural patterns</a></h2>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Adapter_pattern\">Adapter</a> <sup><sub>(recognizeable by creational methods taking an instance of <em>different</em> abstract/interface type and returning an implementation of own/another abstract/interface type which <em>decorates/overrides</em> the given instance)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Arrays.html#asList%28T...%29\"><code>java.util.Arrays#asList()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/InputStreamReader.html#InputStreamReader%28java.io.InputStream%29\"><code>java.io.InputStreamReader(InputStream)</code></a> (returns a <code>Reader</code>)</li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/OutputStreamWriter.html#OutputStreamWriter%28java.io.OutputStream%29\"><code>java.io.OutputStreamWriter(OutputStream)</code></a> (returns a <code>Writer</code>)</li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#marshal%28BoundType%29\"><code>javax.xml.bind.annotation.adapters.XmlAdapter#marshal()</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html#unmarshal%28ValueType%29\"><code>#unmarshal()</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Bridge_pattern\">Bridge</a> <sup><sub>(recognizeable by creational methods taking an instance of <em>different</em> abstract/interface type and returning an implementation of own abstract/interface type which <em>delegates/uses</em> the given instance)</sub></sup></h3>\n\n<ul>\n<li>None comes to mind yet. A fictive example would be <code>new LinkedHashMap(LinkedHashSet&lt;K&gt;, List&lt;V&gt;)</code> which returns an unmodifiable linked map which doesn't clone the items, but <em>uses</em> them. The <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#newSetFromMap%28java.util.Map%29\"><code>java.util.Collections#newSetFromMap()</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#singleton%28T%29\"><code>singletonXXX()</code></a> methods however comes close.</li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Composite_pattern\">Composite</a> <sup><sub>(recognizeable by behavioral methods taking an instance of <em>same</em> abstract/interface type into a tree structure)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/awt/Container.html#add%28java.awt.Component%29\"><code>java.awt.Container#add(Component)</code></a> (practically all over Swing thus)</li>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/component/UIComponent.html#getChildren%28%29\"><code>javax.faces.component.UIComponent#getChildren()</code></a> (practically all over JSF UI thus)</li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Decorator_pattern\">Decorator</a> <sup><sub>(recognizeable by creational methods taking an instance of <em>same</em> abstract/interface type which adds additional behaviour)</sub></sup></h3>\n\n<ul>\n<li>All subclasses of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/InputStream.html\"><code>java.io.InputStream</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/OutputStream.html\"><code>OutputStream</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Reader.html\"><code>Reader</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Writer.html\"><code>Writer</code></a> have a constructor taking an instance of same type.</li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html\"><code>java.util.Collections</code></a>, the <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#checkedCollection%28java.util.Collection,%20java.lang.Class%29\"><code>checkedXXX()</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#synchronizedCollection%28java.util.Collection%29\"><code>synchronizedXXX()</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Collections.html#unmodifiableCollection%28java.util.Collection%29\"><code>unmodifiableXXX()</code></a> methods.</li>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequestWrapper.html\"><code>javax.servlet.http.HttpServletRequestWrapper</code></a> and <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponseWrapper.html\"><code>HttpServletResponseWrapper</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Facade_pattern\">Facade</a> <sup><sub>(recognizeable by behavioral methods which internally uses instances of <em>different</em> independent abstract/interface types)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/context/FacesContext.html\"><code>javax.faces.context.FacesContext</code></a>, it internally uses among others the abstract/interface types <a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/lifecycle/Lifecycle.html\"><code>LifeCycle</code></a>, <a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/application/ViewHandler.html\"><code>ViewHandler</code></a>, <a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/application/NavigationHandler.html\"><code>NavigationHandler</code></a> and many more without that the enduser has to worry about it (which are however overrideable by injection).</li>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/context/ExternalContext.html\"><code>javax.faces.context.ExternalContext</code></a>, which internally uses <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/ServletContext.html\"><code>ServletContext</code></a>, <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpSession.html\"><code>HttpSession</code></a>, <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html\"><code>HttpServletRequest</code></a>, <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponse.html\"><code>HttpServletResponse</code></a>, etc.</li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Flyweight_pattern\">Flyweight</a> <sup><sub>(recognizeable by creational methods returning a cached instance, a bit the \"multiton\" idea)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Integer.html#valueOf%28int%29\"><code>java.lang.Integer#valueOf(int)</code></a> (also on <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Boolean.html#valueOf%28boolean%29\"><code>Boolean</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Byte.html#valueOf%28byte%29\"><code>Byte</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Character.html#valueOf%28char%29\"><code>Character</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Short.html#valueOf%28short%29\"><code>Short</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Long.html#valueOf%28long%29\"><code>Long</code></a>)</li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Proxy_pattern\">Proxy</a> <sup><sub>(recognizeable by creational methods which returns an implementation of given abstract/interface type which in turn <em>delegates/uses</em> a <em>different</em> implementation of given abstract/interface type)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/Proxy.html\"><code>java.lang.reflect.Proxy</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/rmi/package-summary.html\"><code>java.rmi.*</code></a>, the whole API actually.</li>\n</ul>\n\n<p><sup><sub>The Wikipedia example is IMHO a bit poor, lazy loading has actually completely nothing to do with the proxy pattern at all.</sub></sup></p>\n\n<hr>\n\n<h2><a href=\"http://en.wikipedia.org/wiki/Behavioral_pattern\">Behavioral patterns</a></h2>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Chain_of_responsibility_pattern\">Chain of responsibility</a> <sup><sub>(recognizeable by behavioral methods which (indirectly) invokes the same method in <em>another</em> implementation of <em>same</em> abstract/interface type in a queue)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/logging/Logger.html#log%28java.util.logging.Level,%20java.lang.String%29\"><code>java.util.logging.Logger#log()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29\"><code>javax.servlet.Filter#doFilter()</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Command_pattern\">Command</a> <sup><sub>(recognizeable by behavioral methods in an abstract/interface type which invokes a method in an implementation of a <em>different</em> abstract/interface type which has been <em>encapsulated</em> by the command implementation during its creation)</sub></sup></h3>\n\n<ul>\n<li>All implementations of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Runnable.html\"><code>java.lang.Runnable</code></a></li>\n<li>All implementations of <a href=\"http://docs.oracle.com/javase/6/docs/api/javax/swing/Action.html\"><code>javax.swing.Action</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Interpreter_pattern\">Interpreter</a> <sup><sub>(recognizeable by behavioral methods returning a <em>structurally</em> different instance/type of the given instance/type; note that parsing/formatting is not part of the pattern, determining the pattern and how to apply it is)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html\"><code>java.util.Pattern</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/text/Normalizer.html\"><code>java.text.Normalizer</code></a></li>\n<li>All subclasses of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/text/Format.html\"><code>java.text.Format</code></a></li>\n<li>All subclasses of <a href=\"http://docs.oracle.com/javaee/6/api/javax/el/ELResolver.html\"><code>javax.el.ELResolver</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Iterator_pattern\">Iterator</a> <sup><sub>(recognizeable by behavioral methods sequentially returning instances of a <em>different</em> type from a queue)</sub></sup></h3>\n\n<ul>\n<li>All implementations of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Iterator.html\"><code>java.util.Iterator</code></a> (thus among others also <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Scanner.html\"><code>java.util.Scanner</code></a>!).</li>\n<li>All implementations of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Enumeration.html\"><code>java.util.Enumeration</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Mediator_pattern\">Mediator</a> <sup><sub>(recognizeable by behavioral methods taking an instance of different abstract/interface type (usually using the command pattern) which delegates/uses the given instance)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Timer.html\"><code>java.util.Timer</code></a> (all <code>scheduleXXX()</code> methods)</li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/Executor.html#execute%28java.lang.Runnable%29\"><code>java.util.concurrent.Executor#execute()</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ExecutorService.html\"><code>java.util.concurrent.ExecutorService</code></a> (the <code>invokeXXX()</code> and <code>submit()</code> methods)</li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledExecutorService.html\"><code>java.util.concurrent.ScheduledExecutorService</code></a> (all <code>scheduleXXX()</code> methods)</li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/reflect/Method.html#invoke%28java.lang.Object,%20java.lang.Object...%29\"><code>java.lang.reflect.Method#invoke()</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Memento_pattern\">Memento</a> <sup><sub>(recognizeable by behavioral methods which internally changes the state of the <em>whole</em> instance)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Date.html\"><code>java.util.Date</code></a> (the setter methods do that, <code>Date</code> is internally represented by a <code>long</code> value)</li>\n<li>All implementations of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\"><code>java.io.Serializable</code></a></li>\n<li>All implementations of <a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/component/StateHolder.html\"><code>javax.faces.component.StateHolder</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Observer_pattern\">Observer (or Publish/Subscribe)</a> <sup><sub>(recognizeable by behavioral methods which invokes a method on an instance of <em>another</em> abstract/interface type, depending on own state)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Observer.html\"><code>java.util.Observer</code></a>/<a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Observable.html\"><code>java.util.Observable</code></a> (rarely used in real world though)</li>\n<li>All implementations of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/EventListener.html\"><code>java.util.EventListener</code></a> (practically all over Swing thus)</li>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpSessionBindingListener.html\"><code>javax.servlet.http.HttpSessionBindingListener</code></a></li>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpSessionAttributeListener.html\"><code>javax.servlet.http.HttpSessionAttributeListener</code></a></li>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/event/PhaseListener.html\"><code>javax.faces.event.PhaseListener</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/State_pattern\">State</a> <sup><sub>(recognizeable by behavioral methods which changes its behaviour depending on the instance's state which can be controlled externally)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/lifecycle/Lifecycle.html#execute%28javax.faces.context.FacesContext%29\"><code>javax.faces.lifecycle.LifeCycle#execute()</code></a> (controlled by <a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/webapp/FacesServlet.html\"><code>FacesServlet</code></a>, the behaviour is dependent on current phase (state) of JSF lifecycle)</li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Strategy_pattern\">Strategy</a> <sup><sub>(recognizeable by behavioral methods in an abstract/interface type which invokes a method in an implementation of a <em>different</em> abstract/interface type which has been <em>passed-in</em> as method argument into the strategy implementation)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Comparator.html#compare%28T,%20T%29\"><code>java.util.Comparator#compare()</code></a>, executed by among others <code>Collections#sort()</code>.</li>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html\"><code>javax.servlet.http.HttpServlet</code></a>, the <code>service()</code> and all <code>doXXX()</code> methods take <code>HttpServletRequest</code> and <code>HttpServletResponse</code> and the implementor has to process them (and not to get hold of them as instance variables!).</li>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/Filter.html#doFilter%28javax.servlet.ServletRequest,%20javax.servlet.ServletResponse,%20javax.servlet.FilterChain%29\"><code>javax.servlet.Filter#doFilter()</code></a></li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Template_method_pattern\">Template method</a> <sup><sub>(recognizeable by behavioral methods which already have a \"default\" behaviour definied by an abstract type)</sub></sup></h3>\n\n<ul>\n<li>All non-abstract methods of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/InputStream.html\"><code>java.io.InputStream</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/OutputStream.html\"><code>java.io.OutputStream</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Reader.html\"><code>java.io.Reader</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Writer.html\"><code>java.io.Writer</code></a>.</li>\n<li>All non-abstract methods of <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/AbstractList.html\"><code>java.util.AbstractList</code></a>, <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/AbstractSet.html\"><code>java.util.AbstractSet</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/AbstractMap.html\"><code>java.util.AbstractMap</code></a>.</li>\n<li><a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html\"><code>javax.servlet.http.HttpServlet</code></a>, all the <code>doXXX()</code> methods by default sends a HTTP 405 \"Method Not Allowed\" error to the response. You're free to implement none or any of them.</li>\n</ul>\n\n<h3><a href=\"http://en.wikipedia.org/wiki/Visitor_pattern\">Visitor</a> <sup><sub>(recognizeable by two <em>different</em> abstract/interface types which has methods definied which takes each the <em>other</em> abstract/interface type; the one actually calls the method of the other and the other executes the desired strategy on it)</sub></sup></h3>\n\n<ul>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/javax/lang/model/element/AnnotationValue.html\"><code>javax.lang.model.element.AnnotationValue</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/javax/lang/model/element/AnnotationValueVisitor.html\"><code>AnnotationValueVisitor</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/javax/lang/model/element/Element.html\"><code>javax.lang.model.element.Element</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/javax/lang/model/element/ElementVisitor.html\"><code>ElementVisitor</code></a></li>\n<li><a href=\"http://docs.oracle.com/javase/6/docs/api/javax/lang/model/type/TypeMirror.html\"><code>javax.lang.model.type.TypeMirror</code></a> and <a href=\"http://docs.oracle.com/javase/6/docs/api/javax/lang/model/type/TypeVisitor.html\"><code>TypeVisitor</code></a></li>\n</ul>\n    "
}, {
    "t": "Failed to load the JNI shared Library (JDK)",
    "l": "http://stackoverflow.com/questions/7352493/failed-to-load-the-jni-shared-library-jdk",
    "q": "\n\n<p>When I try opening <a href=\"http://www.eclipse.org/\">Eclipse</a>, a pop-up dialog states:</p>\n\n<blockquote>\n  <p>Failed to load the JNI shared library \"C:/JDK/bin/client/jvm.dll\"`.</p>\n</blockquote>\n\n<p>Following this, Eclipse force closes.</p>\n\n<p>Here's a few points I'd like to make:  </p>\n\n<ul>\n<li>I checked to see if anything exists at that path. It does exist.  </li>\n<li>My Eclipse and <a href=\"http://www.oracle.com/technetwork/java/javase/overview/index.html\">Java SE Development Kit</a> are both 64-bit. I checked my system, and it can handle 64-bit.  </li>\n<li>I've searched for this problem on Google and on Stack&nbsp;Overflow, and the only answer I found was to download the 32-bit versions of JDK and Eclipse.</li>\n</ul>\n\n<p>Downloading the 32-bit versions is something I only want to do as a very last resort.<br>\nWhat would be suggested to solve this issue?</p>\n    ",
    "a": "\n<p>You need a 64-bit trio: </p>\n\n<ul>\n<li>64-bit OS</li>\n<li>64-bit Java </li>\n<li>64-bit Eclipse</li>\n</ul>\n    "
}, {
    "t": "Comparing Java enum members: == or equals()?",
    "l": "http://stackoverflow.com/questions/1750435/comparing-java-enum-members-or-equals",
    "q": "\n\n<p>I know that Java enums are compiled to classes with private constructors and a bunch of public static members. When comparing two members of a given enum, I've always used <code>.equals()</code>, e.g.</p>\n\n<pre><code>public useEnums(SomeEnum a)\n{\n    if(a.equals(SomeEnum.SOME_ENUM_VALUE))\n    {\n        ...\n    }\n    ...\n}\n</code></pre>\n\n<p>However, I just came across come code that uses the equals operator <code>==</code> instead:</p>\n\n<pre><code>public useEnums2(SomeEnum a)\n{\n    if(a == SomeEnum.SOME_ENUM_VALUE)\n    {\n        ...\n    }\n    ...\n}\n</code></pre>\n\n<p>I've been programming in Java for 5+ years, and I thought I understood difference between the two - but I'm still scratching my head at which one is more correct. Which operator is the one I should be using?</p>\n    ",
    "a": "\n<p>Both are technically correct. If you look at the source code for <code>.equals()</code>, it simply defers to <code>==</code>.</p>\n\n<p>I use <code>==</code>, however, as that will be null safe.</p>\n    "
}, {
    "t": "Does Java support default parameter values?",
    "l": "http://stackoverflow.com/questions/997482/does-java-support-default-parameter-values",
    "q": "\n\n<p>I came across some Java code that had the following structure:</p>\n\n<pre><code>public MyParameterizedFunction(String param1, int param2)\n{\n    this(param1, param2, false);\n}\n\npublic MyParameterizedFunction(String param1, int param2, boolean param3)\n{\n    //use all three parameters here\n}\n</code></pre>\n\n<p>I know that in C++ I can assign a parameter a default value.  For example:</p>\n\n<pre><code>void MyParameterizedFunction(String param1, int param2, bool param3=false);\n</code></pre>\n\n<p>Does Java support this kind of syntax?  Are there any reasons why this two step syntax is preferable?</p>\n    ",
    "a": "\n<p>No, the structure you found is how Java handles it (that is, with overloading instead of default parameters).</p>\n\n<p>For constructors, <em><a href=\"https://en.wikipedia.org/wiki/Joshua_Bloch#Bibliography\">See Effective Java: Programming Language Guide's</a></em> Item 1 tip (Consider static factory methods instead of constructors) if the overloading is getting complicated. For other methods, renaming some cases or using a parameter object can help. This is when you have enough complexity that differentiating is difficult. A definite case is where you have to differentiate using the order of parameters, not just number and type.</p>\n    "
}, {
    "t": "How to concatenate two arrays in Java?",
    "l": "http://stackoverflow.com/questions/80476/how-to-concatenate-two-arrays-in-java",
    "q": "\n\n<p>I need to concatenate two String arrays in Java.</p>\n\n<pre><code>void f(String[] first, String[] second) {\n    String[] both = ???\n}\n</code></pre>\n\n<p>What is the easiest way to do this?</p>\n    ",
    "a": "\n<p>I found a one-line solution from the good old Apache Commons Lang library.<br> <a href=\"http://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/ArrayUtils.html#addAll%28T%5B%5D,%20T...%29\"><code>ArrayUtils.addAll(T[], T...)</code></a></p>\n\n<p>Code:</p>\n\n<pre><code>String[] both = ArrayUtils.addAll(first, second);\n</code></pre>\n    "
}, {
    "t": "StringBuilder and StringBuffer",
    "l": "http://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer",
    "q": "\n\n<p>What is the main difference between StringBuffer and StringBuilder? Is there any performance issues when deciding on any one of these?</p>\n    ",
    "a": "\n<p><a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html\"><code>StringBuffer</code></a> is synchronized, <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html\"><code>StringBuilder</code></a> is not. </p>\n    "
}, {
    "t": "What issues should be considered when overriding equals and hashCode in Java?",
    "l": "http://stackoverflow.com/questions/27581/what-issues-should-be-considered-when-overriding-equals-and-hashcode-in-java",
    "q": "\n\n<p>What issues / pitfalls must be considered when overriding <code>equals</code> and <code>hashCode</code>?</p>\n    ",
    "a": "\n<h3>The theory (for the language lawyers and the mathematically inclined):</h3>\n\n<p><code>equals()</code> (<a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#equals(java.lang.Object)\" rel=\"nofollow\">javadoc</a>) must define an equivalence relation (it must be <em>reflexive</em>, <em>symmetric</em>, and <em>transitive</em>). In addition, it must be <em>consistent</em> (if the objects are not modified, then it must keep returning the same value). Furthermore, <code>o.equals(null)</code> must always return false.</p>\n\n<p><code>hashCode()</code> (<a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()\" rel=\"nofollow\">javadoc</a>) must also be <em>consistent</em> (if the object is not modified in terms of <code>equals()</code>, it must keep returning the same value).</p>\n\n<p>The <strong>relation</strong> between the two methods is:</p>\n\n<blockquote>\n  <p><em>Whenever <code>a.equals(b)</code>, then <code>a.hashCode()</code> must be same as <code>b.hashCode()</code>.</em></p>\n</blockquote>\n\n<h3>In practice:</h3>\n\n<p>If you override one, then you should override the other.</p>\n\n<p>Use the same set of fields that you use to compute <code>equals()</code> to compute <code>hashCode()</code>.</p>\n\n<p>Use the excellent helper classes <a href=\"http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html\" rel=\"nofollow\">EqualsBuilder</a> and <a href=\"http://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/HashCodeBuilder.html\" rel=\"nofollow\">HashCodeBuilder</a> from the <a href=\"http://commons.apache.org/lang/\" rel=\"nofollow\">Apache Commons Lang</a> library. An example:</p>\n\n<pre><code>public class Person {\n    private String name;\n    private int age;\n    // ...\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 31). // two randomly chosen prime numbers\n            // if deriving: appendSuper(super.hashCode()).\n            append(name).\n            append(age).\n            toHashCode();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n       if (!(obj instanceof Person))\n            return false;\n        if (obj == this)\n            return true;\n\n        Person rhs = (Person) obj;\n        return new EqualsBuilder().\n            // if deriving: appendSuper(super.equals(obj)).\n            append(name, rhs.name).\n            append(age, rhs.age).\n            isEquals();\n    }\n}\n</code></pre>\n\n<h3>Also remember:</h3>\n\n<p>When using a hash-based <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/Collection.html\" rel=\"nofollow\">Collection</a> or <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/Map.html\" rel=\"nofollow\">Map</a> such as <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashSet.html\" rel=\"nofollow\">HashSet</a>, <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/LinkedHashSet.html\" rel=\"nofollow\">LinkedHashSet</a>, <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/HashMap.html\" rel=\"nofollow\">HashMap</a>, <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/Hashtable.html\" rel=\"nofollow\">Hashtable</a>, or <a href=\"http://download.oracle.com/javase/1.4.2/docs/api/java/util/WeakHashMap.html\" rel=\"nofollow\">WeakHashMap</a>, make sure that the hashCode() of the key objects that you put into the collection never changes while the object is in the collection. The bulletproof way to ensure this is to make your keys immutable, <a href=\"http://www.javapractices.com/topic/TopicAction.do?Id=29\" rel=\"nofollow\">which has also other benefits</a>.</p>\n    "
}, {
    "t": "Why can't I switch on a String?",
    "l": "http://stackoverflow.com/questions/338206/why-cant-i-switch-on-a-string",
    "q": "\n\n<p>Why can't I switch on a String?</p>\n\n<p>Is this functionality going to be put into a later Java version?</p>\n\n<p>Can someone point me to an article, or themselves explain <strong>why</strong> I can't do this, as in, the technical way Java's switch statement works?</p>\n    ",
    "a": "\n<p>Switch statements with <code>String</code> cases have been implemented in <a href=\"http://openjdk.java.net/projects/jdk7/features/\">Java SE 7</a>, at least 16 years <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=1223179\">after they were first requested.</a> A clear reason for the delay was not provided, but it likely had to do with performance.</p>\n\n<h2>Implementation in JDK 7</h2>\n\n<p>The <a href=\"http://docs.oracle.com/javase/tutorial/displayCode.html?code=http://docs.oracle.com/javase/tutorial/java/nutsandbolts/examples/StringSwitchDemo.java\">feature</a> has now been implemented in <code>javac</code> <a href=\"http://blogs.oracle.com/darcy/entry/project_coin_string_switch_anatomy\">with a \"de-sugaring\" process;</a> a clean, high-level syntax using <code>String</code> constants in <code>case</code> declarations is expanded at compile-time into more complex code following a pattern. The resulting code uses JVM instructions that have always existed.</p>\n\n<p>A <code>switch</code> with <code>String</code> cases is translated into two switches during compilation. The first maps each string to a unique integer—its position in the original switch. This is done by first switching on the hash code of the label. The corresponding case is an <code>if</code> statement that tests string equality; if there are collisions on the hash, the test is a cascading <code>if-else-if</code>. The second switch mirrors that in the original source code, but substitutes the case labels with their corresponding positions. This two-step process makes it easy to preserve the flow control of the original switch.</p>\n\n<h2>Switches in the JVM</h2>\n\n<p>For more technical depth on <code>switch</code>, you can refer to the JVM Specification, where the <a href=\"http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-3.html#jvms-3.10\">compilation of switch statements</a> is described. In a nutshell, there are two different JVM instructions that can be used for a switch, depending on the sparsity of the constants used by the cases. Both depend on using integer constants for each case to execute efficiently. </p>\n\n<p>If the constants are dense, they are used as an index (after subtracting the lowest value) into a table of instruction pointers—the <code>tableswitch</code> instruction. </p>\n\n<p>If the constants are sparse, a binary search for the correct case is performed—the <code>lookupswitch</code> instruction. </p>\n\n<p>In de-sugaring a <code>switch</code> on <code>String</code> objects, both instructions are likely to be used. The <code>lookupswitch</code> is suitable for the first switch on hash codes to find the original position of the case. The resulting ordinal is a natural fit for a <code>tableswitch</code>.</p>\n\n<p>Both instructions require the integer constants assigned to each case to be sorted at compile time. At runtime, while the <code>O(1)</code> performance of <code>tableswitch</code> generally appears better than the <code>O(log(n))</code> performance of <code>lookupswitch</code>, it requires some analysis to determine whether the table is dense enough to justify the space–time tradeoff. Bill Venners wrote <a href=\"http://www.artima.com/underthehood/flowP.html\">a great article</a> that covers this in more detail, along with an under-the-hood look at other Java flow control instructions.</p>\n\n<h2>Before JDK 7</h2>\n\n<p>Prior to JDK 7, <code>enum</code> could approximate a <code>String</code>-based switch. This uses <a href=\"http://docs.oracle.com/javase/specs/jls/se5.0/html/classes.html#8.9\">the static <code>valueOf</code></a> method generated by the compiler on every <code>enum</code> type. For example:</p>\n\n<pre><code>Pill p = Pill.valueOf(str);\nswitch(p) {\n  case RED:  pop();  break;\n  case BLUE: push(); break;\n}\n</code></pre>\n    "
}, {
    "t": "What's the simplest way to print a Java array?",
    "l": "http://stackoverflow.com/questions/409784/whats-the-simplest-way-to-print-a-java-array",
    "q": "\n\n<p>In Java, arrays don't override <code>toString()</code>, so if you try to print one directly, you get weird output including the memory location:</p>\n\n<pre><code>int[] intArray = new int[] {1, 2, 3, 4, 5};\nSystem.out.println(intArray);     // prints something like '[I@3343c8b3'\n</code></pre>\n\n<p>But usually we'd actually want something more like <code>[1, 2, 3, 4, 5]</code>. What's the simplest way of doing that? Here are some example inputs and outputs:</p>\n\n<pre><code>// array of primitives:\nint[] intArray = new int[] {1, 2, 3, 4, 5};\n//output: [1, 2, 3, 4, 5]\n\n// array of object references:\nString[] strArray = new String[] {\"John\", \"Mary\", \"Bob\"};\n//output: [John, Mary, Bob]\n</code></pre>\n    ",
    "a": "\n<p>In Java 5 <code>Arrays.toString(arr)</code> or <code>Arrays.deepToString(arr)</code> for arrays within arrays. Note that Object[] version calls <code>.toString()</code> of each object in array. If my memory serves me correct, the output is even decorated in the exact way you're asking.</p>\n\n<p>Edit: Don't forget to add <code>import java.util.Arrays;</code> like this:</p>\n\n<pre><code>package packageName;\nimport java.util.Arrays;\n...\n</code></pre>\n    "
}, {
    "t": "How to create a Java String from the contents of a file?",
    "l": "http://stackoverflow.com/questions/326390/how-to-create-a-java-string-from-the-contents-of-a-file",
    "q": "\n\n<p>I've been using this idiom for some time now. And it seems to be the most wide-spread, at least in the sites I've visited. </p>\n\n<p>Does anyone have a better/different way to read a file into a string in Java?</p>\n\n<pre><code>private String readFile( String file ) throws IOException {\n    BufferedReader reader = new BufferedReader( new FileReader (file));\n    String         line = null;\n    StringBuilder  stringBuilder = new StringBuilder();\n    String         ls = System.getProperty(\"line.separator\");\n\n    while( ( line = reader.readLine() ) != null ) {\n        stringBuilder.append( line );\n        stringBuilder.append( ls );\n    }\n\n    return stringBuilder.toString();\n}\n</code></pre>\n    ",
    "a": "\n<h2>Read all text from a file</h2>\n\n<p>Here's a compact, robust idiom for Java 7, wrapped up in a utility method:</p>\n\n<pre><code>static String readFile(String path, Charset encoding) \n  throws IOException \n{\n  byte[] encoded = Files.readAllBytes(Paths.get(path));\n  return new String(encoded, encoding);\n}\n</code></pre>\n\n<h2>Read lines of text from a file</h2>\n\n<p>Java 7 added a <a href=\"http://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#readAllLines%28java.nio.file.Path,%20java.nio.charset.Charset%29\">convenience method to read a file as lines of text,</a> represented as a <code>List&lt;String&gt;</code>. This approach is \"lossy\" because the line separators are stripped from the end of each line.</p>\n\n<pre><code>List&lt;String&gt; lines = Files.readAllLines(Paths.get(path), encoding);\n</code></pre>\n\n<h2>Memory utilization</h2>\n\n<p>The first method, that preserves line breaks, can temporarily require memory several times the size of the file, because for a short time the raw file contents (a byte array), and the decoded characters (each of which is 16 bits even if encoded as 8 bits in the file) reside in memory at once. It is safest to apply to files that you know to be small relative to the available memory.</p>\n\n<p>The second method, reading lines, is usually more memory efficient, because the input byte buffer for decoding doesn't need to contain the entire file. However, it's still not suitable for files that are very large relative to available memory.</p>\n\n<p>For reading large files, you need a different design for your program, one that reads a chunk of text from a stream, processes it, and then moves on to the next, reusing the same fixed-sized memory block. Here, \"large\" depends on the computer specs. Nowadays, this threshold might be many gigabytes of RAM.</p>\n\n<h2>Character encoding</h2>\n\n<p>One thing that is missing from the sample in the original post is the character encoding. There are some special cases where the platform default is what you want, but they are rare, and you should be able justify your choice.</p>\n\n<p>The <a href=\"http://docs.oracle.com/javase/7/docs/api/java/nio/charset/StandardCharsets.html\"><code>StandardCharsets</code></a> class define some constants for the encodings required of all Java runtimes:</p>\n\n<pre><code>String content = readFile(\"test.txt\", StandardCharsets.UTF_8);\n</code></pre>\n\n<p>The platform default is available from <a href=\"http://docs.oracle.com/javase/7/docs/api/java/nio/charset/Charset.html#defaultCharset%28%29\">the <code>Charset</code> class</a> itself:</p>\n\n<pre><code>String content = readFile(\"test.txt\", Charset.defaultCharset());\n</code></pre>\n\n<hr>\n\n<p>Note: This answer largely replaces my Java 6 version. The utility of Java 7 safely simplifies the code, and the old answer, which used a mapped byte buffer, prevented the file that was read from being deleted until the mapped buffer was garbage collected. You can view the old version via the \"edited\" link on this answer.</p>\n    "
}, {
    "t": "Why does Java have transient variables?",
    "l": "http://stackoverflow.com/questions/910374/why-does-java-have-transient-variables",
    "q": "\n\n<p>Why does Java have <strong>transient</strong> variables?</p>\n    ",
    "a": "\n<p>The <code>transient</code> keyword in Java is used to indicate that a field should not be serialized.</p>\n\n<p>From the <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/index.html\">Java Language Specification, Java SE 7 Edition</a>, <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3.1.3\">Section 8.3.1.3. <code>transient</code> Fields</a>:</p>\n\n<blockquote>\n  <p>Variables may be marked <code>transient</code> to\n  indicate that they are not part of the\n  persistent state of an object.</p>\n</blockquote>\n\n<p>For example, you may have fields that are derived from other fields, and should only be done so programmatically, rather than having the state be persisted via serialization. </p>\n\n<p>Here's a <code>GalleryImage</code> class which contains an image and a thumbnail derived from the image:</p>\n\n<pre><code>class GalleryImage implements Serializable\n{\n    private Image image;\n    private transient Image thumbnailImage;\n\n    private void generateThumbnail()\n    {\n        // Generate thumbnail.\n    }\n\n    private void readObject(ObjectInputStream inputStream)\n            throws IOException, ClassNotFoundException\n    {\n        inputStream.defaultReadObject();\n        generateThumbnail();\n    }    \n}\n</code></pre>\n\n<p>In this example, the <code>thumbnailImage</code> is a thumbnail image that is generated by invoking the <code>generateThumbnail</code> method.</p>\n\n<p>The <code>thumbnailImage</code> field is marked as <code>transient</code>, so only the original <code>image</code> is serialized rather than persisting both the original image and the thumbnail image. This means that less storage would be needed to save the serialized object. (Of course, this may or may not be desirable depending on the requirements of the system -- this is just an example.)</p>\n\n<p>At the time of deserialization, the <a href=\"http://java.sun.com/javase/6/docs/api/java/io/ObjectInputStream.html#readObject%28%29\"><code>readObject</code></a> method is called to perform any operations necessary to restore the state of the object back to the state at which the serialization occurred. Here, the thumbnail needs to be generated, so the <code>readObject</code> method is overridden so that the thumbnail will be generated by calling the <code>generateThumbnail</code> method.</p>\n\n<p>For additional information, the <a href=\"http://www.oracle.com/technetwork/articles/java/javaserial-1536170.html\">Discover the secrets of the Java Serialization API</a> article (which was originally available on the Sun Developer Network) has a section which discusses the use of and presents a scenario where the <code>transient</code> keyword is used to prevent serialization of certain fields.</p>\n    "
}, {
    "t": "How can I convert a stack trace to a string?",
    "l": "http://stackoverflow.com/questions/1149703/how-can-i-convert-a-stack-trace-to-a-string",
    "q": "\n\n<p>Easiest way to convert the result of <code>Throwable.getStackTrace()</code> to a string that depicts the stacktrace?</p>\n    ",
    "a": "\n<p>One can use the following method to convert an Exception stack trace to String. This class is available in Apache commons-lang-2.2.jar</p>\n\n<p><strong><a href=\"http://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/exception/ExceptionUtils.html#getStackTrace%28java.lang.Throwable%29\">org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(Throwable)</a></strong></p>\n    "
}, {
    "t": "How do you assert that a certain exception is thrown in JUnit 4 tests?",
    "l": "http://stackoverflow.com/questions/156503/how-do-you-assert-that-a-certain-exception-is-thrown-in-junit-4-tests",
    "q": "\n\n<p>How can I use JUnit4 idiomatically to test that some code throws an exception?</p>\n\n<p>While I can certainly do something like this:</p>\n\n<pre><code>@Test\npublic void testFooThrowsIndexOutOfBoundsException() {\n  boolean thrown = false;\n\n  try {\n    foo.doStuff();\n  } catch (IndexOutOfBoundsException e) {\n    thrown = true;\n  }\n\n  assertTrue(thrown);\n}\n</code></pre>\n\n<p>I recall that there is an annotation or an Assert.xyz or <em>something</em> that is far less kludgy and far more in-the-spirit of JUnit for these sorts of situations.</p>\n    ",
    "a": "\n<p>JUnit 4 has support for this:</p>\n\n<pre><code>@Test(expected=IndexOutOfBoundsException.class)\npublic void testIndexOutOfBoundsException() {\n    ArrayList emptyList = new ArrayList();\n    Object o = emptyList.get(0);\n}\n</code></pre>\n    "
}, {
    "t": "What is a JavaBean exactly?",
    "l": "http://stackoverflow.com/questions/3295496/what-is-a-javabean-exactly",
    "q": "\n\n<p>I understood, I think, that a \"Bean\" is a Java class with properties and getters/setters. As much as I understand, it is the equivalent of a C struct. Is that true?</p>\n\n<p>Also, is there a real <em>syntactic</em> difference between a bean and a regular class? Is there any special definition or an interface?</p>\n\n<p>Basically, why is there a term for this, it puzzles me... </p>\n\n<p><strong>Edit</strong>: If you can be so kind and add information regarding the <code>Serializable</code> interface, and what it means, to your answer, I'd be very grateful.</p>\n    ",
    "a": "\n<p>A JavaBean is just a <a href=\"http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html\">standard</a></p>\n\n<ol>\n<li>All properties private (use <a href=\"http://en.wikipedia.org/wiki/Mutator_method\">getters/setters</a>)</li>\n<li>A public <a href=\"http://en.wikipedia.org/wiki/Nullary_constructor\">no-argument constructor</a></li>\n<li>Implements <a href=\"http://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html\"><code>Serializable</code></a>.</li>\n</ol>\n\n<p>That's it. It's just a convention.  Lots of libraries depend on it though....</p>\n\n<p>With respect to <code>Serializable</code>, from the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html\">API documentation</a>:</p>\n\n<blockquote>\n  <p>Serializability of a class is enabled by the class implementing the\n  java.io.Serializable interface. Classes that do not implement this\n  interface will not have any of their state serialized or deserialized.\n  All subtypes of a serializable class are themselves serializable. The\n  serialization interface has no methods or fields and serves only to\n  identify the semantics of being serializable.</p>\n</blockquote>\n\n<p>In other words, serializable objects can be written to streams, and hence files, object databases, anything really.  </p>\n\n<p>Also, there is no syntactic difference between a JavaBean and another class -- a class defines a JavaBean if it follows the standards.</p>\n\n<p>There is a term for it because the standard allows libraries to programmatically do things with class instances you define in a predefined way. For example, if a library wants to stream any object you pass into it, it knows it can because your object is serializable (assuming the lib requires your objects be proper JavaBeans). </p>\n    "
}, {
    "t": "Get current stack trace in Java",
    "l": "http://stackoverflow.com/questions/1069066/get-current-stack-trace-in-java",
    "q": "\n\n<p>How do I get the current stack trace in Java, like how in <a href=\"http://en.wikipedia.org/wiki/.NET_Framework\">.NET</a> you can do <a href=\"http://msdn.microsoft.com/en-us/library/system.environment.stacktrace.aspx?ppud=4\"><code>Environment.StackTrace</code></a>?</p>\n\n<p>BTW, <code>Thread.dumpStack()</code> is not what I want - I want to get the <a href=\"http://en.wikipedia.org/wiki/Stack_trace\">stack trace</a> back, not print it out.</p>\n    ",
    "a": "\n<p>You can use <code><a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html\">Thread</a>.currentThread().getStackTrace()</code>.</p>\n\n<p>That returns an array of <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/StackTraceElement.html\"><code>StackTraceElement</code></a>s that represent the current stack trace of a program.</p>\n    "
}, {
    "t": "What exactly is Apache Camel?",
    "l": "http://stackoverflow.com/questions/8845186/what-exactly-is-apache-camel",
    "q": "\n\n<p>I don't understand what exactly <a href=\"http://camel.apache.org/index.html\">Camel</a> does.</p>\n\n<p>If you could give in 101 words an introduction to Camel:</p>\n\n<ul>\n<li>What exactly is it? </li>\n<li>How does it interact with an application written in Java? </li>\n<li>Is it something that goes together with the server? </li>\n<li>Is it an independent program? </li>\n</ul>\n\n<p><strong>Please explain what Camel is.</strong></p>\n    ",
    "a": "\n<p>If you have 5 to 10 minutes, I generally recommend people to read this <a href=\"http://java.dzone.com/articles/open-source-integration-apache\">Integration with Apache Camel</a> by Jonathan Anstey. It's a well written piece which gives a brief introduction to and overview of some of Camel's concepts, and it implements a use case with code samples. In it, Jonathan writes:</p>\n\n<p>\"Apache Camel is an open source Java framework that focuses on making integration easier and more accessible to developers. It does this by providing:</p>\n\n<ul>\n<li>concrete implementations of all the widely used <a href=\"http://www.enterpriseintegrationpatterns.com/\">Enterprise Integration Patterns</a> (EIPs)</li>\n<li>connectivity to a great variety of transports and APIs</li>\n<li>easy to use Domain Specific Languages (DSLs) to wire EIPs and transports together\"</li>\n</ul>\n\n<p>There is also a free chapter of <a href=\"http://manning.com/ibsen/\">Camel in Action</a> which introduces Camel in the first chapter. Jonathan is a co-author on that book with me.</p>\n    "
}, {
    "t": "How do servlets work? Instantiation, shared variables and multithreading",
    "l": "http://stackoverflow.com/questions/3106452/how-do-servlets-work-instantiation-shared-variables-and-multithreading",
    "q": "\n\n<p>Suppose, I have a webserver which holds numerous <code>Servlets</code>. For information passing among those <code>Servlets</code> I am getting the <code>Servlets</code> context and setting session variables. </p>\n\n<p>Now, if 2 or more users send request to this server then what happens to the session variables? Will they all be common for all the users or they will be different for each user. If they are different, then how was the server able to differentiate between different users?</p>\n\n<p>One more similar question, if there are <code>*n*</code> users accessing a particular <code>Servlets</code>, then this <code>Servlets</code> gets instantiated only the first time the first user accessed it or does it get instantiated for all the users separately?</p>\n    ",
    "a": "\n<h2>ServletContext</h2>\n\n<p>When the servletcontainer (like <a href=\"http://tomcat.apache.org\">Apache Tomcat</a>) starts up, it will deploy and load all webapplications. When a webapplication get loaded, the servletcontainer will create the <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/ServletContext.html\"><code>ServletContext</code></a> once and keep in server's memory. The webapp's <code>web.xml</code> will be parsed and every <code>&lt;servlet&gt;</code>, <code>&lt;filter&gt;</code> and <code>&lt;listener&gt;</code> found in <code>web.xml</code>, or annotated with respectively <code>@WebServlet</code>, <code>@WebFilter</code> and <code>@WebListener</code>, will be created once and kept in server's memory as well. For all filters, the <code>init()</code> method will also be invoked immediately. When the servletcontainer shuts down, it will unload all webapplications, invoke the <code>destroy()</code> of all initialized servlets and filters, and finally the <code>ServletContext</code> and all <code>Servlet</code>, <code>Filter</code> and <code>Listener</code> instances will be trashed.</p>\n\n<p>When the <code>Servlet</code> in question has a <code>&lt;servlet&gt;&lt;load-on-startup&gt;</code> or <code>@WebServlet(loadOnStartup)</code> value greater than <code>0</code>, then its <code>init()</code> method will also immediately be invoked during startup. Those servlets are initialized in the same order as \"load-on-startup\" value represents, or if they are the same, then the order in the <code>web.xml</code> or <code>@WebServlet</code> classloading. Or, if the \"load-on-startup\" value is absent, then the <code>init()</code> method will only be invoked on very first HTTP request hitting the servlet in question. </p>\n\n<h2>HttpServletRequest and HttpServletResponse</h2>\n\n<p>The servletcontainer is attached to a webserver which listens on HTTP requests on a certain port number, which is usually 8080 in development and 80 in production. When a client (user with a webbrowser) sends a HTTP request, the servletcontainer will create new <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletRequest.html\"><code>HttpServletRequest</code></a> and <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpServletResponse.html\"><code>HttpServletResponse</code></a> objects and pass it through the methods of the already-created <code>Filter</code> and <code>Servlet</code> instances whose <code>url-pattern</code> matches the request URL, all in the same thread. </p>\n\n<p>The request object provides access to all information of the HTTP request, such as the request headers and the request body. The response object provides facility to control and send the HTTP response the way you want, such as setting headers and the body (usually with HTML content from a JSP file). When the HTTP response is committed and finished, then both the request and response objects will be trashed.</p>\n\n<h2>HttpSession</h2>\n\n<p>When a client visits the webapp for the first time and/or the <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/HttpSession.html\"><code>HttpSession</code></a> is to be obtained for the first time by <code>request.getSession()</code>, then the servletcontainer will create it, generate a long and unique ID (which you can get by <code>session.getId()</code>) and store it in server's memory. The servletcontainer will also set a <a href=\"http://docs.oracle.com/javaee/7/api/javax/servlet/http/Cookie.html\"><code>Cookie</code></a> in the <code>Set-Cookie</code> header of the HTTP response with <code>JSESSIONID</code> as cookie name and the unique session ID as cookie value. </p>\n\n<p>As per the <a href=\"http://www.faqs.org/rfcs/rfc2965.html\">HTTP cookie specification</a> (a contract a decent webbrowser and webserver has to adhere), the client (the webbrowser) is required to send this cookie back in the subsequent requests in the <code>Cookie</code> header as long as the cookie is valid. Using browser builtin HTTP traffic monitor you can check them (press F12 in Chrome / Firefox23+ / IE9+ and check <em>Net/Network</em> tab). The servletcontainer will determine the <code>Cookie</code> header of every incoming HTTP request for the presence of the cookie with the name <code>JSESSIONID</code> and use its value (the session ID) to get the associated <code>HttpSession</code> from server's memory.</p>\n\n<p>The <code>HttpSession</code> lives until it has not been used for more than the <code>&lt;session-timeout&gt;</code> time, a setting you can specify in <code>web.xml</code>, which defaults to 30 minutes. So when the client doesn't visit the webapp anymore for over 30 minutes, then the servletcontainer will trash the session. Every subsequent request, even though with the cookie specified, will not have access to the same session anymore. The servletcontainer will create a new one. </p>\n\n<p>On the other hand, the session cookie on the client side has a default lifetime which is as long as the browser instance is running. So when the client closes the browser instance (all tabs/windows), then the session will be trashed at the client side. In a new browser instance the cookie associated with the session won't be sent anymore. A new <code>request.getSession()</code> would return a brand new <code>HttpSession</code> and set a cookie with a brand new session ID.</p>\n\n<h2>In a nutshell</h2>\n\n<ul>\n<li>The <code>ServletContext</code> lives as long as the webapp lives. It's been shared among <em>all</em> requests in <em>all</em> sessions.</li>\n<li>The <code>HttpSession</code> lives as long as the client is interacting with the webapp with the same browser instance and the session hasn't timed out at the server side yet. It's been shared among <em>all</em> requests in the <em>same</em> session.</li>\n<li>The <code>HttpServletRequest</code> and <code>HttpServletResponse</code> lives as long as the client has sent it until the complete response (the webpage) is arrived. It is <em>not</em> being shared elsewhere.</li>\n<li>Any <code>Servlet</code>, <code>Filter</code> and <code>Listener</code> lives as long as the webapp lives. They are being shared among <em>all</em> requests in <em>all</em> sessions.</li>\n<li>Any <code>attribute</code> which you set in <code>ServletContext</code>, <code>HttpServletRequest</code> and <code>HttpSession</code> will live as long as the object in question lives.</li>\n</ul>\n\n<h2>Threadsafety</h2>\n\n<p>That said, your major concern is possibly <em>threadsafety</em>. You should now have learnt that Servlets and filters are shared among all requests. That's the nice thing of Java, it's multithreaded and different threads (read: HTTP requests) can make use of the same instance. It would otherwise have been too expensive to recreate it on every request.</p>\n\n<p>But you should also realize that you should <strong>never</strong> assign any request or session scoped data as an <em>instance</em> variable of a servlet or filter. It will be shared among all other requests in other sessions. That's <em>threadunsafe</em>! The below example illustrates that:</p>\n\n<pre><code>public class ExampleServlet extends HttpServlet {\n\n    private Object thisIsNOTThreadSafe;\n\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        Object thisIsThreadSafe;\n\n        thisIsNOTThreadSafe = request.getParameter(\"foo\"); // BAD!! Shared among all requests!\n        thisIsThreadSafe = request.getParameter(\"foo\"); // OK, this is thread safe.\n    } \n}\n</code></pre>\n\n<h3>See also:</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2183974/difference-each-instance-of-servlet-and-each-thread-of-servlet-in-servlets\">Servlets and Multithreading</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp\">Difference between JSP and Servlet</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1700390/best-option-for-session-management-in-java\">Session management in Java</a></li>\n</ul>\n    "
}, {
    "t": "Access restriction on class due to restriction on required library rt.jar?",
    "l": "http://stackoverflow.com/questions/860187/access-restriction-on-class-due-to-restriction-on-required-library-rt-jar",
    "q": "\n\n<p>I'm attempting to compile Java 1.4 code that was created by IBM's WSDL2Java on Java5 without recreating the stubs and saw this error in Eclipse. I'm under the assumption that the stubs created should just compile as long as the runtime jars are available (they are).</p>\n\n<p><code>Access restriction: The type QName is not accessible due to restriction on required library C:\\Program Files\\Java\\jdk1.5.0_16\\jre\\lib\\rt.jar</code></p>\n\n<p>The full classname is <code>javax.xml.namespace.QName</code></p>\n\n<p>What exactly is going on here? </p>\n\n<p>Is this a case where I am trying to refactor a pig from sausage? Am I better off recreating the stubs?</p>\n    ",
    "a": "\n<p>There's another solution that also works. I found it on <a href=\"http://forums.dzone.com/eclipse/384-access-restriction-problems.html\">this forum</a>: </p>\n\n<ol>\n<li>Go to the <em>Build Path</em> settings in the project properties.</li>\n<li>Remove the <em>JRE System Library</em></li>\n<li>Add it back; Select <em>\"Add Library\"</em> and select the <em>JRE System Library</em>. The default worked for me.</li>\n</ol>\n\n<p>This works because you have multiple classes in different jar files. Removing and re-adding the JRE lib will make the right classes be first.\nIf you want a fundamental solution make sure you exclude the jar files with the same classes.</p>\n\n<p>For me I have: <code>javax.xml.soap.SOAPPart</code> in three different jars: <code>axis-saaj-1.4.jar</code>, <code>saaj-api-1.3.jar</code> and the <code>rt.jar</code></p>\n    "
}, {
    "t": "How can I permanently have line numbers in IntelliJ?",
    "l": "http://stackoverflow.com/questions/13751/how-can-i-permanently-have-line-numbers-in-intellij",
    "q": "\n\n<p>How can I permanently have line numbers in IntelliJ?</p>\n    ",
    "a": "\n<h2>IntelliJ 8.1.2 - 13.X</h2>\n\n<p>From IntelliJ 8.1.2 onwards, this option is in <strong>File | Settings</strong><sup>1</sup>. Within the <strong>IDE Settings</strong> section of that dialog, you'll find it under <strong>Editor | Appearance.</strong></p>\n\n<ol>\n<li>On a Mac, these are named <strong>IntelliJ IDEA | Preferences...</strong></li>\n</ol>\n\n<p><img src=\"http://i.stack.imgur.com/JVZlJ.jpg\" alt=\"enter image description here\"></p>\n\n<h2>IntelliJ 14.X</h2>\n\n<p>From version 14.0 onwards, the path to the setting dialog is slightly different, a <strong>General</strong> submenu has been added between <strong>Editor</strong> and <strong>Appearance</strong> as shown below</p>\n\n<p><img src=\"http://i.stack.imgur.com/9DL9q.png\" alt=\"enter image description here\"></p>\n    "
}, {
    "t": "How do I discover memory usage of my application in Android?",
    "l": "http://stackoverflow.com/questions/2298208/how-do-i-discover-memory-usage-of-my-application-in-android",
    "q": "\n\n<p>How can I find the memory used on my Android application, programmatically?</p>\n\n<p>I hope there is a way to do it. Plus, how do I get the free memory of the phone too?</p>\n    ",
    "a": "\n<p>Note that memory usage on modern operating systems like Linux is an <em>extremely</em> complicated and difficult to understand area.  In fact the chances of you actually correctly interpreting whatever numbers you get is extremely low.  (Pretty much every time I look at memory usage numbers with other engineers, there is always a long discussion about what they actually mean that only results in a vague conclusion.)</p>\n\n<p><strong>Note: we now have much more extensive documentation on <a href=\"http://developer.android.com/training/articles/memory.html\">Managing Your App's Memory</a> that covers much of the material here and is more up-to-date with the state of Android.</strong></p>\n\n<p>First thing is to probably read the last part of this article which has some discussion of how memory is managed on Android:</p>\n\n<p><a href=\"http://android-developers.blogspot.com/2010/02/service-api-changes-starting-with.html\">http://android-developers.blogspot.com/2010/02/service-api-changes-starting-with.html</a></p>\n\n<p>Now ActivityManager.getMemoryInfo() is our highest-level API for looking at overall memory usage.  This is mostly there to help an application gauge how close the system is coming to having no more memory for background processes, thus needing to start killing needed processes like services.  For pure Java applications, this should be of little use, since the Java heap limit is there in part to avoid one app from being able to stress the system to this point.</p>\n\n<p>Going lower-level, you can use the Debug API to get raw kernel-level information about memory usage: <a href=\"http://developer.android.com/intl/de/reference/android/os/Debug.html#getMemoryInfo(android.os.Debug.MemoryInfo)\">http://developer.android.com/intl/de/reference/android/os/Debug.html#getMemoryInfo(android.os.Debug.MemoryInfo)</a></p>\n\n<p>Note starting with 2.0 there is also an API, ActivityManager.getProcessMemoryInfo, to get this information about another process: <a href=\"http://developer.android.com/intl/de/reference/android/app/ActivityManager.html#getProcessMemoryInfo%28int%5B%5D%29\">http://developer.android.com/intl/de/reference/android/app/ActivityManager.html#getProcessMemoryInfo(int[])</a></p>\n\n<p>This returns a low-level MemoryInfo structure with all of this data:</p>\n\n<pre><code>    /** The proportional set size for dalvik. */\n    public int dalvikPss;\n    /** The private dirty pages used by dalvik. */\n    public int dalvikPrivateDirty;\n    /** The shared dirty pages used by dalvik. */\n    public int dalvikSharedDirty;\n\n    /** The proportional set size for the native heap. */\n    public int nativePss;\n    /** The private dirty pages used by the native heap. */\n    public int nativePrivateDirty;\n    /** The shared dirty pages used by the native heap. */\n    public int nativeSharedDirty;\n\n    /** The proportional set size for everything else. */\n    public int otherPss;\n    /** The private dirty pages used by everything else. */\n    public int otherPrivateDirty;\n    /** The shared dirty pages used by everything else. */\n    public int otherSharedDirty;\n</code></pre>\n\n<p>But as to what the difference is between \"Pss\", \"PrivateDirty\", and \"SharedDirty\"...  well now the fun begins.</p>\n\n<p>A lot of memory in Android (and Linux systems in general) is actually shared across multiple processes.  So how much memory a processes uses is really not clear.  Add on top of that paging out to disk (let alone swap which we don't use on Android) and it is even less clear.</p>\n\n<p>Thus if you were to take all of the physical RAM actually mapped in to each process, and add up all of the processes, you would probably end up with a number much greater than the actual total RAM.</p>\n\n<p>The Pss number is a metric the kernel computes that takes into account memory sharing -- basically each page of RAM in a process is scaled by a ratio of the number of other processes also using that page.  This way you can (in theory) add up the pss across all processes to see the total RAM they are using, and compare pss between processes to get a rough idea of their relative weight.</p>\n\n<p>The other interesting metric here is PrivateDirty, which is basically the amount of RAM inside the process that can not be paged to disk (it is not backed by the same data on disk), and is not shared with any other processes.  Another way to look at this is the RAM that will become available to the system when that process goes away (and probably quickly subsumed into caches and other uses of it).</p>\n\n<p>That is pretty much the SDK APIs for this.  However there is more you can do as a developer with your device.</p>\n\n<p>Using adb, there is a lot of information you can get about the memory use of a running system.  A common one is the command \"adb shell dumpsys meminfo\" which will spit out a bunch of information about the memory use of each Java process, containing the above info as well as a variety of other things.  You can also tack on the name or pid of a single process to see, for example \"adb shell dumpsys meminfo system\" give me the system process:</p>\n\n<pre>** MEMINFO in pid 890 [system] **\n                    native   dalvik    other    total\n            size:    10940     7047      N/A    17987\n       allocated:     8943     5516      N/A    14459\n            free:      336     1531      N/A     1867\n           (Pss):     4585     9282    11916    25783\n  (shared dirty):     2184     3596      916     6696\n    (priv dirty):     4504     5956     7456    17916\n\n Objects\n           Views:      149        ViewRoots:        4\n     AppContexts:       13       Activities:        0\n          Assets:        4    AssetManagers:        4\n   Local Binders:      141    Proxy Binders:      158\nDeath Recipients:       49\n OpenSSL Sockets:        0\n\n SQL\n            heap:      205          dbFiles:        0\n       numPagers:        0   inactivePageKB:        0\n    activePageKB:        0\n</pre>\n\n<p>The top section is the main one, where \"size\" is the total size in address space of a particular heap, \"allocated\" is the kb of actual allocations that heap thinks it has, \"free\" is the remaining kb free the heap has for additional allocations, and \"pss\" and \"priv dirty\" are the same as discussed before specific to pages associated with each of the heaps.</p>\n\n<p>If you just want to look at memory usage across all processes, you can use the command \"adb shell procrank\".  Output of this on the same system looks like:</p>\n\n<pre>  PID      Vss      Rss      Pss      Uss  cmdline\n  890   84456K   48668K   25850K   21284K  system_server\n 1231   50748K   39088K   17587K   13792K  com.android.launcher2\n  947   34488K   28528K   10834K    9308K  com.android.wallpaper\n  987   26964K   26956K    8751K    7308K  com.google.process.gapps\n  954   24300K   24296K    6249K    4824K  com.android.phone\n  948   23020K   23016K    5864K    4748K  com.android.inputmethod.latin\n  888   25728K   25724K    5774K    3668K  zygote\n  977   24100K   24096K    5667K    4340K  android.process.acore\n...\n   59     336K     332K      99K      92K  /system/bin/installd\n   60     396K     392K      93K      84K  /system/bin/keystore\n   51     280K     276K      74K      68K  /system/bin/servicemanager\n   54     256K     252K      69K      64K  /system/bin/debuggerd\n</pre>\n\n<p>Here the Vss and Rss columns are basically noise (these are the straight-forward address space and RAM usage of a process, where if you add up the RAM usage across processes you get an ridiculously large number).</p>\n\n<p>Pss is as we've seen before, and Uss is Priv Dirty.</p>\n\n<p>Interesting thing to note here: Pss and Uss are slightly (or more than slightly) different than what we saw in meminfo.  Why is that?  Well procrank uses a different kernel mechanism to collect its data than meminfo does, and they give slightly different results.  Why is that?  Honestly I haven't a clue.  I believe procrank may be the more accurate one...  but really, this just leave the point: \"take any memory info you get with a grain of salt; often a very large grain.\"</p>\n\n<p>Finally there is the command \"adb shell cat /proc/meminfo\" that gives a summary of the overall memory usage of the system.  There is a lot of data here, only the first few numbers worth discussing (and the remaining ones understood by few people, and my questions of those few people about them often resulting in conflicting explanations):</p>\n\n<pre>MemTotal:         395144 kB\nMemFree:          184936 kB\nBuffers:             880 kB\nCached:            84104 kB\nSwapCached:            0 kB\n</pre>\n\n<p>MemTotal is the total amount of memory available to the kernel and user space (often less than the actual physical RAM of the device, since some of that RAM is needed for the radio, DMA buffers, etc).</p>\n\n<p>MemFree is the amount of RAM that is not being used at all.  The number you see here is very high; typically on an Android system this would be only a few MB, since we try to use available memory to keep processes running</p>\n\n<p>Cached is the RAM being used for filesystem caches and other such things.  Typical systems will need to have 20MB or so for this to avoid getting into bad paging states; the Android out of memory killer is tuned for a particular system to make sure that background processes are killed before the cached RAM is consumed too much by them to result in such paging.</p>\n    "
}, {
    "t": "How can I Initialize a static Map?",
    "l": "http://stackoverflow.com/questions/507602/how-can-i-initialize-a-static-map",
    "q": "\n\n<p>How would you initialise a static Map in Java?</p>\n\n<p>Method one: Static initializer <br>\nMethod two: instance initialiser (anonymous subclass)\nor\nsome other method?</p>\n\n<p>What are the pros and cons of each?</p>\n\n<p>Here is an example illustrating two methods:</p>\n\n<pre><code>import java.util.HashMap;\nimport java.util.Map;\n\npublic class Test {\n    private static final Map&lt;Integer, String&gt; myMap = new HashMap&lt;Integer, String&gt;();\n    static {\n        myMap.put(1, \"one\");\n        myMap.put(2, \"two\");\n    }\n\n    private static final Map&lt;Integer, String&gt; myMap2 = new HashMap&lt;Integer, String&gt;(){\n        {\n            put(1, \"one\");\n            put(2, \"two\");\n        }\n    };\n}\n</code></pre>\n    ",
    "a": "\n<p>The instance initialiser is just syntactic sugar in this case, right? I don't see why you need an extra anonymous class just to initialize. And it won't work if the class being created is final.</p>\n\n<p>You can create an immutable map using a static initialiser too:</p>\n\n<pre><code>public class Test {\n    private static final Map&lt;Integer, String&gt; myMap;\n    static {\n        Map&lt;Integer, String&gt; aMap = ....;\n        aMap.put(1, \"one\");\n        aMap.put(2, \"two\");\n        myMap = Collections.unmodifiableMap(aMap);\n    }\n}\n</code></pre>\n    "
}, {
    "t": "Uncatchable ChuckNorrisException",
    "l": "http://stackoverflow.com/questions/13883166/uncatchable-chucknorrisexception",
    "q": "\n\n<p>Is it possible to construct a snippet of code in <a href=\"http://en.wikipedia.org/wiki/Java_%28programming_language%29\">Java</a> that would make a hypothetical <code>java.lang.ChuckNorrisException</code> uncatchable?</p>\n\n<p>Thoughts that came to mind are using for example interceptors or <a href=\"http://en.wikipedia.org/wiki/Aspect-oriented_programming\">aspect-oriented programming</a>.</p>\n    ",
    "a": "\n<p>I haven't tried this, so I don't know if the <a href=\"http://en.wikipedia.org/wiki/Java_virtual_machine\">JVM</a> would restrict something like this, but maybe you could compile code which throws <code>ChuckNorrisException</code>, but at runtime provide a class definition of <code>ChuckNorrisException</code> which <em>does not extend Throwable</em>.</p>\n\n<p>UPDATE:</p>\n\n<p>It doesn't work. It generates a verifier error:</p>\n\n<pre><code>Exception in thread \"main\" java.lang.VerifyError: (class: TestThrow, method: ma\\\nin signature: ([Ljava/lang/String;)V) Can only throw Throwable objects\nCould not find the main class: TestThrow.  Program will exit.\n</code></pre>\n\n<p>UPDATE 2:</p>\n\n<p>Actually, you can get this to work if you disable the byte code verifier! (<code>-Xverify:none</code>)</p>\n\n<p>UPDATE 3:</p>\n\n<p>For those following from home, here is the full script:</p>\n\n<p>Create the following classes:</p>\n\n<pre><code>public class ChuckNorrisException\n    extends RuntimeException // &lt;- Comment out this line on second compilation\n{\n    public ChuckNorrisException() { }\n}\n\npublic class TestVillain {\n    public static void main(String[] args) {\n        try {\n            throw new ChuckNorrisException();\n        }\n        catch(Throwable t) {\n            System.out.println(\"Gotcha!\");\n        }\n        finally {\n            System.out.println(\"The end.\");\n        }\n    }\n}\n</code></pre>\n\n<p>Compile classes:</p>\n\n<pre><code>javac -cp . TestVillain.java ChuckNorrisException.java\n</code></pre>\n\n<p>Run:</p>\n\n<pre><code>java -cp . TestVillain\nGotcha!\nThe end.\n</code></pre>\n\n<p>Comment out \"extends RuntimeException\" and <em>recompile <code>ChuckNorrisException.java</code> only</em> :</p>\n\n<pre><code>javac -cp . ChuckNorrisException.java\n</code></pre>\n\n<p>Run:</p>\n\n<pre><code>java -cp . TestVillain\nException in thread \"main\" java.lang.VerifyError: (class: TestVillain, method: main signature: ([Ljava/lang/String;)V) Can only throw Throwable objects\nCould not find the main class: TestVillain.  Program will exit.\n</code></pre>\n\n<p>Run without verification:</p>\n\n<pre><code>java -Xverify:none -cp . TestVillain\nThe end.\nException in thread \"main\"\n</code></pre>\n    "
}, {
    "t": "How can I generate an MD5 hash?",
    "l": "http://stackoverflow.com/questions/415953/how-can-i-generate-an-md5-hash",
    "q": "\n\n<p>Is there any method to generate MD5 hash of a string in Java?</p>\n    ",
    "a": "\n<p><a href=\"http://download.oracle.com/javase/6/docs/api/java/security/MessageDigest.html\">MessageDigest</a> is your friend. Call <a href=\"http://download.oracle.com/javase/6/docs/api/java/security/MessageDigest.html#getInstance%28java.lang.String%29\">getInstance(\"MD5\")</a> to get an MD5 message digest you can use.</p>\n    "
}, {
    "t": "Can I add jars to maven 2 build classpath without installing them?",
    "l": "http://stackoverflow.com/questions/364114/can-i-add-jars-to-maven-2-build-classpath-without-installing-them",
    "q": "\n\n<p>Maven2 is driving me crazy during the experimentation / quick and dirty mock-up phase of development.  </p>\n\n<p>I have a <code>pom.xml</code> file that defines the dependencies for the web-app framework I want to use, and I can quickly generate starter projects from that file. However, sometimes I want to link to a 3rd party library that doesn't already have a <code>pom.xml</code> file defined, so rather than create the <code>pom.xml</code> file for the 3rd party lib by hand and install it, and add the dependency to my <code>pom.xml</code>, I would just like to tell Maven: \"In addition to my defined dependencies, include any jars that are in <code>/lib</code> too.\"  </p>\n\n<p>It seems like this ought to be simple, but if it is, I am missing something.</p>\n\n<p>Any pointers on how to do this are greatly appreciated. Short of that, if there is a simple way to point maven to a <code>/lib</code> directory and easily create a <code>pom.xml</code> with all the enclosed jars mapped to a single dependency which I could then name / install and link to in one fell swoop would also suffice.</p>\n    ",
    "a": "\n<h1>Problems of popular approaches</h1>\n\n<p>Most of the answers you'll find around the internet will suggest you to either install the dependency to your local repository or specify a \"system\" scope in the <code>pom</code> and distribute the dependency with the source of your project. But both of these solutions are actually flawed.</p>\n\n<h2>Why you shouldn't apply the \"Install to Local Repo\" approach</h2>\n\n<p>When you install a dependency to your local repository it remains there. Your distribution artifact will do fine as long as it has access to this repository. The problem is in most cases this repository will reside on your local machine, so there'll be no way to resolve this dependency on any other machine. Clearly making your artifact depend on a specific machine is not a way to handle things. Otherwise this dependency will have to be locally installed on every machine working with that project which is not any better.</p>\n\n<h2>Why you shouldn't apply the \"System Scope\" approach</h2>\n\n<p>The jars you depend on with the \"System Scope\" approach neither get installed to any repository or attached to your target packages. That's why your distribution package won't have a way to resolve that dependency when used. That I believe was the reason why the use of system scope even got deprecated. Anyway you don't want to rely on a deprecated feature.</p>\n\n<h1>The static in-project repository solution</h1>\n\n<p>After putting this in your <code>pom</code>:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;repository&gt;\n    &lt;id&gt;repo&lt;/id&gt;\n    &lt;releases&gt;\n        &lt;enabled&gt;true&lt;/enabled&gt;\n        &lt;checksumPolicy&gt;ignore&lt;/checksumPolicy&gt;\n    &lt;/releases&gt;\n    &lt;snapshots&gt;\n        &lt;enabled&gt;false&lt;/enabled&gt;\n    &lt;/snapshots&gt;\n    &lt;url&gt;file://${project.basedir}/repo&lt;/url&gt;\n&lt;/repository&gt;\n</code></pre>\n\n<p>for each artifact with a group id of form <code>x.y.z</code> Maven will include the following location inside your project dir in its search for artifacts:</p>\n\n<pre><code>repo/\n| - x/\n|   | - y/\n|   |   | - z/\n|   |   |   | - ${artifactId}/\n|   |   |   |   | - ${version}/\n|   |   |   |   |   | - ${artifactId}-${version}.jar\n</code></pre>\n\n<p>To elaborate more on this you can read <a href=\"http://blog.dub.podval.org/2010/01/maven-in-project-repository.html\">this blog post</a>.</p>\n\n<h2>Use Maven to install to project repo</h2>\n\n<p>Instead of creating this structure by hand I recommend to use a Maven plugin to install your jars as artifacts. So, to install an artifact to an in-project repository under <code>repo</code> folder execute:</p>\n\n<pre><code>mvn install:install-file -DlocalRepositoryPath=repo -DcreateChecksum=true -Dpackaging=jar -Dfile=[your-jar] -DgroupId=[...] -DartifactId=[...] -Dversion=[...]\n</code></pre>\n\n<p>If you'll choose this approach you'll be able to simplify the repository declaration in <code>pom</code> to:</p>\n\n<pre class=\"lang-xml prettyprint-override\"><code>&lt;repository&gt;\n    &lt;id&gt;repo&lt;/id&gt;\n    &lt;url&gt;file://${project.basedir}/repo&lt;/url&gt;\n&lt;/repository&gt;\n</code></pre>\n\n<h2>A helper script</h2>\n\n<p>Since executing installation command for each lib is kinda annoying and definitely error prone, I've created a <a href=\"https://github.com/nikita-volkov/install-to-project-repo\">utility script</a> which automatically installs all the jars from a <code>lib</code> folder to a project repository, while automatically resolving all metadata (groupId, artifactId and etc.) from names of files. The script also prints out the dependencies xml for you to copy-paste in your <code>pom</code>.</p>\n\n<h2>Include the dependencies in your target package</h2>\n\n<p>When you'll have your in-project repository created you'll have solved a problem of distributing the dependencies of the project with its source, but since then your project's target artifact will depend on non-published jars, so when you'll install it to a repository it will have unresolvable dependencies. </p>\n\n<p>To beat this problem I suggest to include these dependencies in your target package. This you can do with either the <a href=\"http://stackoverflow.com/a/1729094/485115\">Assembly Plugin</a> or better with the <a href=\"http://code.google.com/p/onejar-maven-plugin/\">OneJar Plugin</a>. The official documentaion on OneJar is easy to grasp.</p>\n    "
}, {
    "t": "Download a file with Android, and showing the progress in a ProgressDialog",
    "l": "http://stackoverflow.com/questions/3028306/download-a-file-with-android-and-showing-the-progress-in-a-progressdialog",
    "q": "\n\n<p>I am trying to write a simple application that gets updated. For this I need a simple function that can download a file and <em>show the current progress</em> in a <code>ProgressDialog</code>. I know how to do the <code>ProgressDialog</code>, but I'm not sure how to display the current progress and how to download the file in the first place.</p>\n    ",
    "a": "\n<p>There are many ways to download files. Following I will post most common ways; it is up to you to decide which method is better for your app.</p>\n\n<h1>1. Use <code>AsyncTask</code> and show the download progress in a dialog</h1>\n\n<p>This method will allow you to execute some background processes and update the UI at the same time (in this case, we'll update a progress bar).</p>\n\n<p>This is an example code:</p>\n\n<pre><code>// declare the dialog as a member field of your activity\nProgressDialog mProgressDialog;\n\n// instantiate it within the onCreate method\nmProgressDialog = new ProgressDialog(YourActivity.this);\nmProgressDialog.setMessage(\"A message\");\nmProgressDialog.setIndeterminate(true);\nmProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\nmProgressDialog.setCancelable(true);\n\n// execute this when the downloader must be fired\nfinal DownloadTask downloadTask = new DownloadTask(YourActivity.this);\ndownloadTask.execute(\"the url to the file you want to download\");\n\nmProgressDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {\n    @Override\n    public void onCancel(DialogInterface dialog) {\n        downloadTask.cancel(true);\n    }\n});\n</code></pre>\n\n<p>The <code>AsyncTask</code> will look like this:</p>\n\n<pre><code>// usually, subclasses of AsyncTask are declared inside the activity class.\n// that way, you can easily modify the UI thread from here\nprivate class DownloadTask extends AsyncTask&lt;String, Integer, String&gt; {\n\n    private Context context;\n    private PowerManager.WakeLock mWakeLock;\n\n    public DownloadTask(Context context) {\n        this.context = context;\n    }\n\n    @Override\n    protected String doInBackground(String... sUrl) {\n        InputStream input = null;\n        OutputStream output = null;\n        HttpURLConnection connection = null;\n        try {\n            URL url = new URL(sUrl[0]);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.connect();\n\n            // expect HTTP 200 OK, so we don't mistakenly save error report\n            // instead of the file\n            if (connection.getResponseCode() != HttpURLConnection.HTTP_OK) {\n                return \"Server returned HTTP \" + connection.getResponseCode()\n                        + \" \" + connection.getResponseMessage();\n            }\n\n            // this will be useful to display download percentage\n            // might be -1: server did not report the length\n            int fileLength = connection.getContentLength();\n\n            // download the file\n            input = connection.getInputStream();\n            output = new FileOutputStream(\"/sdcard/file_name.extension\");\n\n            byte data[] = new byte[4096];\n            long total = 0;\n            int count;\n            while ((count = input.read(data)) != -1) {\n                // allow canceling with back button\n                if (isCancelled()) {\n                    input.close();\n                    return null;\n                }\n                total += count;\n                // publishing the progress....\n                if (fileLength &gt; 0) // only if total length is known\n                    publishProgress((int) (total * 100 / fileLength));\n                output.write(data, 0, count);\n            }\n        } catch (Exception e) {\n            return e.toString();\n        } finally {\n            try {\n                if (output != null)\n                    output.close();\n                if (input != null)\n                    input.close();\n            } catch (IOException ignored) {\n            }\n\n            if (connection != null)\n                connection.disconnect();\n        }\n        return null;\n    }\n</code></pre>\n\n<p>The method above (<code>doInBackground</code>) runs always on a background thread. You shouldn't do any UI tasks there. On the other hand, the <code>onProgressUpdate</code> and <code>onPreExecute</code> run on the UI thread, so there you can change the progress bar:</p>\n\n<pre><code>    @Override\n    protected void onPreExecute() {\n        super.onPreExecute();\n        // take CPU lock to prevent CPU from going off if the user \n        // presses the power button during download\n        PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);\n        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,\n             getClass().getName());\n        mWakeLock.acquire();\n        mProgressDialog.show();\n    }\n\n    @Override\n    protected void onProgressUpdate(Integer... progress) {\n        super.onProgressUpdate(progress);\n        // if we get here, length is known, now set indeterminate to false\n        mProgressDialog.setIndeterminate(false);\n        mProgressDialog.setMax(100);\n        mProgressDialog.setProgress(progress[0]);\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n        mWakeLock.release();\n        mProgressDialog.dismiss();\n        if (result != null)\n            Toast.makeText(context,\"Download error: \"+result, Toast.LENGTH_LONG).show();\n        else\n            Toast.makeText(context,\"File downloaded\", Toast.LENGTH_SHORT).show();\n    }\n</code></pre>\n\n<p>For this to run, you need the WAKE_LOCK permission.</p>\n\n<pre><code>&lt;uses-permission android:name=\"android.permission.WAKE_LOCK\" /&gt;\n</code></pre>\n\n<h1>2. Download from Service</h1>\n\n<p>The big question here is: <em>how do I update my activity from a service?</em>. In the next example we are going to use two classes you may not be aware of: <code>ResultReceiver</code> and <code>IntentService</code>. <code>ResultReceiver</code> is the one that will allow us to update our thread from a service; <code>IntentService</code> is a subclass of <code>Service</code> which spawns a thread to do background work from there (you should know that a <code>Service</code> runs actually in the same thread of your app; when you extends <code>Service</code>, you must manually spawn new threads to run CPU blocking operations).</p>\n\n<p>Download service can look like this:</p>\n\n<pre><code>public class DownloadService extends IntentService {\n    public static final int UPDATE_PROGRESS = 8344;\n    public DownloadService() {\n        super(\"DownloadService\");\n    }\n    @Override\n    protected void onHandleIntent(Intent intent) {\n        String urlToDownload = intent.getStringExtra(\"url\");\n        ResultReceiver receiver = (ResultReceiver) intent.getParcelableExtra(\"receiver\");\n        try {\n            URL url = new URL(urlToDownload);\n            URLConnection connection = url.openConnection();\n            connection.connect();\n            // this will be useful so that you can show a typical 0-100% progress bar\n            int fileLength = connection.getContentLength();\n\n            // download the file\n            InputStream input = new BufferedInputStream(connection.getInputStream());\n            OutputStream output = new FileOutputStream(\"/sdcard/BarcodeScanner-debug.apk\");\n\n            byte data[] = new byte[1024];\n            long total = 0;\n            int count;\n            while ((count = input.read(data)) != -1) {\n                total += count;\n                // publishing the progress....\n                Bundle resultData = new Bundle();\n                resultData.putInt(\"progress\" ,(int) (total * 100 / fileLength));\n                receiver.send(UPDATE_PROGRESS, resultData);\n                output.write(data, 0, count);\n            }\n\n            output.flush();\n            output.close();\n            input.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        Bundle resultData = new Bundle();\n        resultData.putInt(\"progress\" ,100);\n        receiver.send(UPDATE_PROGRESS, resultData);\n    }\n}\n</code></pre>\n\n<p>Add the service to your manifest:</p>\n\n<pre><code>&lt;service android:name=\".DownloadService\"/&gt;\n</code></pre>\n\n<p>And the activity will look like this:</p>\n\n<pre><code>// initialize the progress dialog like in the first example\n\n// this is how you fire the downloader\nmProgressDialog.show();\nIntent intent = new Intent(this, DownloadService.class);\nintent.putExtra(\"url\", \"url of the file to download\");\nintent.putExtra(\"receiver\", new DownloadReceiver(new Handler()));\nstartService(intent);\n</code></pre>\n\n<p>Here is were <code>ResultReceiver</code> comes to play:</p>\n\n<pre><code>private class DownloadReceiver extends ResultReceiver{\n    public DownloadReceiver(Handler handler) {\n        super(handler);\n    }\n\n    @Override\n    protected void onReceiveResult(int resultCode, Bundle resultData) {\n        super.onReceiveResult(resultCode, resultData);\n        if (resultCode == DownloadService.UPDATE_PROGRESS) {\n            int progress = resultData.getInt(\"progress\");\n            mProgressDialog.setProgress(progress);\n            if (progress == 100) {\n                mProgressDialog.dismiss();\n            }\n        }\n    }\n}\n</code></pre>\n\n<h2>2.1 Use Groundy library</h2>\n\n<p><a href=\"http://casidiablo.github.com/groundy\"><strong>Groundy</strong></a> is a library that basically helps you run pieces of code in a background service, and it is based on the <code>ResultReceiver</code> concept shown above. This library is <strong>deprecated</strong> at the moment. This is how the <strong>whole</strong> code would look like:</p>\n\n<p>The activity where you are showing the dialog...</p>\n\n<pre><code>public class MainActivity extends Activity {\n\n    private ProgressDialog mProgressDialog;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n\n        findViewById(R.id.btn_download).setOnClickListener(new View.OnClickListener() {\n            public void onClick(View view) {\n                String url = ((EditText) findViewById(R.id.edit_url)).getText().toString().trim();\n                Bundle extras = new Bundler().add(DownloadTask.PARAM_URL, url).build();\n                Groundy.create(DownloadExample.this, DownloadTask.class)\n                        .receiver(mReceiver)\n                        .params(extras)\n                        .queue();\n\n                mProgressDialog = new ProgressDialog(MainActivity.this);\n                mProgressDialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);\n                mProgressDialog.setCancelable(false);\n                mProgressDialog.show();\n            }\n        });\n    }\n\n    private ResultReceiver mReceiver = new ResultReceiver(new Handler()) {\n        @Override\n        protected void onReceiveResult(int resultCode, Bundle resultData) {\n            super.onReceiveResult(resultCode, resultData);\n            switch (resultCode) {\n                case Groundy.STATUS_PROGRESS:\n                    mProgressDialog.setProgress(resultData.getInt(Groundy.KEY_PROGRESS));\n                    break;\n                case Groundy.STATUS_FINISHED:\n                    Toast.makeText(DownloadExample.this, R.string.file_downloaded, Toast.LENGTH_LONG);\n                    mProgressDialog.dismiss();\n                    break;\n                case Groundy.STATUS_ERROR:\n                    Toast.makeText(DownloadExample.this, resultData.getString(Groundy.KEY_ERROR), Toast.LENGTH_LONG).show();\n                    mProgressDialog.dismiss();\n                    break;\n            }\n        }\n    };\n}\n</code></pre>\n\n<p>A <code>GroundyTask</code> implementation used by <strong>Groundy</strong> to download the file and show the progress:</p>\n\n<pre><code>public class DownloadTask extends GroundyTask {    \n    public static final String PARAM_URL = \"com.groundy.sample.param.url\";\n\n    @Override\n    protected boolean doInBackground() {\n        try {\n            String url = getParameters().getString(PARAM_URL);\n            File dest = new File(getContext().getFilesDir(), new File(url).getName());\n            DownloadUtils.downloadFile(getContext(), url, dest, DownloadUtils.getDownloadListenerForTask(this));\n            return true;\n        } catch (Exception pokemon) {\n            return false;\n        }\n    }\n}\n</code></pre>\n\n<p>And just add this to the manifest:</p>\n\n<pre><code>&lt;service android:name=\"com.codeslap.groundy.GroundyService\"/&gt;\n</code></pre>\n\n<p>It couldn't be easier I think. Just grab the latest jar <a href=\"https://github.com/casidiablo/groundy/downloads\">from Github</a> and you are ready to go. Keep in mind that <strong>Groundy</strong>'s main purpose is to make calls to external REST apis in a background service and post results to the UI with easily. If you are doing something like that in your app, it could be really useful.</p>\n\n<h2>2.2 Use <a href=\"https://github.com/koush/ion\">https://github.com/koush/ion</a></h2>\n\n<h1>3. Use <code>DownloadManager</code> class (<code>GingerBread</code> and newer only)</h1>\n\n<p>This method is awesome, you do not have to worry about downloading the file manually, handle threads, streams, etc. GingerBread brought a new feature: <code>DownloadManager</code> which allows you to download files easily and delegate the hard work to the system.</p>\n\n<p>First, let's see a utility method:</p>\n\n<pre><code>/**\n * @param context used to check the device version and DownloadManager information\n * @return true if the download manager is available\n */\npublic static boolean isDownloadManagerAvailable(Context context) {\n\n    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.GINGERBREAD) {\n        return true;\n    }\n    return false;\n}\n</code></pre>\n\n<p>Method's name explains it all. Once you are sure <code>DownloadManager</code> is available, you can do something like this:</p>\n\n<pre><code>String url = \"url you want to download\";\nDownloadManager.Request request = new DownloadManager.Request(Uri.parse(url));\nrequest.setDescription(\"Some descrition\");\nrequest.setTitle(\"Some title\");\n// in order for this if to run, you must use the android 3.2 to compile your app\nif (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) {\n    request.allowScanningByMediaScanner();\n    request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);\n}\nrequest.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, \"name-of-the-file.ext\");\n\n// get download service and enqueue file\nDownloadManager manager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);\nmanager.enqueue(request);\n</code></pre>\n\n<p>Download progress will be showing in the notification bar.</p>\n\n<h1>Final thoughts</h1>\n\n<p>First and second methods are just the tip of the iceberg. There are lots of things you have to keep in mind if you want your app to be robust. Here is a brief list:</p>\n\n<ul>\n<li>You must check whether user has an internet connection available</li>\n<li>Make sure you have the right permissions (<code>INTERNET</code> and <code>WRITE_EXTERNAL_STORAGE</code>); also <code>ACCESS_NETWORK_STATE</code> if you want to check internet availability.</li>\n<li>Make sure the directory were you are going to download files exist and has write permissions.</li>\n<li>If download is too big you may want to implement a way to resume the download if previous attempts failed.</li>\n<li>Users will be grateful if you allow them to interrupt the download.</li>\n</ul>\n\n<p>Unless you want to have full control over the download process, I highly recommend using <code>DownloadManager</code> which already handles most of the items listed above.</p>\n    "
}, {
    "t": "Update Eclipse with Android development tools v. 23",
    "l": "http://stackoverflow.com/questions/24437564/update-eclipse-with-android-development-tools-v-23",
    "q": "\n\n<p>I updated Eclipse with the new SDK tools (rev 23) but now when Eclipse starts I receive the error:</p>\n\n<blockquote>\n  <p>This Android SDK requires Android Developer Toolkit version 23.0.0 or above. Current version is 22.6.3.v201404151837-1123206. Please update ADT to the latest version.</p>\n</blockquote>\n\n<p>No updates were found with <strong>\"Check for updates\"</strong>. If I try <strong>\"Install new software\"</strong>, I can see the version 23, but I can't upgrade due to the following error:</p>\n\n<pre><code>Cannot complete the install because of a conflicting dependency.\nSoftware being installed: Android Development Tools 23.0.0.1245622 (com.android.ide.eclipse.adt.feature.feature.group 23.0.0.1245622)\nSoftware currently installed: Android Developer Tools 22.2.1.v201309180102-833290 (com.android.ide.eclipse.adt.package.product 22.2.1.v201309180102-833290)\nOnly one of the following can be installed at once: \n    ADT Package 22.6.3.v201404151837-1123206 (com.android.ide.eclipse.adt.package 22.6.3.v201404151837-1123206)\n    ADT Package 23.0.0.1245622 (com.android.ide.eclipse.adt.package 23.0.0.1245622)\nCannot satisfy dependency:\n    From: Android Development Tools 23.0.0.1245622 (com.android.ide.eclipse.adt.feature.feature.group 23.0.0.1245622)\n    To: com.android.ide.eclipse.adt.package [23.0.0.1245622]\nCannot satisfy dependency:\n    From: Android Development Tools 22.6.3.v201404151837-1123206 (com.android.ide.eclipse.adt.feature.group 22.6.3.v201404151837-1123206)\n    To: com.android.ide.eclipse.adt.package [22.6.3.v201404151837-1123206]\nCannot satisfy dependency:\n    From: ADT Package 22.2.1.v201309180102-833290 (com.android.ide.eclipse.adt.package.feature.group 22.2.1.v201309180102-833290)\n    To: com.android.ide.eclipse.adt.feature.group 22.2.0\nCannot satisfy dependency:\n    From: Android Developer Tools 22.2.1.v201309180102-833290 (com.android.ide.eclipse.adt.package.product 22.2.1.v201309180102-833290)\n    To: com.android.ide.eclipse.adt.package.feature.group [22.2.1.v201309180102-833290]\n</code></pre>\n\n<p>After download of the last ADT from the web site, it seems there's another problem.\nWith SDK Tools rev. 23 proguard is not installed, the folder SDK <code>dir/tools/proguard</code> is missing and other tools are missing. This version contains several bugs.</p>\n    ",
    "a": "\n<p><a href=\"http://code.google.com/p/android/issues/detail?id=72419\">Google response</a>:</p>\n\n<p><strong>This is a packaging bug. The entire proguard file is missing. We'll have an update asap, but until then just copy it over from a previous version of the tools:</strong></p>\n\n<ul>\n<li><a href=\"http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz\">http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz</a></li>\n<li><a href=\"http://dl.google.com/android/android-sdk_r22.6.2-windows.zip\">http://dl.google.com/android/android-sdk_r22.6.2-windows.zip</a></li>\n<li><a href=\"http://dl.google.com/android/android-sdk_r22.6.2-macosx.zip\">http://dl.google.com/android/android-sdk_r22.6.2-macosx.zip</a></li>\n</ul>\n\n<p>and copy over the following files:</p>\n\n<ul>\n<li>tools/hprof-conv </li>\n<li>tools/support/annotations.jar </li>\n<li>tools/proguard</li>\n</ul>\n\n<p>So at the end if you started from a new ADT copy by hand the files :)</p>\n\n<p><strong>Edit:</strong> with the latest ADT release, the bundle should now work with auto-update, so <strong>install these new versions</strong>:</p>\n\n<ul>\n<li>linux 64 bit vm: <a href=\"http://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip\">http://dl.google.com/android/adt/adt-bundle-linux-x86_64-20140702.zip</a></li>\n<li>linux 32 bit vm: <a href=\"http://dl.google.com/android/adt/adt-bundle-linux-x86-20140702.zip\">http://dl.google.com/android/adt/adt-bundle-linux-x86-20140702.zip</a></li>\n<li>mac: <a href=\"http://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip\">http://dl.google.com/android/adt/adt-bundle-mac-x86_64-20140702.zip</a></li>\n<li>win32: <a href=\"http://dl.google.com/android/adt/adt-bundle-windows-x86-20140702.zip\">http://dl.google.com/android/adt/adt-bundle-windows-x86-20140702.zip</a></li>\n<li>win64: <a href=\"http://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip\">http://dl.google.com/android/adt/adt-bundle-windows-x86_64-20140702.zip</a></li>\n</ul>\n\n<p><strong>Don't try to upgrade from previous version</strong> because it doesn’t work at all.\nIf you have got problems with zipalign, it's now under build-tools and no more under tools/ so you can do a symbolic link or just copy it into the expected folder.</p>\n    "
}, {
    "t": "Difference between wait() and sleep()",
    "l": "http://stackoverflow.com/questions/1036754/difference-between-wait-and-sleep",
    "q": "\n\n<p>What is the difference between a <code>wait()</code> and <code>sleep()</code> in Threads?</p>\n\n<p>Is my understanding that a <code>wait()</code>-ing Thread is still in running mode and uses CPU cycles but a <code>sleep()</code>-ing does not consume any CPU cycles correct?</p>\n\n<p>Why do we have <em>both</em> <code>wait()</code> and <code>sleep()</code>: how does their implementation vary at a lower level?</p>\n    ",
    "a": "\n<p>A <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#wait%28%29\"><code>wait</code></a> can be \"woken up\" by another process calling <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#notify%28%29\"><code>notify</code></a> on the monitor which is being waited on whereas a <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Thread.html#sleep%28long%29\"><code>sleep</code></a> cannot. Also a <code>wait</code> (and <code>notify</code>) must happen in a block <code>synchronized</code> on the monitor object whereas <code>sleep</code> does not:</p>\n\n<pre><code>Object mon = ...;\nsynchronized (mon) {\n    mon.wait();\n} \n</code></pre>\n\n<p>At this point the currently executing thread waits <em>and releases the monitor</em>. Another thread may do</p>\n\n<pre><code>synchronized (mon) { mon.notify(); }\n</code></pre>\n\n<p>(On the same <code>mon</code> object) and the first thread (assuming it is the only thread waiting on the monitor) will wake up. </p>\n\n<p>You can also call <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html#notifyAll%28%29\"><code>notifyAll</code></a> if more than one thread is waiting on the monitor - this will wake <em>all of them up</em>. However, only one of the threads will be able to grab the monitor (remember that the <code>wait</code> is in a <code>synchronized</code> block) and carry on - the others will then be blocked until they can acquire the monitor's lock.</p>\n\n<p>Another point is that you call <code>wait</code> on <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Object.html\"><code>Object</code></a> itself (i.e. you wait on an object's monitor) whereas you call <code>sleep</code> on <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Thread.html\"><code>Thread</code></a>.</p>\n\n<p>Yet another point is that you can get <em>spurious wakeups</em> from <code>wait</code> (i.e. the thread which is waiting resumes for no apparent reason). You should <strong>always <code>wait</code> whilst spinning on some condition</strong> as follows:  </p>\n\n<pre><code>synchronized {\n    while (!condition) { mon.wait(); }\n}\n</code></pre>\n    "
}, {
    "t": "Setting multiple jars in java classpath",
    "l": "http://stackoverflow.com/questions/219585/setting-multiple-jars-in-java-classpath",
    "q": "\n\n<p>Is there a way to include all the jar files within a directory in the classpath?</p>\n\n<p>I'm trying <code>java -classpath lib/*.jar:. my.package.Program</code> and it is not able to find class files that are certainly in those jars.  Do I need to add each jar file to the classpath separately? </p>\n    ",
    "a": "\n<p>Using Java 6 or later, the classpath option supports wildcards. Note the following:</p>\n\n<ul>\n<li>Use straight quotes (<code>\"</code>)</li>\n<li>Use <code>*</code>, not <code>*.jar</code></li>\n</ul>\n\n<p><strong>Windows</strong></p>\n\n<blockquote>\n  <p><code>java -cp \"Test.jar;lib/*\" my.package.MainClass</code></p>\n</blockquote>\n\n<p><strong>Unix</strong></p>\n\n<blockquote>\n  <p><code>java -cp \"Test.jar:lib/*\" my.package.MainClass</code></p>\n</blockquote>\n\n<p>This is similar to Windows, but uses <code>:</code> instead of <code>;</code>. If you cannot use wildcards, <code>bash</code> allows the following syntax (where <code>lib</code> is the directory containing all the Java archive files):</p>\n\n<blockquote>\n  <p><code>java -cp $(echo lib/*.jar | tr ' ' ':')</code></p>\n</blockquote>\n\n<p>(Note that using a classpath is incompatible with the <code>-jar</code> option. See also: <a href=\"http://stackoverflow.com/questions/13018100/execute-jar-file-with-multiple-classpath-libraries-from-command-prompt\">Execute jar file with multiple classpath libraries from command prompt</a>)</p>\n\n<p><strong>Understanding Wildcards</strong></p>\n\n<p>From the <a href=\"http://java.sun.com/javase/6/docs/technotes/tools/windows/classpath.html\">Classpath</a> document:</p>\n\n<blockquote>\n  <p>Class path entries can contain the basename wildcard character <code>*</code>, which is considered equivalent to specifying a list of all the files\n  in the directory with the extension <code>.jar</code> or <code>.JAR</code>. For example, the\n  class path entry <code>foo/*</code> specifies all JAR files in the directory named\n  foo. A classpath entry consisting simply of <code>*</code> expands to a list of all\n  the jar files in the current directory.</p>\n  \n  <p>A class path entry that contains <code>*</code> will not match class files. To\n  match both classes and JAR files in a single directory foo, use either\n  <code>foo;foo/*</code> or <code>foo/*;foo</code>. The order chosen determines whether the\n  classes and resources in <code>foo</code> are loaded before JAR files in <code>foo</code>, or\n  vice versa.</p>\n  \n  <p>Subdirectories are not searched recursively. For example, <code>foo/*</code> looks\n  for JAR files only in <code>foo</code>, not in <code>foo/bar</code>, <code>foo/baz</code>, etc.</p>\n  \n  <p>The order in which the JAR files in a directory are enumerated in the\n  expanded class path is not specified and may vary from platform to\n  platform and even from moment to moment on the same machine. A\n  well-constructed application should not depend upon any particular\n  order. If a specific order is required then the JAR files can be\n  enumerated explicitly in the class path.</p>\n  \n  <p>Expansion of wildcards is done early, prior to the invocation of a\n  program's main method, rather than late, during the class-loading\n  process itself. Each element of the input class path containing a\n  wildcard is replaced by the (possibly empty) sequence of elements\n  generated by enumerating the JAR files in the named directory. For\n  example, if the directory <code>foo</code> contains <code>a.jar</code>, <code>b.jar</code>, and <code>c.jar</code>, then\n  the class path <code>foo/*</code> is expanded into <code>foo/a.jar;foo/b.jar;foo/c.jar</code>,\n  and that string would be the value of the system property\n  <code>java.class.path</code>.</p>\n  \n  <p>The <code>CLASSPATH</code> environment variable is not treated any differently from\n  the <code>-classpath</code> (or <code>-cp</code>) command-line option. That is, wildcards are\n  honored in all these cases. However, class path wildcards are not\n  honored in the <code>Class-Path jar-manifest</code> header.</p>\n</blockquote>\n    "
}, {
    "t": "Is null check needed before calling instanceof",
    "l": "http://stackoverflow.com/questions/2950319/is-null-check-needed-before-calling-instanceof",
    "q": "\n\n<p>Will <code>null instanceof SomeClass</code> return <code>false</code> or throw a <code>NullPointerException</code></p>\n    ",
    "a": "\n<p>No, a null check is not needed before using instanceof. </p>\n\n<p>The expression <code>x instanceof SomeClass</code> is <code>false</code> if x is null.</p>\n\n<p>From the Java Language Specification, at <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.20.2\">http://docs.oracle.com/javase/specs/jls/se7/html/jls-15.html#jls-15.20.2</a></p>\n\n<blockquote>\n  <p>\"At run time, the result of the\n  instanceof operator is true  if the\n  value of the RelationalExpression is\n  not null  and the reference could be\n  cast (§15.16)  to the ReferenceType\n  without raising a ClassCastException.\n  Otherwise the result is false.\"</p>\n</blockquote>\n\n<p>So if the operand is null, the result is false.</p>\n    "
}, {
    "t": "Iterating through a list, avoiding ConcurrentModificationException when removing in loop",
    "l": "http://stackoverflow.com/questions/223918/iterating-through-a-list-avoiding-concurrentmodificationexception-when-removing",
    "q": "\n\n<p>We all know you can't do this:</p>\n\n<pre><code>for (Object i : l) {\n    if (condition(i))\n        l.remove(i);\n}\n</code></pre>\n\n<p><code>ConcurrentModificationException</code> etc... this apparently works sometimes, but not always. Here's some specific code:</p>\n\n<pre class=\"lang-java prettyprint-override\"><code>public static void main(String[] args) {\n    Collection&lt;Integer&gt; l = new ArrayList&lt;Integer&gt;();\n\n    for (int i=0; i &lt; 10; ++i) {\n        l.add(new Integer(4));\n        l.add(new Integer(5));\n        l.add(new Integer(6));\n    }\n\n    for (Integer i : l) {\n        if (i.intValue() == 5)\n            l.remove(i);\n    }\n\n    System.out.println(l);\n}\n</code></pre>\n\n<p>This, of course, results in:</p>\n\n<pre><code>Exception in thread \"main\" java.util.ConcurrentModificationException\n</code></pre>\n\n<p>... even though multiple threads aren't doing it... Anyway.</p>\n\n<p>What's the best solution to this problem? How can I remove an item from the collection in a loop without throwing this exception?</p>\n\n<p>I'm also using an arbitrary <code>Collection</code> here, not necessarily an <code>ArrayList</code>, so you can't rely on <code>get</code>.</p>\n    ",
    "a": "\n<p><code>Iterator.remove()</code> is safe, you can use it like this:</p>\n\n<pre><code>List&lt;String&gt; list = new ArrayList&lt;&gt;();\n\n// This is a clever way to create the iterator and call iterator.hasNext() like\n// you would do in a while-loop. It would be the same as doing:\n//     Iterator&lt;String&gt; iterator = list.iterator();\n//     while (iterator.hasNext()) {\nfor (Iterator&lt;String&gt; iterator = list.iterator(); iterator.hasNext();) {\n    String string = iterator.next();\n    if (string.isEmpty()) {\n        // Remove the current element from the iterator and the list.\n        iterator.remove();\n    }\n}\n</code></pre>\n\n<p>Note that <code>Iterator.remove</code> is the only safe way to modify a collection during iteration; the behavior is unspecified if the underlying collection is modified in any other way while the iteration is in progress.</p>\n\n<p>Source:</p>\n\n<p><a href=\"http://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html\">http://docs.oracle.com/javase/tutorial/collections/interfaces/collection.html</a></p>\n\n<hr>\n\n<p>And similarly, if you have a <code>ListIterator</code> and want to <em>add</em> items, you can use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/ListIterator.html#add-E-\"><code>ListIterator#add</code></a>, for the same reason you can use <code>Iterator#remove</code>&nbsp;— it's designed to allow it.</p>\n    "
}, {
    "t": "How does the Java for each loop work?",
    "l": "http://stackoverflow.com/questions/85190/how-does-the-java-for-each-loop-work",
    "q": "\n\n<pre><code>List&lt;String&gt; someList = new ArrayList&lt;String&gt;();\n// add \"monkey\", \"donkey\", \"skeleton key\" to someList\n</code></pre>\n\n\n\n<pre><code>for (String item : someList) {\n    System.out.println(item);\n}\n</code></pre>\n\n<p>What would the equivalent for loop look like without using the for each syntax?</p>\n    ",
    "a": "\n<pre><code>for(Iterator&lt;String&gt; i = someList.iterator(); i.hasNext(); ) {\n    String item = i.next();\n    System.out.println(item);\n}\n</code></pre>\n\n<p>Note that if you need to use <code>i.remove();</code> in your loop, or access the actual <code>iterator</code> in some way, you cannot use the <code>for( : )</code> idiom, since the actual <code>Iterator</code> is merely inferred.</p>\n\n<p>As was noted by Denis Bueno, this code works for any object that <code>implements</code> the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html\"><code>Iterable interface</code></a>.</p>\n\n<p>Also, if the right-hand side of the <code>for(:)</code> idiom is an <code>array</code> rather than an <code>Iterable</code> object, the internal code uses an int index counter and checks against array.length instead. See the <a href=\"http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.14.2\">Java Language Specification</a>.</p>\n    "
}, {
    "t": "What is the Java equivalent for LINQ?",
    "l": "http://stackoverflow.com/questions/1217228/what-is-the-java-equivalent-for-linq",
    "q": "\n\n<p>What is Java equivalent for LINQ?</p>\n    ",
    "a": "\n<p>There is nothing like LINQ for Java.</p>\n    "
}, {
    "t": "Hibernate hbm2ddl.auto possible values and what they do?",
    "l": "http://stackoverflow.com/questions/438146/hibernate-hbm2ddl-auto-possible-values-and-what-they-do",
    "q": "\n\n<p>I really want to know more about the update, export and the values that could be given to <code>hibernate.hbm2ddl.auto</code><br>\nI need to know when to use the update and when not? And what is the alternative?</p>\n\n<p>These are changes that could happen over DB:</p>\n\n<ul>\n<li>New tables</li>\n<li>new columns in old tables</li>\n<li>columns deleted</li>\n<li>data type of a column changed</li>\n<li>a type of a column changed it attributes</li>\n<li>tables have been dropped</li>\n<li>values of a column has changed </li>\n</ul>\n\n<p>In each case what is the best solution?</p>\n    ",
    "a": "\n<p>From the <a href=\"http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html#configuration-optional\">community documentation</a>:</p>\n\n<blockquote>\n  <p>hibernate.hbm2ddl.auto    Automatically validates or exports schema DDL to the database when the SessionFactory is created. With create-drop, the database schema will be dropped when the SessionFactory is closed explicitly.</p>\n  \n  <p>e.g. validate | update | create | create-drop </p>\n</blockquote>\n\n<p>So the list of possible options are,</p>\n\n<ul>\n<li><em>validate</em>: validate the schema, makes no changes to the database.</li>\n<li><em>update</em>: update the schema.</li>\n<li><em>create</em>: creates the schema, destroying previous data.</li>\n<li><em>create-drop</em>: drop the schema at the end of the session.</li>\n</ul>\n\n<p>These options seem intended to be developers tools and not to facilitate any production level databases, you may want to have a look at the following question; <a href=\"http://stackoverflow.com/questions/221379/hibernate-hbm2ddl-autoupdate-in-production\">Hibernate: hbm2ddl.auto=update in production?</a></p>\n    "
}, {
    "t": "Check if at least two out of three booleans are true",
    "l": "http://stackoverflow.com/questions/3076078/check-if-at-least-two-out-of-three-booleans-are-true",
    "q": "\n\n<p>An interviewer recently asked me this question: given three boolean variables, a, b, and c, return true if at least two out of the three are true.</p>\n\n<p>My solution follows:</p>\n\n<pre><code>boolean atLeastTwo(boolean a, boolean b, boolean c) {\n    if ((a &amp;&amp; b) || (b &amp;&amp; c) || (a &amp;&amp; c)) {\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n</code></pre>\n\n<p>He said that this can be improved further, but how?</p>\n    ",
    "a": "\n<p>Rather than writing:</p>\n\n<pre><code>    if (someExpression) {\n        return true;\n    } else {\n        return false;\n    }\n</code></pre>\n\n<p>Write:</p>\n\n<pre><code>    return someExpression;\n</code></pre>\n\n<hr>\n\n<p>As for the expression itself, something like this:</p>\n\n<pre><code>boolean atLeastTwo(boolean a, boolean b, boolean c) {\n    return a ? (b || c) : (b &amp;&amp; c);\n}\n</code></pre>\n\n<p>or this (whichever you find easier to grasp):</p>\n\n<pre><code>boolean atLeastTwo(boolean a, boolean b, boolean c) {\n    return a &amp;&amp; (b || c) || (b &amp;&amp; c);\n}\n</code></pre>\n\n<p>It tests <code>a</code> and <code>b</code> exactly once, and <code>c</code> at most once.</p>\n\n<h3>References</h3>\n\n<ul>\n<li><a href=\"http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.25\">JLS 15.25 Conditional Operator ? :</a></li>\n</ul>\n    "
}, {
    "t": "How can I pad an integers with zeros on the left?",
    "l": "http://stackoverflow.com/questions/473282/how-can-i-pad-an-integers-with-zeros-on-the-left",
    "q": "\n\n<p>How do you left pad an int with zeros in java when converting to a string?</p>\n\n<p>I'm basically looking to pad out integers up to 9999 with the leading zeros (e.g. 1 = \"0001\").</p>\n    ",
    "a": "\n<pre><code>String.format(\"%05d\", yournumber);\n</code></pre>\n\n<p>for zero-padding with length=5.</p>\n\n<p><a href=\"http://download.oracle.com/javase/7/docs/api/java/util/Formatter.html\">http://download.oracle.com/javase/7/docs/api/java/util/Formatter.html</a></p>\n    "
}, {
    "t": "How to round a number to n decimal places in Java",
    "l": "http://stackoverflow.com/questions/153724/how-to-round-a-number-to-n-decimal-places-in-java",
    "q": "\n\n<p>What I'd like is a method to convert a double to a string which rounds using the half-up method. I.e. if the decimal to be rounded is a 5, it always rounds up the previous number. This is the standard method of rounding most people expect in most situations.</p>\n\n<p>I also would like only significant digits to be displayed. That is there should not be any trailing zeroes.</p>\n\n<p>I know one method of doing this is to use the String.format method:</p>\n\n<pre><code>String.format(\"%.5g%n\", 0.912385);\n</code></pre>\n\n<p>returns:</p>\n\n<pre><code>0.91239\n</code></pre>\n\n<p>which is great, however it always displays numbers with 5 decimal places even if they are not significant: </p>\n\n<pre><code>String.format(\"%.5g%n\", 0.912300);\n</code></pre>\n\n<p>returns:</p>\n\n<pre><code>0.91230\n</code></pre>\n\n<p>Another method is to use the DecimalFormatter:</p>\n\n<pre><code>DecimalFormat df = new DecimalFormat(\"#.#####\");\ndf.format(0.912385);\n</code></pre>\n\n<p>returns:</p>\n\n<pre><code>0.91238\n</code></pre>\n\n<p>However as you can see this uses half-even rounding. That is it will round down if the previous digit is even. What I'd like is this:</p>\n\n<pre><code>0.912385 -&gt; 0.91239\n0.912300 -&gt; 0.9123\n</code></pre>\n\n<p>What is the best way to achieve this in Java?</p>\n    ",
    "a": "\n<p>Use <a href=\"http://docs.oracle.com/javase/6/docs/api/java/text/DecimalFormat.html#setRoundingMode%28java.math.RoundingMode%29\"><code>setRoundingMode</code></a>, see linked Javadoc, set the <a href=\"http://docs.oracle.com/javase/6/docs/api/java/math/RoundingMode.html\"><code>RoundingMode</code></a> explicitly to handle your issue with the half-even round, then use the format pattern for your required output.</p>\n    "
}, {
    "t": "Sort ArrayList of custom Objects by property",
    "l": "http://stackoverflow.com/questions/2784514/sort-arraylist-of-custom-objects-by-property",
    "q": "\n\n<p>I read about sorting ArrayLists using a Comparator but in all of the examples people used <code>compareTo</code> which according to some research is a method for Strings.</p>\n\n<p>I wanted to sort an ArrayList of custom objects by one of their properties: a Date object\n(<code>getStartDay()</code>). Normally I compare them by <code>item1.getStartDate().before(item2.getStartDate())</code> so I was wondering whether I could write something like:</p>\n\n<pre><code>public class customComparator {\n    public boolean compare(Object object1, Object object2) {\n        return object1.getStartDate().before(object2.getStartDate());\n    }\n}\n\npublic class randomName {\n    ...\n    Collections.sort(Database.arrayList, new customComparator);\n    ...\n}\n</code></pre>\n    ",
    "a": "\n<p>Since <a href=\"http://docs.oracle.com/javase/6/docs/api/java/util/Date.html\">Date</a> implements <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Comparable.html\">Comparable</a>, it has a <code>compareTo</code> method just like <code>String</code> does.</p>\n\n<p>So your custom comparator could look like this:</p>\n\n<pre><code>public class CustomComparator implements Comparator&lt;MyObject&gt; {\n    @Override\n    public int compare(MyObject o1, MyObject o2) {\n        return o1.getStartDate().compareTo(o2.getStartDate());\n    }\n}\n</code></pre>\n\n<p>(The <code>compare()</code> method must return an <code>int</code>, so you couldn't directly return a <code>boolean</code> like you were planning to anyway.)</p>\n\n<p>Your sorting code would be just about like you wrote:</p>\n\n<pre><code>Collections.sort(Database.arrayList, new CustomComparator());\n</code></pre>\n\n<p>&nbsp;<br>\nA couple of smaller points which are not directly related to the question:</p>\n\n<ol>\n<li>By convention, classes start with an upper-case letter while methods and variables start with a lower-case letter. That's why I changed the name of the comparator to <code>CustomComparator</code>.</li>\n<li>Use the <a href=\"http://docs.oracle.com/javase/6/docs/api/index.html\">Javadocs</a>. They will be invaluable if you keep working with Java.</li>\n</ol>\n    "
}, {
    "t": "Why is Java Vector class considered obsolete or deprecated?",
    "l": "http://stackoverflow.com/questions/1386275/why-is-java-vector-class-considered-obsolete-or-deprecated",
    "q": "\n\n<p>Why is Java Vector considered a legacy class, obsolete or deprecated?</p>\n\n<p>Isn't its use valid when working with concurrency?</p>\n\n<p>And if I don't want to manually synchronize objects and just want to use a thread-safe collection without needing to make fresh copies of the underlying array (as <code>CopyOnWriteArrayList</code> does), then is it fine to use <code>Vector</code>?</p>\n\n<p>What about <code>Stack</code>, which is a subclass of <code>Vector</code>, what should I use instead of it?</p>\n    ",
    "a": "\n<p><code>Vector</code> synchronizes on each individual operation. That's almost never what you want to do.</p>\n\n<p>Generally you want to synchronize a <em>whole sequence</em> of operations. Synchronizing individual operations is both less safe (if you iterate over a <code>Vector</code>, for instance, you still need to take out a lock to avoid anyone else changing the collection at the same time, which would cause a <code>ConcurrentModificationException</code> in the iterating thread) but also slower (why take out a lock repeatedly when once will be enough)?</p>\n\n<p>Of course, it also has the overhead of locking even when you don't need to.</p>\n\n<p>Basically, it's a very flawed approach to synchronization in most situations. As MrSpandex pointed out, you can decorate a collection using the calls such as <a href=\"http://java.sun.com/javase/6/docs/api/java/util/Collections.html#synchronizedList%28java.util.List%29\"><code>Collections.synchronizedList</code></a> - the fact that <code>Vector</code> combines both the \"resized array\" collection implementation with the \"synchronize every operation\" bit is another example of poor design; the decoration approach gives cleaner separation of concerns.</p>\n\n<p>As for a <code>Stack</code> equivalent - I'd look at <code>Deque</code>/<code>ArrayDeque</code> to start with.</p>\n    "
}, {
    "t": "Why does this go into an infinite loop?",
    "l": "http://stackoverflow.com/questions/3831341/why-does-this-go-into-an-infinite-loop",
    "q": "\n\n<p>I'm a teacher, and yesterday a student wrote the following code:</p>\n\n<pre><code>public class Tests {\n    public static void main(String[] args) throws Exception {\n        int x = 0;\n        while(x&lt;3) {\n            x = x++;\n            System.out.println(x);\n        }\n    }\n}\n</code></pre>\n\n<p>We know he should have writen just <code>x++</code> or <code>x=x+1</code>, but on <code>x = x++;</code> it should first attribute x to itself, and later increment x. Why does x continue with 0 as value?</p>\n\n<p><strong>--update</strong></p>\n\n<p>Here's the bytecode:</p>\n\n<pre><code>public class Tests extends java.lang.Object{\npublic Tests();\n  Code:\n   0:   aload_0\n   1:   invokespecial   #1; //Method java/lang/Object.\"&lt;init&gt;\":()V\n   4:   return\n\npublic static void main(java.lang.String[])   throws java.lang.Exception;\n  Code:\n   0:   iconst_0\n   1:   istore_1\n   2:   iload_1\n   3:   iconst_3\n   4:   if_icmpge   22\n   7:   iload_1\n   8:   iinc    1, 1\n   11:  istore_1\n   12:  getstatic   #2; //Field java/lang/System.out:Ljava/io/PrintStream;\n   15:  iload_1\n   16:  invokevirtual   #3; //Method java/io/PrintStream.println:(I)V\n   19:  goto    2\n   22:  return\n\n}\n</code></pre>\n\n<p>I'll read about the <a href=\"http://en.wikipedia.org/wiki/Java_bytecode_instruction_listings\">instructions</a> to try to understand...</p>\n    ",
    "a": "\n<p><strong>Note</strong>: Originally I posted C# code in this answer for purposes of illustration, since C# allows you to pass <code>int</code> parameters by reference with the <code>ref</code> keyword. I've decided to update it with actual legal Java code using the first <a href=\"http://commons.apache.org/lang/api-2.4/org/apache/commons/lang/mutable/MutableInt.html\"><code>MutableInt</code></a> class I found on Google to sort of approximate what <code>ref</code> does in C#. I can't really tell if that helps or hurts the answer. I will say that I personally haven't done all that much Java development; so for all I know there could be much more idiomatic ways to illustrate this point.</p>\n\n<hr>\n\n<p>Perhaps if we write out a method to do the equivalent of what <code>x++</code> does it will make this clearer.</p>\n\n<pre><code>public MutableInt postIncrement(MutableInt x) {\n    int valueBeforeIncrement = x.intValue();\n    x.add(1);\n    return new MutableInt(valueBeforeIncrement);\n}\n</code></pre>\n\n<p>Right? Increment the value passed and return the original value: that's the definition of the postincrement operator.</p>\n\n<p>Now, let's see how this behavior plays out in your example code:</p>\n\n<pre><code>MutableInt x = new MutableInt();\nx = postIncrement(x);\n</code></pre>\n\n<p><code>postIncrement(x)</code> does what? Increments <code>x</code>, yes. And then <strong>returns what <code>x</code> <em>was</em> before the increment</strong>. This return value then gets assigned to <code>x</code>.</p>\n\n<p>So the order of values assigned to <code>x</code> is 0, then 1, then 0.</p>\n\n<p>This might be clearer still if we re-write the above:</p>\n\n<pre><code>MutableInt x = new MutableInt();    // x is 0.\nMutableInt temp = postIncrement(x); // Now x is 1, and temp is 0.\nx = temp;                           // Now x is 0 again.\n</code></pre>\n\n<p>Your fixation on the fact that when you replace <code>x</code> on the left side of the above assignment with <code>y</code>, \"you can see that it first increments x, and later attributes it to y\" strikes me as confused. It is not <code>x</code> that is being assigned to <code>y</code>; it is <strong>the value formerly assigned to <code>x</code></strong>. Really, injecting <code>y</code> makes things no different from the scenario above; we've simply got:</p>\n\n<pre><code>MutableInt x = new MutableInt();    // x is 0.\nMutableInt y = new MutableInt();    // y is 0.\nMutableInt temp = postIncrement(x); // Now x is 1, and temp is 0.\ny = temp;                           // y is still 0.\n</code></pre>\n\n<p>So it's clear: <code>x = x++</code> effectively does not change the value of x. It always causes x to have the values x<sub>0</sub>, then x<sub>0</sub> + 1, and then x<sub>0</sub> again.</p>\n\n<hr>\n\n<p><strong>Update</strong>: Incidentally, lest you doubt that <code>x</code> ever gets assigned to 1 \"between\" the increment operation and the assignment in the example above, I've thrown together a quick demo to illustrate that this intermediate value does indeed \"exist,\" though it will never be \"seen\" on the executing thread.</p>\n\n<p>The demo calls <code>x = x++;</code> in a loop while a separate thread continuously prints the value of <code>x</code> to the console.</p>\n\n<pre><code>public class Main {\n    public static volatile int x = 0;\n\n    public static void main(String[] args) {\n        LoopingThread t = new LoopingThread();\n        System.out.println(\"Starting background thread...\");\n        t.start();\n\n        while (true) {\n            x = x++;\n        }\n    }\n}\n\nclass LoopingThread extends Thread {\n    public @Override void run() {\n        while (true) {\n            System.out.println(Main.x);\n        }\n    }\n}\n</code></pre>\n\n<p>Below is an excerpt of the above program's output. Notice the irregular occurrence of both 1s and 0s.</p>\n\n<pre>Starting background thread...\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n</pre>\n    "
}, {
    "t": "Efficiency of Java “Double Brace Initialization”?",
    "l": "http://stackoverflow.com/questions/924285/efficiency-of-java-double-brace-initialization",
    "q": "\n\n<p>In <a href=\"http://stackoverflow.com/questions/15496/hidden-features-of-java\">Hidden Features of Java</a> the top answer mentions <a href=\"http://www.c2.com/cgi/wiki?DoubleBraceInitialization\">Double Brace Initialization</a>, with a <em>very</em> enticing syntax:</p>\n\n<pre><code>Set&lt;String&gt; flavors = new HashSet&lt;String&gt;() {{\n    add(\"vanilla\");\n    add(\"strawberry\");\n    add(\"chocolate\");\n    add(\"butter pecan\");\n}};\n</code></pre>\n\n<p>This idiom creates an anonymous inner class with just an instance initializer in it, which \"can use any [...] methods in the containing scope\".  </p>\n\n<p>Main question: Is this as <strong>inefficient</strong> as it sounds?  Should its use be limited to one-off initializations?  (And of course showing off!)</p>\n\n<p>Second question: The new HashSet must be the \"this\" used in the instance initializer ... can anyone shed light on the mechanism?  </p>\n\n<p>Third question: Is this idiom too <strong>obscure</strong> to use in production code?</p>\n\n<p><strong>Summary:</strong> Very, very nice answers, thanks everyone. On question (3), people felt the syntax should be clear (though I'd recommend an occasional comment, especially if your code will pass on to developers who may not be familiar with it).  </p>\n\n<p>On question (1), the generated code should run quickly. The extra .class files do cause jar file clutter, and slow program startup slightly (thanks to @coobird for measuring that). @Thilo pointed out that garbage collection can be affected, and the memory cost for the extra loaded classes may be a factor in some cases.  </p>\n\n<p>Question (2) turned out to be most interesting to me. If I understand the answers, what's happening in DBI is that the anonymous inner class extends the class of the object being constructed by the new operator, and hence has a \"this\" value referencing the instance being constructed. Very neat.</p>\n\n<p>Overall, DBI strikes me as something of an intellectual curiousity.  Coobird and others point out you can achieve the same effect with Arrays.asList, varargs methods, Google Collections, and the proposed Java 7 Collection literals.  Newer JVM languages like Scala, JRuby, and Groovy also offer concise notations for list construction, and interoperate well with Java.  Given that DBI clutters up the classpath, slows down class loading a bit, and makes the code a tad more obscure, I'd probably shy away from it. However, I plan to spring this on a friend who's just gotten his SCJP and loves good natured jousts about Java semantics!  ;-)  Thanks everyone!</p>\n    ",
    "a": "\n<p>Here's the problem when I get too carried away with anonymous inner classes:</p>\n\n<pre><code>2009/05/27  16:35             1,602 DemoApp2$1.class\n2009/05/27  16:35             1,976 DemoApp2$10.class\n2009/05/27  16:35             1,919 DemoApp2$11.class\n2009/05/27  16:35             2,404 DemoApp2$12.class\n2009/05/27  16:35             1,197 DemoApp2$13.class\n\n/* snip */\n\n2009/05/27  16:35             1,953 DemoApp2$30.class\n2009/05/27  16:35             1,910 DemoApp2$31.class\n2009/05/27  16:35             2,007 DemoApp2$32.class\n2009/05/27  16:35               926 DemoApp2$33$1$1.class\n2009/05/27  16:35             4,104 DemoApp2$33$1.class\n2009/05/27  16:35             2,849 DemoApp2$33.class\n2009/05/27  16:35               926 DemoApp2$34$1$1.class\n2009/05/27  16:35             4,234 DemoApp2$34$1.class\n2009/05/27  16:35             2,849 DemoApp2$34.class\n\n/* snip */\n\n2009/05/27  16:35               614 DemoApp2$40.class\n2009/05/27  16:35             2,344 DemoApp2$5.class\n2009/05/27  16:35             1,551 DemoApp2$6.class\n2009/05/27  16:35             1,604 DemoApp2$7.class\n2009/05/27  16:35             1,809 DemoApp2$8.class\n2009/05/27  16:35             2,022 DemoApp2$9.class\n</code></pre>\n\n<p>These are all classes which were generated when I was making a simple application, and used copious amounts of anonymous inner classes -- each class will be compiled into a separate <code>class</code> file.</p>\n\n<p>The \"double brace initialization\", as already mentioned, is an anonymous inner class with a instance initialization block, which means that a new class is created for each \"initialization\", all for the purpose of usually making a single object.</p>\n\n<p>Considering that the Java Virtual Machine will need to read all those classes when using them, that can lead to some time in the <a href=\"http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html#88597\">bytecode verfication</a> process and such. Not to mention the increase in the needed disk space in order to store all those <code>class</code> files.</p>\n\n<p>It seems as if there is a bit of overhead when utilizing double-brace initialization, so it's probably not such a good idea to go too overboard with it. But as Eddie has noted in the comments, it's not possible to be absolutely sure of the impact.</p>\n\n<hr>\n\n<p>Just for reference, double brace initialization is the following:</p>\n\n<pre><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;() {{\n    add(\"Hello\");\n    add(\"World!\");\n}};\n</code></pre>\n\n<p>It looks like a \"hidden\" feature of Java, but it is just a rewrite of:</p>\n\n<pre><code>List&lt;String&gt; list = new ArrayList&lt;String&gt;() {\n\n    // Instance initialization block\n    {\n        add(\"Hello\");\n        add(\"World!\");\n    }\n};\n</code></pre>\n\n<p>So it's basically a <a href=\"http://java.sun.com/docs/books/tutorial/java/javaOO/initial.html\">instance initialization block</a> that is part of an <a href=\"http://java.sun.com/docs/books/tutorial/java/javaOO/innerclasses.html\">anonymous inner class</a>.</p>\n\n<hr>\n\n<p>Joshua Bloch's <a href=\"http://mail.openjdk.java.net/pipermail/coin-dev/2009-March/001193.html\">Collection Literals proposal</a> for <a href=\"http://openjdk.java.net/projects/coin/\">Project Coin</a> was along the lines of:</p>\n\n<pre><code>List&lt;Integer&gt; intList = [1, 2, 3, 4];\n\nSet&lt;String&gt; strSet = {\"Apple\", \"Banana\", \"Cactus\"};\n\nMap&lt;String, Integer&gt; truthMap = { \"answer\" : 42 };\n</code></pre>\n\n<p>Sadly, it <a href=\"http://mail.openjdk.java.net/pipermail/lambda-dev/2014-March/011938.html\">didn't make its way</a> into neither Java 7 nor 8 and was shelved indefinitely.</p>\n\n<hr>\n\n<p><strong>Experiment</strong></p>\n\n<p>Here's the simple experiment I've tested -- make 1000 <code>ArrayList</code>s with the elements <code>\"Hello\"</code> and <code>\"World!\"</code> added to them via the <code>add</code> method, using the two methods:</p>\n\n<p><em>Method 1: Double Brace Initialization</em></p>\n\n<pre><code>List&lt;String&gt; l = new ArrayList&lt;String&gt;() {{\n  add(\"Hello\");\n  add(\"World!\");\n}};\n</code></pre>\n\n<p><em>Method 2: Instantiate an <code>ArrayList</code> and <code>add</code></em></p>\n\n<pre><code>List&lt;String&gt; l = new ArrayList&lt;String&gt;();\nl.add(\"Hello\");\nl.add(\"World!\");\n</code></pre>\n\n<p>I created a simple program to write out a Java source file to perform 1000 initializations using the two methods:</p>\n\n<p><em>Test 1:</em></p>\n\n<pre><code>class Test1 {\n  public static void main(String[] s) {\n    long st = System.currentTimeMillis();\n\n    List&lt;String&gt; l0 = new ArrayList&lt;String&gt;() {{\n      add(\"Hello\");\n      add(\"World!\");\n    }};\n\n    List&lt;String&gt; l1 = new ArrayList&lt;String&gt;() {{\n      add(\"Hello\");\n      add(\"World!\");\n    }};\n\n    /* snip */\n\n    List&lt;String&gt; l999 = new ArrayList&lt;String&gt;() {{\n      add(\"Hello\");\n      add(\"World!\");\n    }};\n\n    System.out.println(System.currentTimeMillis() - st);\n  }\n}\n</code></pre>\n\n<p><em>Test 2:</em></p>\n\n<pre><code>class Test2 {\n  public static void main(String[] s) {\n    long st = System.currentTimeMillis();\n\n    List&lt;String&gt; l0 = new ArrayList&lt;String&gt;();\n    l0.add(\"Hello\");\n    l0.add(\"World!\");\n\n    List&lt;String&gt; l1 = new ArrayList&lt;String&gt;();\n    l1.add(\"Hello\");\n    l1.add(\"World!\");\n\n    /* snip */\n\n    List&lt;String&gt; l999 = new ArrayList&lt;String&gt;();\n    l999.add(\"Hello\");\n    l999.add(\"World!\");\n\n    System.out.println(System.currentTimeMillis() - st);\n  }\n}\n</code></pre>\n\n<p>Please note, that the elapsed time to initialize the 1000 <code>ArrayList</code>s and the 1000 anonymous inner classes extending <code>ArrayList</code> is checked using the <code>System.currentTimeMillis</code>, so the timer does not have a very high resolution. On my Windows system, the resolution is around 15-16 milliseconds.</p>\n\n<p>The results for 10 runs of the two tests were the following:</p>\n\n<pre><code>Test1 Times (ms)           Test2 Times (ms)\n----------------           ----------------\n           187                          0\n           203                          0\n           203                          0\n           188                          0\n           188                          0\n           187                          0\n           203                          0\n           188                          0\n           188                          0\n           203                          0\n</code></pre>\n\n<p>As can be seen, the double brace initialization has a noticeable execution time of around 190 ms.</p>\n\n<p>Meanwhile, the <code>ArrayList</code> initialization execution time came out to be 0 ms. Of course, the timer resolution should be taken into account, but it is likely to be under 15 ms seconds.</p>\n\n<p>So, there seems to be a noticeable difference in the execution time of the two methods. It does appear that there is indeed some overhead in the two initialization methods.</p>\n\n<p>And yes, there were 1000 <code>.class</code> files generated by compiling the <code>Test1</code> double brace initialization test program.</p>\n    "
}, {
    "t": "What's the difference between @Component, @Repository & @Service annotations in Spring?",
    "l": "http://stackoverflow.com/questions/6827752/whats-the-difference-between-component-repository-service-annotations-in",
    "q": "\n\n<p>Can <code>@Component</code>, <code>@Repository</code> &amp; <code>@Service</code> annotations be used interchangeably in Spring or do they provide any particular functionality besides acting as a notation device?</p>\n\n<p>In other words, if I have a Service class and I change the annotation from <code>@Service</code> to <code>@Component</code>, will it still behave the same way? </p>\n\n<p>Or does the annotation also influence the behavior and functionality of the class?</p>\n    ",
    "a": "\n<p>From <a href=\"http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/beans.html#beans-stereotype-annotations\">Spring Documentation</a>:</p>\n\n<blockquote>\n  <p>In Spring 2.0 and later, the @Repository annotation is a marker for\n  any class that fulfills the role or stereotype (also known as Data\n  Access Object or DAO) of a repository. Among the uses of this marker\n  is the automatic translation of exceptions.</p>\n  \n  <p>Spring 2.5 introduces further stereotype annotations: @Component,\n  @Service, and @Controller. @Component is a generic stereotype for any\n  Spring-managed component. @Repository, @Service, and @Controller are\n  specializations of @Component for more specific use cases, for\n  example, in the persistence, service, and presentation layers,\n  respectively.</p>\n  \n  <p>Therefore, you can annotate your component classes with @Component,\n  but by annotating them with @Repository, @Service, or @Controller\n  instead, your classes are more properly suited for processing by tools\n  or associating with aspects. For example, these stereotype annotations\n  make ideal targets for pointcuts.</p>\n  \n  <p>Thus, if you are choosing between using @Component or @Service for\n  your service layer, @Service is clearly the better choice. Similarly,\n  as stated above, @Repository is already supported as a marker for\n  automatic exception translation in your persistence layer.</p>\n</blockquote>\n\n<pre><code>| Annotation | Meaning                                             |\n+------------+-----------------------------------------------------+\n| @Component | generic stereotype for any Spring-managed component |\n| @Repository| stereotype for persistence layer                    |\n| @Service   | stereotype for service layer                        |\n| @Controller| stereotype for presentation layer (spring-mvc)      |\n</code></pre>\n    "
}, {
    "t": "Why does Math.round(0.49999999999999994) return 1",
    "l": "http://stackoverflow.com/questions/9902968/why-does-math-round0-49999999999999994-return-1",
    "q": "\n\n<p>In the following program you can see that for each value slightly less that .5 is rounded down, except for 0.5.</p>\n\n<pre><code>for (int i = 10; i &gt;= 0; i--) {\n    long l = Double.doubleToLongBits(i + 0.5);\n    double x;\n    do {\n        x = Double.longBitsToDouble(l);\n        System.out.println(x + \" rounded is \" + Math.round(x));\n        l--;\n    } while (Math.round(x) &gt; i);\n}\n</code></pre>\n\n<p>prints</p>\n\n<pre><code>10.5 rounded is 11\n10.499999999999998 rounded is 10\n9.5 rounded is 10\n9.499999999999998 rounded is 9\n8.5 rounded is 9\n8.499999999999998 rounded is 8\n7.5 rounded is 8\n7.499999999999999 rounded is 7\n6.5 rounded is 7\n6.499999999999999 rounded is 6\n5.5 rounded is 6\n5.499999999999999 rounded is 5\n4.5 rounded is 5\n4.499999999999999 rounded is 4\n3.5 rounded is 4\n3.4999999999999996 rounded is 3\n2.5 rounded is 3\n2.4999999999999996 rounded is 2\n1.5 rounded is 2\n1.4999999999999998 rounded is 1\n0.5 rounded is 1\n0.49999999999999994 rounded is 1\n0.4999999999999999 rounded is 0\n</code></pre>\n\n<p>I am using Java 6 update 31.</p>\n    ",
    "a": "\n<p><strong>Summary</strong></p>\n\n<p>In Java 6 (and presumably earlier), <code>round(x)</code> is implemented as <code>floor(x+0.5)</code>.<sup>1</sup>   This is a specification bug, for precisely this one pathological case.<sup>2</sup>  Java 7 no longer mandates this broken implementation.<sup>3</sup></p>\n\n<p><strong>The problem</strong></p>\n\n<p>0.5+0.49999999999999994 is exactly 1 in double precision:</p>\n\n<pre><code>static void print(double d) {\n    System.out.printf(\"%016x\\n\", Double.doubleToLongBits(d));\n}\n\npublic static void main(String args[]) {\n    double a = 0.5;\n    double b = 0.49999999999999994;\n\n    print(a);      // 3fe0000000000000\n    print(b);      // 3fdfffffffffffff\n    print(a+b);    // 3ff0000000000000\n    print(1.0);    // 3ff0000000000000\n}\n</code></pre>\n\n<p>This is because 0.49999999999999994 has a smaller exponent than 0.5, so when they're added, its mantissa is shifted, and the ULP gets bigger.</p>\n\n<p><strong>The solution</strong></p>\n\n<p>Since Java 7, OpenJDK (for example) implements it thus:<sup>4</sup></p>\n\n<pre><code>public static long round(double a) {\n    if (a != 0x1.fffffffffffffp-2) // greatest double value less than 0.5\n        return (long)floor(a + 0.5d);\n    else\n        return 0;\n}\n</code></pre>\n\n<hr>\n\n<p><sub>\n1. <a href=\"http://docs.oracle.com/javase/6/docs/api/java/lang/Math.html#round%28double%29\">http://docs.oracle.com/javase/6/docs/api/java/lang/Math.html#round%28double%29</a>\n</sub></p>\n\n<p><sub>\n2. <a href=\"http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6430675\">http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6430675</a> (credits to @SimonNickerson for finding this)\n</sub></p>\n\n<p><sub>\n3. <a href=\"http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#round%28double%29\">http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#round%28double%29</a>\n</sub></p>\n\n<p><sub>\n4. <a href=\"http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/java/lang/Math.java#Math.round%28double%29\">http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/java/lang/Math.java#Math.round%28double%29</a>\n</sub></p>\n    "
}, {
    "t": "When and how should I use a ThreadLocal variable?",
    "l": "http://stackoverflow.com/questions/817856/when-and-how-should-i-use-a-threadlocal-variable",
    "q": "\n\n<p>When should I use a <code>ThreadLocal</code> variable?</p>\n\n<p>How is it used?</p>\n    ",
    "a": "\n<p>One possible (and common) use is when you have some object that is not thread-safe, but you want to avoid synchronizing access to that object (I'm looking at you, <a href=\"http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\">SimpleDateFormat</a>).  Instead, give each thread its own instance of the object.</p>\n\n<p>For example:</p>\n\n<pre><code>public class Foo\n{\n    // SimpleDateFormat is not thread-safe, so give one to each thread\n    private static final ThreadLocal&lt;SimpleDateFormat&gt; formatter = new ThreadLocal&lt;SimpleDateFormat&gt;(){\n        @Override\n        protected SimpleDateFormat initialValue()\n        {\n            return new SimpleDateFormat(\"yyyyMMdd HHmm\");\n        }\n    };\n\n    public String formatIt(Date date)\n    {\n        return formatter.get().format(date);\n    }\n}\n</code></pre>\n    "
}, {
    "t": "How to create a generic array in Java?",
    "l": "http://stackoverflow.com/questions/529085/how-to-create-a-generic-array-in-java",
    "q": "\n\n<p>Due to the implementation of Java generics, you can't have code like this: </p>\n\n<pre><code>public class GenSet&lt;E&gt; {\n    private E a[];\n\n    public GenSet() {\n        a = new E[INITIAL_ARRAY_LENGTH]; // error: generic array creation\n    }\n}\n</code></pre>\n\n<p>How can I implement this while maintaining type safety?</p>\n\n<p>I saw a solution on the Java forums that goes like this:</p>\n\n<pre><code>import java.lang.reflect.Array;\n\nclass Stack&lt;T&gt; {\n    public Stack(Class&lt;T&gt; clazz, int capacity) {\n        array = (T[])Array.newInstance(clazz, capacity);\n    }\n\n    private final T[] array;\n}\n</code></pre>\n\n<p>But I really don't get what's going on. Can anyone help?</p>\n    ",
    "a": "\n<p>I have to ask a question in return: is your <code>GenSet</code> \"checked\" or \"unchecked\"?\nWhat does that mean?</p>\n\n<ul>\n<li><p><strong>Checked</strong>: <em>strong typing</em>. <code>GenSet</code> knows explicitly what type of objects it contains (i.e. its constructor was explicitly called with a <code>Class&lt;E&gt;</code> argument, and methods will throw an exception when they are passed arguments that are not of type <code>E</code>. See <a href=\"http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#checkedCollection%28java.util.Collection,%20java.lang.Class%29\"><code>Collections.checkedCollection</code></a>.</p>\n\n<p>-&gt; in that case, you should write:</p>\n\n<pre><code>public class GenSet&lt;E&gt; {\n\n    private E[] a;\n\n    public GenSet(Class&lt;E&gt; c, int s) {\n        // Use Array native method to create array\n        // of a type only known at run time\n        @SuppressWarnings(\"unchecked\")\n        final E[] a = (E[]) Array.newInstance(c, s);\n        this.a = a;\n    }\n\n    E get(int i) {\n        return a[i];\n    }\n}\n</code></pre></li>\n<li><p><strong>Unchecked</strong>: <em>weak typing</em>. No type checking is actually done on any of the objects passed as argument.</p>\n\n<p>-&gt; in that case, you should write</p>\n\n<pre><code>public class GenSet&lt;E&gt; {\n\n    private Object[] a;\n\n    public GenSet(int s) {\n        a = new Object[s];\n    }\n\n    E get(int i) {\n        @SuppressWarnings(\"unchecked\")\n        final E e = (E) a[i];\n        return e;\n    }\n}\n</code></pre>\n\n<p>Note that the component type of the array should be the <a href=\"http://docs.oracle.com/javase/tutorial/java/generics/erasure.html\"><em>erasure</em></a> of the type parameter:</p>\n\n<pre><code>public class GenSet&lt;E extends Foo&gt; { // E has an upper bound of Foo\n\n    private Foo[] a; // E erases to Foo, so use Foo[]\n\n    public GenSet(int s) {\n        a = new Foo[s];\n    }\n\n    ...\n}\n</code></pre></li>\n</ul>\n\n<p>All of this results from a known, and deliberate, weakness of generics in Java: it was implemented using erasure, so \"generic\" classes don't know what type argument they were created with at run time, and therefore can not provide type-safety unless some explicit mechanism (type-checking) is implemented.</p>\n    "
}, {
    "t": "decompiling DEX into Java sourcecode",
    "l": "http://stackoverflow.com/questions/1249973/decompiling-dex-into-java-sourcecode",
    "q": "\n\n<p>How can one decompile Android DEX (VM bytecode) files into corresponding Java sourcecode?</p>\n    ",
    "a": "\n<h1>It's easy</h1>\n\n<p>Get these tools:</p>\n\n<p>1) <a href=\"http://code.google.com/p/dex2jar/\">dex2jar</a>, which is made by a Chinese student. It will translate dex files to jar files</p>\n\n<p>2) <a href=\"http://jd.benow.ca/\">jd-gui</a> to view the java files in the jar</p>\n\n<p>The source code is quite readable as dex2jar makes some optimizations. </p>\n\n<h2>Procedure:</h2>\n\n<p>And here's the procedure on how to decompile:</p>\n\n<h2>Step 1:</h2>\n\n<p>Convert classes.dex in test_apk-debug.apk to test_apk-debug_dex2jar.jar</p>\n\n<pre><code>d2j-dex2jar.sh -f -o output_jar.jar apk_to_decompile.apk\n</code></pre>\n\n<blockquote>\n  <p><strong>Note:</strong> In the Windows machines all the <code>.sh</code> scripts are replaced by <code>.bat</code> scripts</p>\n</blockquote>\n\n<p><a href=\"http://code.google.com/p/dex2jar/wiki/ModifyApkWithDexTool\">dex2jar documentation</a></p>\n\n<h2>Step 2:</h2>\n\n<p>Open the jar in JD-GUI</p>\n\n<p><a href=\"http://i.stack.imgur.com/PWJIX.png\"><img src=\"http://i.stack.imgur.com/PWJIX.png\" alt=\"The decompiled source\"></a></p>\n    "
}, {
    "t": "Eclipse: Set maximum line length for auto formatting?",
    "l": "http://stackoverflow.com/questions/3697287/eclipse-set-maximum-line-length-for-auto-formatting",
    "q": "\n\n<p>I am working with Java. If I hit <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd> in Eclipse Helios, it will auto format my code. At a certain point, it wraps lines. I would like to increase the maximum line length. How can I do this?</p>\n    ",
    "a": "\n<p>In preferences <strong>Java -&gt; Code Style -&gt; Formatter</strong>, edit the profile. Under the Line Wrapping tab is the option for line width (Maximum line width:). you will need to make your own profile.</p>\n    "
}, {
    "t": "What is the equivalent of the C++ Pair<L,R> in Java?",
    "l": "http://stackoverflow.com/questions/156275/what-is-the-equivalent-of-the-c-pairl-r-in-java",
    "q": "\n\n<p>Is there a good reason why there is no Pair in Java? What would be the equivalent of this C++ construct? I would rather avoid reimplementing my own.</p>\n\n<p>It seems that 1.6 is providing something similar (AbstractMap.SimpleEntry), but this looks quite convoluted.</p>\n    ",
    "a": "\n<p>In <a href=\"http://groups.google.com/group/comp.lang.java.help/browse_thread/thread/f8b63fc645c1b487/1d94be050cfc249b\">a thread on <code>comp.lang.java.help</code></a>, Hunter Gratzner gives some arguments against the presence of a <code>Pair</code> construct in Java. The main argument is that a class <code>Pair</code> doesn't convey any semantics about the relationship between the two values (how do you know what \"first\" and \"second\" mean ?).</p>\n\n<p>A better practice is to write a very simple class, like the one Mike proposed, for each application you would have made of the <code>Pair</code> class. <code>Map.Entry</code> is an example of a pair that carry its meaning in its name.</p>\n\n<p>To sum up, in my opinion it is better to have a class <code>Position(x,y)</code>, a class <code>Range(begin,end)</code> and a class <code>Entry(key,value)</code> rather than a generic <code>Pair(first,second)</code> that doesn't tell me anything about what it's supposed to do.</p>\n    "
}, {
    "t": "What is the difference between a soft reference and a weak reference in Java?",
    "l": "http://stackoverflow.com/questions/299659/what-is-the-difference-between-a-soft-reference-and-a-weak-reference-in-java",
    "q": "\n\n<p>The title pretty much sums it.</p>\n    ",
    "a": "\n<p>From <a href=\"http://weblogs.java.net/blog/enicholas/archive/2006/05/understanding_w.html\">Understanding Weak References</a>, by Ethan Nicholas:</p>\n\n<blockquote>\n  <p><strong>Weak references</strong></p>\n  \n  <p>A <em>weak reference</em>, simply put, is a\n  reference that isn't strong enough to\n  force an object to remain in memory.\n  Weak references allow you to leverage\n  the garbage collector's ability to\n  determine reachability for you, so you\n  don't have to do it yourself. You\n  create a weak reference like this:</p>\n\n<pre><code>WeakReference weakWidget = new WeakReference(widget);\n</code></pre>\n  \n  <p>and then\n  elsewhere in the code you can use\n  <code>weakWidget.get()</code> to get the actual\n  <code>Widget</code> object. Of course the weak\n  reference isn't strong enough to\n  prevent garbage collection, so you may\n  find (if there are no strong\n  references to the widget) that\n  <code>weakWidget.get()</code> suddenly starts\n  returning <code>null</code>.</p>\n  \n  <p>...</p>\n  \n  <p><strong>Soft references</strong></p>\n  \n  <p>A <em>soft reference</em> is exactly like a\n  weak reference, except that it is less\n  eager to throw away the object to\n  which it refers. An object which is\n  only weakly reachable (the strongest\n  references to it are <code>WeakReferences</code>)\n  will be discarded at the next garbage\n  collection cycle, but an object which\n  is softly reachable will generally\n  stick around for a while.</p>\n  \n  <p><code>SoftReferences</code> aren't <em>required</em> to\n  behave any differently than\n  <code>WeakReferences</code>, but in practice softly\n  reachable objects are generally\n  retained as long as memory is in\n  plentiful supply. This makes them an\n  excellent foundation for a cache, such\n  as the image cache described above,\n  since you can let the garbage\n  collector worry about both how\n  reachable the objects are (a strongly\n  reachable object will <em>never</em> be removed\n  from the cache) and how badly it needs\n  the memory they are consuming.</p>\n</blockquote>\n\n<p>And <a href=\"http://weblogs.java.net/blog/peterkessler/\">Peter Kessler</a> added in a comment:</p>\n\n<blockquote>\n  <p>The Sun JRE does treat SoftReferences differently from WeakReferences. We attempt to hold on to object referenced by a SoftReference if there isn't pressure on the available memory. One detail: the policy for the \"-client\" and \"-server\" JRE's are different: the -client JRE tries to keep your footprint small by preferring to clear SoftReferences rather than expand the heap, whereas the -server JRE tries to keep your performance high by preferring to expand the heap (if possible) rather than clear SoftReferences. One size does not fit all.</p>\n</blockquote>\n    "
}, {
    "t": "How do I “decompile” Java class files?",
    "l": "http://stackoverflow.com/questions/272535/how-do-i-decompile-java-class-files",
    "q": "\n\n<p>What program can I use to decompile a class file? Will I actually get Java code, or is it just JVM assembly code?</p>\n\n<p>On Java performance questions on this site I often see responses from people who have \"decompiled\" the Java class file to see how the compiler optimizes certain things.</p>\n    ",
    "a": "\n<ul>\n<li>The final release of JSR 176, defining the major features of J2SE 5.0 (Java SE 5), has been published on September 30, 2004.</li>\n<li>The lastest Java version supported by JAD, the famous Java decompiler written by Mr. Pavel Kouznetsov, is <strong><a href=\"http://varaneckas.com/jad/\">JDK 1.3</a></strong>.</li>\n<li>Most of the Java decompilers downloadable today from the Internet, such as “DJ Java Decompiler” or “Cavaj Java Decompiler”, are powered by JAD: they can not display Java 5 sources.</li>\n</ul>\n\n<p><a href=\"http://jd.benow.ca/\">Java Decompiler</a> (Yet another Fast Java decompiler) has:</p>\n\n<ul>\n<li>Explicit support for decompiling and analyzing <strong>Java 5+</strong> “.class” files.</li>\n<li>A nice GUI:</li>\n</ul>\n\n<p><img src=\"http://i.stack.imgur.com/jH9Pd.png\" alt=\"screenshot\"></p>\n\n<p>It works with compilers from JDK 1.1.8 up to JDK 1.7.0, and others (<a href=\"https://en.wikipedia.org/wiki/Jikes\">Jikes</a>, <a href=\"https://en.wikipedia.org/wiki/JRockit\">JRockit</a>, etc.). </p>\n\n<p>It features an online <a href=\"http://jd.benow.ca/#jd-online\">live demo version</a> that is actually fully functional! You can just drop a jar file on the page and see the decompiled source code without installing anything.</p>\n    "
}, {
    "t": "How to create a file and write to a file in Java?",
    "l": "http://stackoverflow.com/questions/2885173/how-to-create-a-file-and-write-to-a-file-in-java",
    "q": "\n\n<p>What's the simplest way to create and write to a (text) file in Java?</p>\n    ",
    "a": "\n<p>Creating a text file (note that this will overwrite the file if it already exists):</p>\n\n<pre><code>PrintWriter writer = new PrintWriter(\"the-file-name.txt\", \"UTF-8\");\nwriter.println(\"The first line\");\nwriter.println(\"The second line\");\nwriter.close();\n</code></pre>\n\n<p>Creating a binary file (will also overwrite the file):</p>\n\n<pre><code>byte dataToWrite[] = //...\nFileOutputStream out = new FileOutputStream(\"the-file-name\");\nout.write(dataToWrite);\nout.close();\n</code></pre>\n    "
}, {
    "t": "What is the difference between JSF, Servlet and JSP?",
    "l": "http://stackoverflow.com/questions/2095397/what-is-the-difference-between-jsf-servlet-and-jsp",
    "q": "\n\n<p>How are JSP and Servlet related to each other? Is JSP some kind of Servlet? How are JSP and JSF related to each other? Is JSF some kind of prebuild UI based JSP like ASP.NET-MVC?</p>\n    ",
    "a": "\n<h3><a href=\"http://stackoverflow.com/tags/jsp/info\">JSP (JavaServer Pages)</a></h3>\n\n<p>JSP is a <strong>Java view technology</strong> running on the server machine which allows you to write template text in (the client side languages like HTML, CSS, JavaScript and so on). JSP supports <a href=\"http://docs.oracle.com/javaee/5/tutorial/doc/bnann.html\">taglibs</a>, which are backed by pieces of Java code that let you control the page flow or output dynamically. A well known taglib is <a href=\"http://stackoverflow.com/tags/jstl/info\">JSTL</a>. JSP also supports <a href=\"http://stackoverflow.com/tags/el/info\">Expression Language</a>, which can be used to access backend data (via attributes available in page, request, session and application scopes), mostly in combination with taglibs.</p>\n\n<p>When a JSP is requested for the first time or when the webapp starts up, the servlet container will compile it into a class extending <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServlet.html\"><code>HttpServlet</code></a> and use it during the webapp's lifetime. You can find the generated source code in the server's work directory. In for example <a href=\"http://tomcat.apache.org\">Tomcat</a>, it's the <code>/work</code> directory. On a JSP request, the servlet container will execute the compiled JSP class and send the generated output (usually just HTML/CSS/JS) through the webserver over network to the client side, which in turn displays it in the web browser.</p>\n\n<h3><a href=\"http://stackoverflow.com/tags/servlets/info\">Servlets</a></h3>\n\n<p>Servlet is an <strong>Java application programming interface (API)</strong> running on the server machine, which intercepts requests made by the client and generates/sends a response. A well known example is the <code>HttpServlet</code> which provides methods to hook on <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616.html\">HTTP</a> requests using the popular <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\">HTTP methods</a> such as <code>GET</code> and <code>POST</code>. You can configure <code>HttpServlet</code>s to listen on a certain HTTP URL pattern, which is configurable in <code>web.xml</code>, or more recently with <a href=\"http://docs.oracle.com/javaee/6/tutorial/doc/bnafd.html\">Java EE 6</a>, with <code>@WebServlet</code> annotation.</p>\n\n<p>When a Servlet is first requested or during webapp startup, the servlet container will create an instance of it and keep it in memory during the webapp's lifetime. The same instance will be reused for every incoming request whose URL matches the servlet's URL pattern. You can access the request data by <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html\"><code>HttpServletRequest</code></a> and handle the response by <a href=\"http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletResponse.html\"><code>HttpServletResponse</code></a>. Both objects are available as method arguments inside any of the overridden methods of <code>HttpServlet</code>, such as <code>doGet()</code> and <code>doPost()</code>.</p>\n\n<h3><a href=\"http://stackoverflow.com/tags/jsf/info\">JSF (JavaServer Faces)</a></h3>\n\n<p>JSF is a <strong>component based MVC framework</strong> which is built on top of the Servlet API, and provides <a href=\"http://docs.oracle.com/javaee/6/tutorial/doc/bnarf.html\">components</a> via taglibs which can be used in JSP or any other Java based view technology such as <a href=\"http://docs.oracle.com/javaee/6/tutorial/doc/giepx.html\">Facelets</a>. Facelets is much more suited to JSF than JSP. It namely provides great <a href=\"http://docs.oracle.com/javaee/6/tutorial/doc/giqxp.html\">templating capabilities</a> such as <a href=\"http://docs.oracle.com/javaee/6/tutorial/doc/giqzr.html\">composite components</a>, while JSP basically only offers the <a href=\"http://java.sun.com/products/jsp/syntax/2.0/syntaxref2020.html#8828\"><code>&lt;jsp:include&gt;</code></a> for templating, so that you're forced to create custom components with raw Java code (which is a bit opaque and a lot of tedious work in JSF) when you want to replace a repeated group of components with a single component. Since JSF 2.0, JSP has been deprecated as view technology in favor of Facelets.</p>\n\n<p>As being a MVC (<a href=\"http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller\">Model-View-Controller</a>) framework, JSF provides the <a href=\"http://docs.oracle.com/javaee/6/api/javax/faces/webapp/FacesServlet.html\"><code>FacesServlet</code></a> as the sole request-response <em>Controller</em>. It takes all the standard and tedious HTTP request/response work from your hands, such as gathering user input, validating/converting them, putting them in model objects, invoking actions and rendering the response. This way you end up with basically a JSP or Facelets (XHTML) page for <em>View</em> and a Javabean class as <em>Model</em>. The JSF components are been used to bind the view with the model (such as your ASP.NET web control does) and the <code>FacesServlet</code> uses the <em>JSF component tree</em> to do all the work.</p>\n\n<h3>Related questions</h3>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/2556553/what-is-the-main-stream-java-alternative-to-asp-net-php\">What is the main-stream Java alternative to ASP.NET / PHP?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1958808/java-web-development-what-skills-do-i-need\">Java EE web development, what skills do I need?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3106452/java-servlet-instantiation-and-session-variables\">How do servlets work? Instantiation, session variables and multithreading</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1727603/places-where-java-beans-used\">What is a Javabean and where are they used?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3177733/howto-avoid-java-code-in-jsp-files\">How to avoid Java code in JSP files?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/5104094/what-components-are-mvc-in-jsf-mvc-framework\">What components are MVC in JSF MVC framework?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4421839/what-is-the-need-of-jsf-when-ui-can-be-achieved-from-css-html-javascript-jquery/\">What is the need of JSF. When UI can be achieved from css html javascript jQuery?</a></li>\n</ul>\n    "
}, {
    "t": "Useful Eclipse Java Code Templates [closed]",
    "l": "http://stackoverflow.com/questions/1028858/useful-eclipse-java-code-templates",
    "q": "\n\n<p>You can create various Java code templates in Eclipse via the </p>\n\n<pre><code>Window-&gt;Preferences-&gt;Java -&gt; Editor -&gt; Templates\n</code></pre>\n\n<p>e.g.</p>\n\n<p><code>sysout</code> is expanded to:</p>\n\n<pre><code>System.out.println(${word_selection}${});${cursor}\n</code></pre>\n\n<p>You can activate this by typing <code>sysout</code> followed by <code>CTRL+SPACE</code></p>\n\n<p>What useful Java code templates do you currently use?<br>\nInclude the name and description of it and why it's awesome.</p>\n\n<p>There's an open bounty on this for an original/novel use of a template rather than a built-in existing feature.</p>\n\n<ul>\n<li>Create Log4J logger</li>\n<li>Get swt color from display</li>\n<li>Syncexec - Eclipse Framework</li>\n<li>Singleton Pattern/Enum Singleton Generation</li>\n<li>Readfile</li>\n<li>Const</li>\n<li>Traceout</li>\n<li>Format String</li>\n<li>Comment Code Review</li>\n<li>String format</li>\n<li>Try Finally Lock</li>\n<li>Message Format i18n and log</li>\n<li>Equalsbuilder</li>\n<li>Hashcodebuilder</li>\n<li>Spring Object Injection</li>\n<li>Create FileOutputStream</li>\n</ul>\n    ",
    "a": "\n<p><em>Create Log4J logger</em>:</p>\n\n<pre><code>${:import(org.apache.log4j.Logger)}\nprivate static final Logger LOGGER = Logger.getLogger(${enclosing_type}.class);\n</code></pre>\n\n<p>It both creates the Logger with a proper category <em>and</em> imports it.</p>\n\n<p><em>For those using SLF4J</em>:</p>\n\n<pre><code>${:import(org.slf4j.Logger,org.slf4j.LoggerFactory)}\nprivate static final Logger LOGGER = LoggerFactory.getLogger(${enclosing_type}.class);\n</code></pre>\n\n<p><a href=\"http://matthew.mceachen.us/blog/simple-log4j-eclipse-template-346.html\">Source</a>.</p>\n    "
}, {
    "t": "What is an efficient way to implement a singleton pattern in Java?",
    "l": "http://stackoverflow.com/questions/70689/what-is-an-efficient-way-to-implement-a-singleton-pattern-in-java",
    "q": "\n\n<p>What is an efficient way to implement a singleton pattern in Java?</p>\n    ",
    "a": "\n<p>Use an enum:</p>\n\n<pre><code>public enum Foo {\n    INSTANCE;\n}\n</code></pre>\n\n<p>Joshua Bloch explained this approach in his <a href=\"http://sites.google.com/site/io/effective-java-reloaded\">Effective Java Reloaded</a> talk at Google I/O 2008: <a href=\"http://www.youtube.com/watch?v=pi_I7oD_uGI#t=28m50s\">link to video</a>. Also see slides 30-32 of his presentation (<a href=\"https://14b1424d-a-62cb3a1a-s-sites.googlegroups.com/site/io/effective-java-reloaded/effective_java_reloaded.pdf?attachauth=ANoY7crKCOet2NEUGW7RV1XfM-Jn4z8YJhs0qJM11OhLRnFW_JbExkJtvJ3UJvTE40dhAciyWcRIeGJ-n3FLGnMOapHShHINh8IY05YViOJoZWzaohMtM-s4HCi5kjREagi8awWtcYD0_6G7GhKr2BndToeqLk5sBhZcQfcYIyAE5A4lGNosDCjODcBAkJn8EuO6572t2wU1LMSEUgjvqcf4I-Fp6VDhDvih_XUEmL9nuVJQynd2DRpxyuNH1SpJspEIdbLw-WWZ&amp;attredirects=0\">effective_java_reloaded.pdf</a>):</p>\n\n<blockquote>\n  <h3>The Right Way to Implement a Serializable Singleton</h3>\n\n<pre><code>public enum Elvis {\n    INSTANCE;\n    private final String[] favoriteSongs =\n        { \"Hound Dog\", \"Heartbreak Hotel\" };\n    public void printFavorites() {\n        System.out.println(Arrays.toString(favoriteSongs));\n    }\n}\n</code></pre>\n</blockquote>\n\n<p><strong>Edit:</strong> An <a href=\"http://www.ddj.com/java/208403883?pgno=3\">online portion of \"Effective Java\"</a> says: </p>\n\n<blockquote>\n  <p>\"This approach is functionally equivalent to the public field approach, except that it is more concise, provides the serialization machinery for free, and provides an ironclad guarantee against multiple instantiation, even in the face of sophisticated serialization or reflection attacks. While this approach has yet to be widely adopted, <strong>a single-element enum type is the best way to implement a singleton</strong>.\"</p>\n</blockquote>\n    "
}, {
    "t": "How to split a string in Java",
    "l": "http://stackoverflow.com/questions/3481828/how-to-split-a-string-in-java",
    "q": "\n\n<p>I have a string, <code>\"004-034556\"</code>, that I want to split into two strings:</p>\n\n<pre><code>string1=004\nstring2=034556\n</code></pre>\n\n<p>That means the first string will contain the characters before <code>'-'</code>, and the second string will contain the characters after <code>'-'</code>. I also want to check if the string has <code>'-'</code> in it. If not, I will throw an exception. How can I do this?</p>\n    ",
    "a": "\n<p>Just use the appropriate method: <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#split-java.lang.String-\"><code>String#split()</code></a>.</p>\n\n<pre><code>String string = \"004-034556\";\nString[] parts = string.split(\"-\");\nString part1 = parts[0]; // 004\nString part2 = parts[1]; // 034556\n</code></pre>\n\n<p>Note that this takes a <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum\">regular expression</a>, so remember to escape special characters if necessary, e.g. if you want to split on period <code>.</code> which means \"any character\" in regex, use either <code>split(\"\\\\.\")</code> or <code>split(Pattern.quote(\".\"))</code>.</p>\n\n<p>To test beforehand if the string contains a <code>-</code>, just use <a href=\"http://docs.oracle.com/javase/8/docs/api/java/lang/String.html#contains-java.lang.CharSequence-\"><code>String#contains()</code></a>.</p>\n\n<pre><code>if (string.contains(\"-\")) {\n    // Split it.\n} else {\n    throw new IllegalArgumentException(\"String \" + string + \" does not contain -\");\n}\n</code></pre>\n\n<p>No, this does not take a regular expression.</p>\n    "
}, {
    "t": "Which @NotNull Java annotation should I use?",
    "l": "http://stackoverflow.com/questions/4963300/which-notnull-java-annotation-should-i-use",
    "q": "\n\n<p>I'm looking to make my code more readable as well as use tooling like IDE code inspection and/or static code analysis (FindBugs and Sonar) to avoid NullPointerExceptions.  Many of the tools seem incompatible with each others' <code>@NotNull</code>/<code>@NonNull</code>/<code>@Nonnull</code> annotation and listing all of them in my code would be terrible to read.  Any suggestions of which one is the 'best'?  Here is the list of equivalent annotations I've found:</p>\n\n<ul>\n<li><p><strong><code>javax.validation.constraints.NotNull</code></strong><br>\n<em>Created for runtime validation, not static analysis.</em><br>\n<a href=\"http://download.oracle.com/javaee/6/api/javax/validation/constraints/NotNull.html\">documentation</a></p></li>\n<li><p><strong><code>edu.umd.cs.findbugs.annotations.NonNull</code></strong><br>\n<em>Used by Findbugs static analysis and therefore Sonar</em><br>\n<a href=\"http://findbugs.sourceforge.net/manual/annotations.html\">documentation</a></p></li>\n<li><p><strong><code>javax.annotation.Nonnull</code></strong><br>\n<em>This might work with Findbugs too, but JSR-305 is inactive.</em><br>\n<a href=\"http://code.google.com/p/jsr-305/source/browse/trunk/ri/src/main/java/javax/annotation/Nonnull.java\">source</a></p></li>\n<li><p><strong><code>com.intellij.annotations.NotNull</code></strong><br>\n<em>Used by IntelliJ IDEA IDE for static analysis.</em><br>\n<a href=\"http://www.jetbrains.com/idea/webhelp/nullable-and-notnull-annotations.html\">documentation</a></p></li>\n<li><p><strong><code>lombok.NonNull</code></strong><br>\n<em>Used to control code generation in Project Lombok.</em><br>\n<em>Placeholder annotation since there is no standard.</em><br>\n<a href=\"https://github.com/rzwitserloot/lombok/blob/master/src/core/lombok/NonNull.java\">source</a>, \n<a href=\"http://projectlombok.org/features/GetterSetter.html\">documentation</a></p></li>\n</ul>\n    ",
    "a": "\n<p>I would only use things under the <code>javax</code> namespace (even though I love what Lombok and IntelliJ are doing). Otherwise, you might be creating a dependency on something other than what the run-time gives you for something that is pretty much <em>semantics</em>. Maybe for some projects, that's ok, but that'd be a deal-breaker for me.</p>\n\n<p>I would use <code>javax.validation.constraints.NotNull</code> because that's already here with Java EE 6. </p>\n\n<p>The <code>javax.annotation.NonNull</code> might not be here until Java 8 (as Stephen pointed out). And the others are not standard annotations.</p>\n\n<p>It would have been nice if annotations were extensible. That way you could define your own <code>non-null</code> annotation inheriting/extending from anything. Then when standards get ironed out, all you would have to do would be to redefine your own custom annotation.</p>\n\n<p>Unfortunately that's not the case.</p>\n    "
}, {
    "t": "How to call SOAP web service in Android",
    "l": "http://stackoverflow.com/questions/297586/how-to-call-soap-web-service-in-android",
    "q": "\n\n<p>I am having a lot of trouble finding good information on how to call a standard SOAP/WSDL web service with Android. All I've been able to find are either very convoluted documents and references to \"kSoap2\" and then some bit about parsing it all manually with <a href=\"http://en.wikipedia.org/wiki/Simple_API_for_XML\">SAX</a>. OK, that's fine, but it's 2008 so I figured there should be some good library for calling standard web services.</p>\n\n<p>The web service is just basically one created in <a href=\"http://en.wikipedia.org/wiki/NetBeans\">NetBeans</a>. I would like to have IDE support for generating the plumbing classes. I just need the easiest/most-elegant way to contact a <a href=\"http://en.wikipedia.org/wiki/Web_Services_Description_Language\">WSDL</a> based web service from an Android based phone.</p>\n    ",
    "a": "\n<p>Android does not provide any sort of SOAP library. You can either write your own, or use something like <a href=\"http://ksoap2.sourceforge.net/\">kSOAP 2</a>. As you note, others have been able to compile and use kSOAP2 in their own projects, but I haven't had to.</p>\n\n<p>Google has shown, to date, little interest in adding a SOAP library to Android. My suspicion for this is that they'd rather support the current trends in Web Services toward REST-based services, and using JSON as a data encapsulation format. Or, using XMPP for messaging. But that is just conjecture.</p>\n\n<p>XML-based web services are a slightly non-trivial task on Android at this time. Not knowing NetBeans, I can't speak to the tools available there, but I agree that a better library should be available. It is possible that the XmlPullParser will save you from using SAX, but I don't know much about that.</p>\n    "
}]